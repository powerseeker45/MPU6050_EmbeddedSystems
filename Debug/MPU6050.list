
MPU6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069c8  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08006c98  08006c98  00016c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006cd0  08006cd0  00016cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006cd8  08006cd8  00016cd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006cdc  08006cdc  00016cdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  08006ce0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000010  08006cf0  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000070  08006d50  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  240000d0  08006db0  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240002dc  08006db0  000202dc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY
 13 .debug_info   000174c6  00000000  00000000  00020141  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002636  00000000  00000000  00037607  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f68  00000000  00000000  00039c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c06  00000000  00000000  0003aba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00032a91  00000000  00000000  0003b7ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015318  00000000  00000000  0006e23f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0014652d  00000000  00000000  00083557  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004138  00000000  00000000  001c9a84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  001cdbbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240000d0 	.word	0x240000d0
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08006c80 	.word	0x08006c80

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240000d4 	.word	0x240000d4
 800030c:	08006c80 	.word	0x08006c80

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b970 	b.w	8000608 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9e08      	ldr	r6, [sp, #32]
 8000346:	460d      	mov	r5, r1
 8000348:	4604      	mov	r4, r0
 800034a:	460f      	mov	r7, r1
 800034c:	2b00      	cmp	r3, #0
 800034e:	d14a      	bne.n	80003e6 <__udivmoddi4+0xa6>
 8000350:	428a      	cmp	r2, r1
 8000352:	4694      	mov	ip, r2
 8000354:	d965      	bls.n	8000422 <__udivmoddi4+0xe2>
 8000356:	fab2 f382 	clz	r3, r2
 800035a:	b143      	cbz	r3, 800036e <__udivmoddi4+0x2e>
 800035c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000360:	f1c3 0220 	rsb	r2, r3, #32
 8000364:	409f      	lsls	r7, r3
 8000366:	fa20 f202 	lsr.w	r2, r0, r2
 800036a:	4317      	orrs	r7, r2
 800036c:	409c      	lsls	r4, r3
 800036e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000372:	fa1f f58c 	uxth.w	r5, ip
 8000376:	fbb7 f1fe 	udiv	r1, r7, lr
 800037a:	0c22      	lsrs	r2, r4, #16
 800037c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000380:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000384:	fb01 f005 	mul.w	r0, r1, r5
 8000388:	4290      	cmp	r0, r2
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x62>
 800038c:	eb1c 0202 	adds.w	r2, ip, r2
 8000390:	f101 37ff 	add.w	r7, r1, #4294967295
 8000394:	f080 811c 	bcs.w	80005d0 <__udivmoddi4+0x290>
 8000398:	4290      	cmp	r0, r2
 800039a:	f240 8119 	bls.w	80005d0 <__udivmoddi4+0x290>
 800039e:	3902      	subs	r1, #2
 80003a0:	4462      	add	r2, ip
 80003a2:	1a12      	subs	r2, r2, r0
 80003a4:	b2a4      	uxth	r4, r4
 80003a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003b2:	fb00 f505 	mul.w	r5, r0, r5
 80003b6:	42a5      	cmp	r5, r4
 80003b8:	d90a      	bls.n	80003d0 <__udivmoddi4+0x90>
 80003ba:	eb1c 0404 	adds.w	r4, ip, r4
 80003be:	f100 32ff 	add.w	r2, r0, #4294967295
 80003c2:	f080 8107 	bcs.w	80005d4 <__udivmoddi4+0x294>
 80003c6:	42a5      	cmp	r5, r4
 80003c8:	f240 8104 	bls.w	80005d4 <__udivmoddi4+0x294>
 80003cc:	4464      	add	r4, ip
 80003ce:	3802      	subs	r0, #2
 80003d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003d4:	1b64      	subs	r4, r4, r5
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11e      	cbz	r6, 80003e2 <__udivmoddi4+0xa2>
 80003da:	40dc      	lsrs	r4, r3
 80003dc:	2300      	movs	r3, #0
 80003de:	e9c6 4300 	strd	r4, r3, [r6]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0xbc>
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	f000 80ed 	beq.w	80005ca <__udivmoddi4+0x28a>
 80003f0:	2100      	movs	r1, #0
 80003f2:	e9c6 0500 	strd	r0, r5, [r6]
 80003f6:	4608      	mov	r0, r1
 80003f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fc:	fab3 f183 	clz	r1, r3
 8000400:	2900      	cmp	r1, #0
 8000402:	d149      	bne.n	8000498 <__udivmoddi4+0x158>
 8000404:	42ab      	cmp	r3, r5
 8000406:	d302      	bcc.n	800040e <__udivmoddi4+0xce>
 8000408:	4282      	cmp	r2, r0
 800040a:	f200 80f8 	bhi.w	80005fe <__udivmoddi4+0x2be>
 800040e:	1a84      	subs	r4, r0, r2
 8000410:	eb65 0203 	sbc.w	r2, r5, r3
 8000414:	2001      	movs	r0, #1
 8000416:	4617      	mov	r7, r2
 8000418:	2e00      	cmp	r6, #0
 800041a:	d0e2      	beq.n	80003e2 <__udivmoddi4+0xa2>
 800041c:	e9c6 4700 	strd	r4, r7, [r6]
 8000420:	e7df      	b.n	80003e2 <__udivmoddi4+0xa2>
 8000422:	b902      	cbnz	r2, 8000426 <__udivmoddi4+0xe6>
 8000424:	deff      	udf	#255	; 0xff
 8000426:	fab2 f382 	clz	r3, r2
 800042a:	2b00      	cmp	r3, #0
 800042c:	f040 8090 	bne.w	8000550 <__udivmoddi4+0x210>
 8000430:	1a8a      	subs	r2, r1, r2
 8000432:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000436:	fa1f fe8c 	uxth.w	lr, ip
 800043a:	2101      	movs	r1, #1
 800043c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000440:	fb07 2015 	mls	r0, r7, r5, r2
 8000444:	0c22      	lsrs	r2, r4, #16
 8000446:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800044a:	fb0e f005 	mul.w	r0, lr, r5
 800044e:	4290      	cmp	r0, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x124>
 8000452:	eb1c 0202 	adds.w	r2, ip, r2
 8000456:	f105 38ff 	add.w	r8, r5, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x122>
 800045c:	4290      	cmp	r0, r2
 800045e:	f200 80cb 	bhi.w	80005f8 <__udivmoddi4+0x2b8>
 8000462:	4645      	mov	r5, r8
 8000464:	1a12      	subs	r2, r2, r0
 8000466:	b2a4      	uxth	r4, r4
 8000468:	fbb2 f0f7 	udiv	r0, r2, r7
 800046c:	fb07 2210 	mls	r2, r7, r0, r2
 8000470:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000474:	fb0e fe00 	mul.w	lr, lr, r0
 8000478:	45a6      	cmp	lr, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x14e>
 800047c:	eb1c 0404 	adds.w	r4, ip, r4
 8000480:	f100 32ff 	add.w	r2, r0, #4294967295
 8000484:	d202      	bcs.n	800048c <__udivmoddi4+0x14c>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f200 80bb 	bhi.w	8000602 <__udivmoddi4+0x2c2>
 800048c:	4610      	mov	r0, r2
 800048e:	eba4 040e 	sub.w	r4, r4, lr
 8000492:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000496:	e79f      	b.n	80003d8 <__udivmoddi4+0x98>
 8000498:	f1c1 0720 	rsb	r7, r1, #32
 800049c:	408b      	lsls	r3, r1
 800049e:	fa22 fc07 	lsr.w	ip, r2, r7
 80004a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80004a6:	fa05 f401 	lsl.w	r4, r5, r1
 80004aa:	fa20 f307 	lsr.w	r3, r0, r7
 80004ae:	40fd      	lsrs	r5, r7
 80004b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004b4:	4323      	orrs	r3, r4
 80004b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80004ba:	fa1f fe8c 	uxth.w	lr, ip
 80004be:	fb09 5518 	mls	r5, r9, r8, r5
 80004c2:	0c1c      	lsrs	r4, r3, #16
 80004c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004c8:	fb08 f50e 	mul.w	r5, r8, lr
 80004cc:	42a5      	cmp	r5, r4
 80004ce:	fa02 f201 	lsl.w	r2, r2, r1
 80004d2:	fa00 f001 	lsl.w	r0, r0, r1
 80004d6:	d90b      	bls.n	80004f0 <__udivmoddi4+0x1b0>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004e0:	f080 8088 	bcs.w	80005f4 <__udivmoddi4+0x2b4>
 80004e4:	42a5      	cmp	r5, r4
 80004e6:	f240 8085 	bls.w	80005f4 <__udivmoddi4+0x2b4>
 80004ea:	f1a8 0802 	sub.w	r8, r8, #2
 80004ee:	4464      	add	r4, ip
 80004f0:	1b64      	subs	r4, r4, r5
 80004f2:	b29d      	uxth	r5, r3
 80004f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004f8:	fb09 4413 	mls	r4, r9, r3, r4
 80004fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000500:	fb03 fe0e 	mul.w	lr, r3, lr
 8000504:	45a6      	cmp	lr, r4
 8000506:	d908      	bls.n	800051a <__udivmoddi4+0x1da>
 8000508:	eb1c 0404 	adds.w	r4, ip, r4
 800050c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000510:	d26c      	bcs.n	80005ec <__udivmoddi4+0x2ac>
 8000512:	45a6      	cmp	lr, r4
 8000514:	d96a      	bls.n	80005ec <__udivmoddi4+0x2ac>
 8000516:	3b02      	subs	r3, #2
 8000518:	4464      	add	r4, ip
 800051a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800051e:	fba3 9502 	umull	r9, r5, r3, r2
 8000522:	eba4 040e 	sub.w	r4, r4, lr
 8000526:	42ac      	cmp	r4, r5
 8000528:	46c8      	mov	r8, r9
 800052a:	46ae      	mov	lr, r5
 800052c:	d356      	bcc.n	80005dc <__udivmoddi4+0x29c>
 800052e:	d053      	beq.n	80005d8 <__udivmoddi4+0x298>
 8000530:	b156      	cbz	r6, 8000548 <__udivmoddi4+0x208>
 8000532:	ebb0 0208 	subs.w	r2, r0, r8
 8000536:	eb64 040e 	sbc.w	r4, r4, lr
 800053a:	fa04 f707 	lsl.w	r7, r4, r7
 800053e:	40ca      	lsrs	r2, r1
 8000540:	40cc      	lsrs	r4, r1
 8000542:	4317      	orrs	r7, r2
 8000544:	e9c6 7400 	strd	r7, r4, [r6]
 8000548:	4618      	mov	r0, r3
 800054a:	2100      	movs	r1, #0
 800054c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000550:	f1c3 0120 	rsb	r1, r3, #32
 8000554:	fa02 fc03 	lsl.w	ip, r2, r3
 8000558:	fa20 f201 	lsr.w	r2, r0, r1
 800055c:	fa25 f101 	lsr.w	r1, r5, r1
 8000560:	409d      	lsls	r5, r3
 8000562:	432a      	orrs	r2, r5
 8000564:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000568:	fa1f fe8c 	uxth.w	lr, ip
 800056c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000570:	fb07 1510 	mls	r5, r7, r0, r1
 8000574:	0c11      	lsrs	r1, r2, #16
 8000576:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800057a:	fb00 f50e 	mul.w	r5, r0, lr
 800057e:	428d      	cmp	r5, r1
 8000580:	fa04 f403 	lsl.w	r4, r4, r3
 8000584:	d908      	bls.n	8000598 <__udivmoddi4+0x258>
 8000586:	eb1c 0101 	adds.w	r1, ip, r1
 800058a:	f100 38ff 	add.w	r8, r0, #4294967295
 800058e:	d22f      	bcs.n	80005f0 <__udivmoddi4+0x2b0>
 8000590:	428d      	cmp	r5, r1
 8000592:	d92d      	bls.n	80005f0 <__udivmoddi4+0x2b0>
 8000594:	3802      	subs	r0, #2
 8000596:	4461      	add	r1, ip
 8000598:	1b49      	subs	r1, r1, r5
 800059a:	b292      	uxth	r2, r2
 800059c:	fbb1 f5f7 	udiv	r5, r1, r7
 80005a0:	fb07 1115 	mls	r1, r7, r5, r1
 80005a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005a8:	fb05 f10e 	mul.w	r1, r5, lr
 80005ac:	4291      	cmp	r1, r2
 80005ae:	d908      	bls.n	80005c2 <__udivmoddi4+0x282>
 80005b0:	eb1c 0202 	adds.w	r2, ip, r2
 80005b4:	f105 38ff 	add.w	r8, r5, #4294967295
 80005b8:	d216      	bcs.n	80005e8 <__udivmoddi4+0x2a8>
 80005ba:	4291      	cmp	r1, r2
 80005bc:	d914      	bls.n	80005e8 <__udivmoddi4+0x2a8>
 80005be:	3d02      	subs	r5, #2
 80005c0:	4462      	add	r2, ip
 80005c2:	1a52      	subs	r2, r2, r1
 80005c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005c8:	e738      	b.n	800043c <__udivmoddi4+0xfc>
 80005ca:	4631      	mov	r1, r6
 80005cc:	4630      	mov	r0, r6
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xa2>
 80005d0:	4639      	mov	r1, r7
 80005d2:	e6e6      	b.n	80003a2 <__udivmoddi4+0x62>
 80005d4:	4610      	mov	r0, r2
 80005d6:	e6fb      	b.n	80003d0 <__udivmoddi4+0x90>
 80005d8:	4548      	cmp	r0, r9
 80005da:	d2a9      	bcs.n	8000530 <__udivmoddi4+0x1f0>
 80005dc:	ebb9 0802 	subs.w	r8, r9, r2
 80005e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005e4:	3b01      	subs	r3, #1
 80005e6:	e7a3      	b.n	8000530 <__udivmoddi4+0x1f0>
 80005e8:	4645      	mov	r5, r8
 80005ea:	e7ea      	b.n	80005c2 <__udivmoddi4+0x282>
 80005ec:	462b      	mov	r3, r5
 80005ee:	e794      	b.n	800051a <__udivmoddi4+0x1da>
 80005f0:	4640      	mov	r0, r8
 80005f2:	e7d1      	b.n	8000598 <__udivmoddi4+0x258>
 80005f4:	46d0      	mov	r8, sl
 80005f6:	e77b      	b.n	80004f0 <__udivmoddi4+0x1b0>
 80005f8:	3d02      	subs	r5, #2
 80005fa:	4462      	add	r2, ip
 80005fc:	e732      	b.n	8000464 <__udivmoddi4+0x124>
 80005fe:	4608      	mov	r0, r1
 8000600:	e70a      	b.n	8000418 <__udivmoddi4+0xd8>
 8000602:	4464      	add	r4, ip
 8000604:	3802      	subs	r0, #2
 8000606:	e742      	b.n	800048e <__udivmoddi4+0x14e>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000610:	f000 fe00 	bl	8001214 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000614:	f000 f826 	bl	8000664 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000618:	f000 f974 	bl	8000904 <MX_GPIO_Init>
  MX_ETH_Init();
 800061c:	f000 f892 	bl	8000744 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000620:	f000 f91c 	bl	800085c <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000624:	f000 f966 	bl	80008f4 <MX_USB_OTG_HS_USB_Init>
  MX_I2C2_Init();
 8000628:	f000 f8d8 	bl	80007dc <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */


  MPU6050_Init(&hi2c2);
 800062c:	4808      	ldr	r0, [pc, #32]	; (8000650 <main+0x44>)
 800062e:	f000 fa78 	bl	8000b22 <MPU6050_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ret=MPU6050_GetScaledData(&hi2c2, accel, gyro, &temp);
 8000632:	4b08      	ldr	r3, [pc, #32]	; (8000654 <main+0x48>)
 8000634:	4a08      	ldr	r2, [pc, #32]	; (8000658 <main+0x4c>)
 8000636:	4909      	ldr	r1, [pc, #36]	; (800065c <main+0x50>)
 8000638:	4805      	ldr	r0, [pc, #20]	; (8000650 <main+0x44>)
 800063a:	f000 faed 	bl	8000c18 <MPU6050_GetScaledData>
 800063e:	4603      	mov	r3, r0
 8000640:	b2da      	uxtb	r2, r3
 8000642:	4b07      	ldr	r3, [pc, #28]	; (8000660 <main+0x54>)
 8000644:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(1000);
 8000646:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800064a:	f000 fe75 	bl	8001338 <HAL_Delay>
  {
 800064e:	e7f0      	b.n	8000632 <main+0x26>
 8000650:	240001d4 	.word	0x240001d4
 8000654:	240002ca 	.word	0x240002ca
 8000658:	240002c4 	.word	0x240002c4
 800065c:	240002bc 	.word	0x240002bc
 8000660:	240002cc 	.word	0x240002cc

08000664 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b09c      	sub	sp, #112	; 0x70
 8000668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800066e:	224c      	movs	r2, #76	; 0x4c
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f006 fad8 	bl	8006c28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000678:	1d3b      	adds	r3, r7, #4
 800067a:	2220      	movs	r2, #32
 800067c:	2100      	movs	r1, #0
 800067e:	4618      	mov	r0, r3
 8000680:	f006 fad2 	bl	8006c28 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000684:	2002      	movs	r0, #2
 8000686:	f002 fb8d 	bl	8002da4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800068a:	2300      	movs	r3, #0
 800068c:	603b      	str	r3, [r7, #0]
 800068e:	4b2c      	ldr	r3, [pc, #176]	; (8000740 <SystemClock_Config+0xdc>)
 8000690:	699b      	ldr	r3, [r3, #24]
 8000692:	4a2b      	ldr	r2, [pc, #172]	; (8000740 <SystemClock_Config+0xdc>)
 8000694:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000698:	6193      	str	r3, [r2, #24]
 800069a:	4b29      	ldr	r3, [pc, #164]	; (8000740 <SystemClock_Config+0xdc>)
 800069c:	699b      	ldr	r3, [r3, #24]
 800069e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006a2:	603b      	str	r3, [r7, #0]
 80006a4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006a6:	bf00      	nop
 80006a8:	4b25      	ldr	r3, [pc, #148]	; (8000740 <SystemClock_Config+0xdc>)
 80006aa:	699b      	ldr	r3, [r3, #24]
 80006ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006b4:	d1f8      	bne.n	80006a8 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80006b6:	2321      	movs	r3, #33	; 0x21
 80006b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006ba:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006be:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006c0:	2301      	movs	r3, #1
 80006c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c4:	2302      	movs	r3, #2
 80006c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006c8:	2302      	movs	r3, #2
 80006ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006cc:	2304      	movs	r3, #4
 80006ce:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 80006d0:	f240 1313 	movw	r3, #275	; 0x113
 80006d4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80006d6:	2301      	movs	r3, #1
 80006d8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006da:	2304      	movs	r3, #4
 80006dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006de:	2302      	movs	r3, #2
 80006e0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80006e2:	2304      	movs	r3, #4
 80006e4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006e6:	2300      	movs	r3, #0
 80006e8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006f2:	4618      	mov	r0, r3
 80006f4:	f002 fb90 	bl	8002e18 <HAL_RCC_OscConfig>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006fe:	f000 fa0b 	bl	8000b18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000702:	233f      	movs	r3, #63	; 0x3f
 8000704:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000706:	2303      	movs	r3, #3
 8000708:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800070a:	2300      	movs	r3, #0
 800070c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800070e:	2308      	movs	r3, #8
 8000710:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000712:	2340      	movs	r3, #64	; 0x40
 8000714:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000716:	2340      	movs	r3, #64	; 0x40
 8000718:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800071a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800071e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000720:	2340      	movs	r3, #64	; 0x40
 8000722:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000724:	1d3b      	adds	r3, r7, #4
 8000726:	2103      	movs	r1, #3
 8000728:	4618      	mov	r0, r3
 800072a:	f002 ff4f 	bl	80035cc <HAL_RCC_ClockConfig>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000734:	f000 f9f0 	bl	8000b18 <Error_Handler>
  }
}
 8000738:	bf00      	nop
 800073a:	3770      	adds	r7, #112	; 0x70
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	58024800 	.word	0x58024800

08000744 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000748:	4b1e      	ldr	r3, [pc, #120]	; (80007c4 <MX_ETH_Init+0x80>)
 800074a:	4a1f      	ldr	r2, [pc, #124]	; (80007c8 <MX_ETH_Init+0x84>)
 800074c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800074e:	4b1f      	ldr	r3, [pc, #124]	; (80007cc <MX_ETH_Init+0x88>)
 8000750:	2200      	movs	r2, #0
 8000752:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000754:	4b1d      	ldr	r3, [pc, #116]	; (80007cc <MX_ETH_Init+0x88>)
 8000756:	2280      	movs	r2, #128	; 0x80
 8000758:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800075a:	4b1c      	ldr	r3, [pc, #112]	; (80007cc <MX_ETH_Init+0x88>)
 800075c:	22e1      	movs	r2, #225	; 0xe1
 800075e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000760:	4b1a      	ldr	r3, [pc, #104]	; (80007cc <MX_ETH_Init+0x88>)
 8000762:	2200      	movs	r2, #0
 8000764:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000766:	4b19      	ldr	r3, [pc, #100]	; (80007cc <MX_ETH_Init+0x88>)
 8000768:	2200      	movs	r2, #0
 800076a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800076c:	4b17      	ldr	r3, [pc, #92]	; (80007cc <MX_ETH_Init+0x88>)
 800076e:	2200      	movs	r2, #0
 8000770:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000772:	4b14      	ldr	r3, [pc, #80]	; (80007c4 <MX_ETH_Init+0x80>)
 8000774:	4a15      	ldr	r2, [pc, #84]	; (80007cc <MX_ETH_Init+0x88>)
 8000776:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000778:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <MX_ETH_Init+0x80>)
 800077a:	2201      	movs	r2, #1
 800077c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800077e:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <MX_ETH_Init+0x80>)
 8000780:	4a13      	ldr	r2, [pc, #76]	; (80007d0 <MX_ETH_Init+0x8c>)
 8000782:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000784:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <MX_ETH_Init+0x80>)
 8000786:	4a13      	ldr	r2, [pc, #76]	; (80007d4 <MX_ETH_Init+0x90>)
 8000788:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800078a:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <MX_ETH_Init+0x80>)
 800078c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000790:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000792:	480c      	ldr	r0, [pc, #48]	; (80007c4 <MX_ETH_Init+0x80>)
 8000794:	f000 feec 	bl	8001570 <HAL_ETH_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800079e:	f000 f9bb 	bl	8000b18 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80007a2:	2238      	movs	r2, #56	; 0x38
 80007a4:	2100      	movs	r1, #0
 80007a6:	480c      	ldr	r0, [pc, #48]	; (80007d8 <MX_ETH_Init+0x94>)
 80007a8:	f006 fa3e 	bl	8006c28 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80007ac:	4b0a      	ldr	r3, [pc, #40]	; (80007d8 <MX_ETH_Init+0x94>)
 80007ae:	2221      	movs	r2, #33	; 0x21
 80007b0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80007b2:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <MX_ETH_Init+0x94>)
 80007b4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80007b8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80007ba:	4b07      	ldr	r3, [pc, #28]	; (80007d8 <MX_ETH_Init+0x94>)
 80007bc:	2200      	movs	r2, #0
 80007be:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	24000124 	.word	0x24000124
 80007c8:	40028000 	.word	0x40028000
 80007cc:	240002d0 	.word	0x240002d0
 80007d0:	24000070 	.word	0x24000070
 80007d4:	24000010 	.word	0x24000010
 80007d8:	240000ec 	.word	0x240000ec

080007dc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80007e0:	4b1b      	ldr	r3, [pc, #108]	; (8000850 <MX_I2C2_Init+0x74>)
 80007e2:	4a1c      	ldr	r2, [pc, #112]	; (8000854 <MX_I2C2_Init+0x78>)
 80007e4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x60404E72;
 80007e6:	4b1a      	ldr	r3, [pc, #104]	; (8000850 <MX_I2C2_Init+0x74>)
 80007e8:	4a1b      	ldr	r2, [pc, #108]	; (8000858 <MX_I2C2_Init+0x7c>)
 80007ea:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80007ec:	4b18      	ldr	r3, [pc, #96]	; (8000850 <MX_I2C2_Init+0x74>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007f2:	4b17      	ldr	r3, [pc, #92]	; (8000850 <MX_I2C2_Init+0x74>)
 80007f4:	2201      	movs	r2, #1
 80007f6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007f8:	4b15      	ldr	r3, [pc, #84]	; (8000850 <MX_I2C2_Init+0x74>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80007fe:	4b14      	ldr	r3, [pc, #80]	; (8000850 <MX_I2C2_Init+0x74>)
 8000800:	2200      	movs	r2, #0
 8000802:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000804:	4b12      	ldr	r3, [pc, #72]	; (8000850 <MX_I2C2_Init+0x74>)
 8000806:	2200      	movs	r2, #0
 8000808:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800080a:	4b11      	ldr	r3, [pc, #68]	; (8000850 <MX_I2C2_Init+0x74>)
 800080c:	2200      	movs	r2, #0
 800080e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000810:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <MX_I2C2_Init+0x74>)
 8000812:	2200      	movs	r2, #0
 8000814:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000816:	480e      	ldr	r0, [pc, #56]	; (8000850 <MX_I2C2_Init+0x74>)
 8000818:	f001 fca0 	bl	800215c <HAL_I2C_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000822:	f000 f979 	bl	8000b18 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000826:	2100      	movs	r1, #0
 8000828:	4809      	ldr	r0, [pc, #36]	; (8000850 <MX_I2C2_Init+0x74>)
 800082a:	f002 fa23 	bl	8002c74 <HAL_I2CEx_ConfigAnalogFilter>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000834:	f000 f970 	bl	8000b18 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000838:	2100      	movs	r1, #0
 800083a:	4805      	ldr	r0, [pc, #20]	; (8000850 <MX_I2C2_Init+0x74>)
 800083c:	f002 fa65 	bl	8002d0a <HAL_I2CEx_ConfigDigitalFilter>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000846:	f000 f967 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	240001d4 	.word	0x240001d4
 8000854:	40005800 	.word	0x40005800
 8000858:	60404e72 	.word	0x60404e72

0800085c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000860:	4b22      	ldr	r3, [pc, #136]	; (80008ec <MX_USART3_UART_Init+0x90>)
 8000862:	4a23      	ldr	r2, [pc, #140]	; (80008f0 <MX_USART3_UART_Init+0x94>)
 8000864:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000866:	4b21      	ldr	r3, [pc, #132]	; (80008ec <MX_USART3_UART_Init+0x90>)
 8000868:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800086c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800086e:	4b1f      	ldr	r3, [pc, #124]	; (80008ec <MX_USART3_UART_Init+0x90>)
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000874:	4b1d      	ldr	r3, [pc, #116]	; (80008ec <MX_USART3_UART_Init+0x90>)
 8000876:	2200      	movs	r2, #0
 8000878:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800087a:	4b1c      	ldr	r3, [pc, #112]	; (80008ec <MX_USART3_UART_Init+0x90>)
 800087c:	2200      	movs	r2, #0
 800087e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000880:	4b1a      	ldr	r3, [pc, #104]	; (80008ec <MX_USART3_UART_Init+0x90>)
 8000882:	220c      	movs	r2, #12
 8000884:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000886:	4b19      	ldr	r3, [pc, #100]	; (80008ec <MX_USART3_UART_Init+0x90>)
 8000888:	2200      	movs	r2, #0
 800088a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800088c:	4b17      	ldr	r3, [pc, #92]	; (80008ec <MX_USART3_UART_Init+0x90>)
 800088e:	2200      	movs	r2, #0
 8000890:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000892:	4b16      	ldr	r3, [pc, #88]	; (80008ec <MX_USART3_UART_Init+0x90>)
 8000894:	2200      	movs	r2, #0
 8000896:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000898:	4b14      	ldr	r3, [pc, #80]	; (80008ec <MX_USART3_UART_Init+0x90>)
 800089a:	2200      	movs	r2, #0
 800089c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800089e:	4b13      	ldr	r3, [pc, #76]	; (80008ec <MX_USART3_UART_Init+0x90>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008a4:	4811      	ldr	r0, [pc, #68]	; (80008ec <MX_USART3_UART_Init+0x90>)
 80008a6:	f004 ffdf 	bl	8005868 <HAL_UART_Init>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80008b0:	f000 f932 	bl	8000b18 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008b4:	2100      	movs	r1, #0
 80008b6:	480d      	ldr	r0, [pc, #52]	; (80008ec <MX_USART3_UART_Init+0x90>)
 80008b8:	f006 f8eb 	bl	8006a92 <HAL_UARTEx_SetTxFifoThreshold>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80008c2:	f000 f929 	bl	8000b18 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008c6:	2100      	movs	r1, #0
 80008c8:	4808      	ldr	r0, [pc, #32]	; (80008ec <MX_USART3_UART_Init+0x90>)
 80008ca:	f006 f920 	bl	8006b0e <HAL_UARTEx_SetRxFifoThreshold>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80008d4:	f000 f920 	bl	8000b18 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80008d8:	4804      	ldr	r0, [pc, #16]	; (80008ec <MX_USART3_UART_Init+0x90>)
 80008da:	f006 f8a1 	bl	8006a20 <HAL_UARTEx_DisableFifoMode>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80008e4:	f000 f918 	bl	8000b18 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008e8:	bf00      	nop
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	24000228 	.word	0x24000228
 80008f0:	40004800 	.word	0x40004800

080008f4 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 80008f8:	bf00      	nop
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
	...

08000904 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b08e      	sub	sp, #56	; 0x38
 8000908:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]
 8000916:	60da      	str	r2, [r3, #12]
 8000918:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800091a:	4b78      	ldr	r3, [pc, #480]	; (8000afc <MX_GPIO_Init+0x1f8>)
 800091c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000920:	4a76      	ldr	r2, [pc, #472]	; (8000afc <MX_GPIO_Init+0x1f8>)
 8000922:	f043 0304 	orr.w	r3, r3, #4
 8000926:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800092a:	4b74      	ldr	r3, [pc, #464]	; (8000afc <MX_GPIO_Init+0x1f8>)
 800092c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000930:	f003 0304 	and.w	r3, r3, #4
 8000934:	623b      	str	r3, [r7, #32]
 8000936:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000938:	4b70      	ldr	r3, [pc, #448]	; (8000afc <MX_GPIO_Init+0x1f8>)
 800093a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800093e:	4a6f      	ldr	r2, [pc, #444]	; (8000afc <MX_GPIO_Init+0x1f8>)
 8000940:	f043 0320 	orr.w	r3, r3, #32
 8000944:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000948:	4b6c      	ldr	r3, [pc, #432]	; (8000afc <MX_GPIO_Init+0x1f8>)
 800094a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800094e:	f003 0320 	and.w	r3, r3, #32
 8000952:	61fb      	str	r3, [r7, #28]
 8000954:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000956:	4b69      	ldr	r3, [pc, #420]	; (8000afc <MX_GPIO_Init+0x1f8>)
 8000958:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800095c:	4a67      	ldr	r2, [pc, #412]	; (8000afc <MX_GPIO_Init+0x1f8>)
 800095e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000962:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000966:	4b65      	ldr	r3, [pc, #404]	; (8000afc <MX_GPIO_Init+0x1f8>)
 8000968:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800096c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000970:	61bb      	str	r3, [r7, #24]
 8000972:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000974:	4b61      	ldr	r3, [pc, #388]	; (8000afc <MX_GPIO_Init+0x1f8>)
 8000976:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800097a:	4a60      	ldr	r2, [pc, #384]	; (8000afc <MX_GPIO_Init+0x1f8>)
 800097c:	f043 0301 	orr.w	r3, r3, #1
 8000980:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000984:	4b5d      	ldr	r3, [pc, #372]	; (8000afc <MX_GPIO_Init+0x1f8>)
 8000986:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	617b      	str	r3, [r7, #20]
 8000990:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000992:	4b5a      	ldr	r3, [pc, #360]	; (8000afc <MX_GPIO_Init+0x1f8>)
 8000994:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000998:	4a58      	ldr	r2, [pc, #352]	; (8000afc <MX_GPIO_Init+0x1f8>)
 800099a:	f043 0302 	orr.w	r3, r3, #2
 800099e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009a2:	4b56      	ldr	r3, [pc, #344]	; (8000afc <MX_GPIO_Init+0x1f8>)
 80009a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a8:	f003 0302 	and.w	r3, r3, #2
 80009ac:	613b      	str	r3, [r7, #16]
 80009ae:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009b0:	4b52      	ldr	r3, [pc, #328]	; (8000afc <MX_GPIO_Init+0x1f8>)
 80009b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b6:	4a51      	ldr	r2, [pc, #324]	; (8000afc <MX_GPIO_Init+0x1f8>)
 80009b8:	f043 0308 	orr.w	r3, r3, #8
 80009bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009c0:	4b4e      	ldr	r3, [pc, #312]	; (8000afc <MX_GPIO_Init+0x1f8>)
 80009c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c6:	f003 0308 	and.w	r3, r3, #8
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009ce:	4b4b      	ldr	r3, [pc, #300]	; (8000afc <MX_GPIO_Init+0x1f8>)
 80009d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d4:	4a49      	ldr	r2, [pc, #292]	; (8000afc <MX_GPIO_Init+0x1f8>)
 80009d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009de:	4b47      	ldr	r3, [pc, #284]	; (8000afc <MX_GPIO_Init+0x1f8>)
 80009e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009e8:	60bb      	str	r3, [r7, #8]
 80009ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009ec:	4b43      	ldr	r3, [pc, #268]	; (8000afc <MX_GPIO_Init+0x1f8>)
 80009ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f2:	4a42      	ldr	r2, [pc, #264]	; (8000afc <MX_GPIO_Init+0x1f8>)
 80009f4:	f043 0310 	orr.w	r3, r3, #16
 80009f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009fc:	4b3f      	ldr	r3, [pc, #252]	; (8000afc <MX_GPIO_Init+0x1f8>)
 80009fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a02:	f003 0310 	and.w	r3, r3, #16
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	f244 0101 	movw	r1, #16385	; 0x4001
 8000a10:	483b      	ldr	r0, [pc, #236]	; (8000b00 <MX_GPIO_Init+0x1fc>)
 8000a12:	f001 fb89 	bl	8002128 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000a16:	2200      	movs	r2, #0
 8000a18:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a1c:	4839      	ldr	r0, [pc, #228]	; (8000b04 <MX_GPIO_Init+0x200>)
 8000a1e:	f001 fb83 	bl	8002128 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000a22:	2200      	movs	r2, #0
 8000a24:	2102      	movs	r1, #2
 8000a26:	4838      	ldr	r0, [pc, #224]	; (8000b08 <MX_GPIO_Init+0x204>)
 8000a28:	f001 fb7e 	bl	8002128 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a32:	2300      	movs	r3, #0
 8000a34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4832      	ldr	r0, [pc, #200]	; (8000b0c <MX_GPIO_Init+0x208>)
 8000a42:	f001 f9c9 	bl	8001dd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000a46:	f244 0301 	movw	r3, #16385	; 0x4001
 8000a4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a54:	2300      	movs	r3, #0
 8000a56:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4828      	ldr	r0, [pc, #160]	; (8000b00 <MX_GPIO_Init+0x1fc>)
 8000a60:	f001 f9ba 	bl	8001dd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000a64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a72:	2300      	movs	r3, #0
 8000a74:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000a76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4821      	ldr	r0, [pc, #132]	; (8000b04 <MX_GPIO_Init+0x200>)
 8000a7e:	f001 f9ab 	bl	8001dd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000a82:	2380      	movs	r3, #128	; 0x80
 8000a84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a86:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000a90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a94:	4619      	mov	r1, r3
 8000a96:	481e      	ldr	r0, [pc, #120]	; (8000b10 <MX_GPIO_Init+0x20c>)
 8000a98:	f001 f99e 	bl	8001dd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000a9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000aa0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000aaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4818      	ldr	r0, [pc, #96]	; (8000b14 <MX_GPIO_Init+0x210>)
 8000ab2:	f001 f991 	bl	8001dd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000ab6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000aba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abc:	2302      	movs	r3, #2
 8000abe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000ac8:	230a      	movs	r3, #10
 8000aca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000acc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4810      	ldr	r0, [pc, #64]	; (8000b14 <MX_GPIO_Init+0x210>)
 8000ad4:	f001 f980 	bl	8001dd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000adc:	2301      	movs	r3, #1
 8000ade:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000ae8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aec:	4619      	mov	r1, r3
 8000aee:	4806      	ldr	r0, [pc, #24]	; (8000b08 <MX_GPIO_Init+0x204>)
 8000af0:	f001 f972 	bl	8001dd8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000af4:	bf00      	nop
 8000af6:	3738      	adds	r7, #56	; 0x38
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	58024400 	.word	0x58024400
 8000b00:	58020400 	.word	0x58020400
 8000b04:	58020c00 	.word	0x58020c00
 8000b08:	58021000 	.word	0x58021000
 8000b0c:	58020800 	.word	0x58020800
 8000b10:	58021800 	.word	0x58021800
 8000b14:	58020000 	.word	0x58020000

08000b18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b1c:	b672      	cpsid	i
}
 8000b1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b20:	e7fe      	b.n	8000b20 <Error_Handler+0x8>

08000b22 <MPU6050_Init>:
 */


#include "mpu6050.h"

void MPU6050_Init(I2C_HandleTypeDef *hi2c) {
 8000b22:	b580      	push	{r7, lr}
 8000b24:	b088      	sub	sp, #32
 8000b26:	af04      	add	r7, sp, #16
 8000b28:	6078      	str	r0, [r7, #4]
    uint8_t data = 0x00; // Clear sleep mode bit (6th bit)
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Write(hi2c, MPU6050_ADDRESS, MPU6050_REG_PWR_MGMT_1, 1, &data, 1, HAL_MAX_DELAY);
 8000b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b32:	9302      	str	r3, [sp, #8]
 8000b34:	2301      	movs	r3, #1
 8000b36:	9301      	str	r3, [sp, #4]
 8000b38:	f107 030f 	add.w	r3, r7, #15
 8000b3c:	9300      	str	r3, [sp, #0]
 8000b3e:	2301      	movs	r3, #1
 8000b40:	226b      	movs	r2, #107	; 0x6b
 8000b42:	21d0      	movs	r1, #208	; 0xd0
 8000b44:	6878      	ldr	r0, [r7, #4]
 8000b46:	f001 fba5 	bl	8002294 <HAL_I2C_Mem_Write>
}
 8000b4a:	bf00      	nop
 8000b4c:	3710      	adds	r7, #16
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <MPU6050_ReadAllData>:
        *temp = (int16_t)(buffer[0] << 8 | buffer[1]);
    }
    return status;
}

HAL_StatusTypeDef MPU6050_ReadAllData(I2C_HandleTypeDef *hi2c, int16_t *accel, int16_t *gyro, int16_t *temp) {
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b08c      	sub	sp, #48	; 0x30
 8000b56:	af04      	add	r7, sp, #16
 8000b58:	60f8      	str	r0, [r7, #12]
 8000b5a:	60b9      	str	r1, [r7, #8]
 8000b5c:	607a      	str	r2, [r7, #4]
 8000b5e:	603b      	str	r3, [r7, #0]
    uint8_t buffer[14];
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(hi2c, MPU6050_ADDRESS, MPU6050_REG_ACCEL_XOUT_H, 1, buffer, 14, HAL_MAX_DELAY);
 8000b60:	f04f 33ff 	mov.w	r3, #4294967295
 8000b64:	9302      	str	r3, [sp, #8]
 8000b66:	230e      	movs	r3, #14
 8000b68:	9301      	str	r3, [sp, #4]
 8000b6a:	f107 0310 	add.w	r3, r7, #16
 8000b6e:	9300      	str	r3, [sp, #0]
 8000b70:	2301      	movs	r3, #1
 8000b72:	223b      	movs	r2, #59	; 0x3b
 8000b74:	21d0      	movs	r1, #208	; 0xd0
 8000b76:	68f8      	ldr	r0, [r7, #12]
 8000b78:	f001 fca0 	bl	80024bc <HAL_I2C_Mem_Read>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	77fb      	strb	r3, [r7, #31]
    if (status == HAL_OK) {
 8000b80:	7ffb      	ldrb	r3, [r7, #31]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d142      	bne.n	8000c0c <MPU6050_ReadAllData+0xba>
        accel[0] = (int16_t)(buffer[0] << 8 | buffer[1]);
 8000b86:	7c3b      	ldrb	r3, [r7, #16]
 8000b88:	021b      	lsls	r3, r3, #8
 8000b8a:	b21a      	sxth	r2, r3
 8000b8c:	7c7b      	ldrb	r3, [r7, #17]
 8000b8e:	b21b      	sxth	r3, r3
 8000b90:	4313      	orrs	r3, r2
 8000b92:	b21a      	sxth	r2, r3
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	801a      	strh	r2, [r3, #0]
        accel[1] = (int16_t)(buffer[2] << 8 | buffer[3]);
 8000b98:	7cbb      	ldrb	r3, [r7, #18]
 8000b9a:	021b      	lsls	r3, r3, #8
 8000b9c:	b219      	sxth	r1, r3
 8000b9e:	7cfb      	ldrb	r3, [r7, #19]
 8000ba0:	b21a      	sxth	r2, r3
 8000ba2:	68bb      	ldr	r3, [r7, #8]
 8000ba4:	3302      	adds	r3, #2
 8000ba6:	430a      	orrs	r2, r1
 8000ba8:	b212      	sxth	r2, r2
 8000baa:	801a      	strh	r2, [r3, #0]
        accel[2] = (int16_t)(buffer[4] << 8 | buffer[5]);
 8000bac:	7d3b      	ldrb	r3, [r7, #20]
 8000bae:	021b      	lsls	r3, r3, #8
 8000bb0:	b219      	sxth	r1, r3
 8000bb2:	7d7b      	ldrb	r3, [r7, #21]
 8000bb4:	b21a      	sxth	r2, r3
 8000bb6:	68bb      	ldr	r3, [r7, #8]
 8000bb8:	3304      	adds	r3, #4
 8000bba:	430a      	orrs	r2, r1
 8000bbc:	b212      	sxth	r2, r2
 8000bbe:	801a      	strh	r2, [r3, #0]
        *temp    = (int16_t)(buffer[6] << 8 | buffer[7]);
 8000bc0:	7dbb      	ldrb	r3, [r7, #22]
 8000bc2:	021b      	lsls	r3, r3, #8
 8000bc4:	b21a      	sxth	r2, r3
 8000bc6:	7dfb      	ldrb	r3, [r7, #23]
 8000bc8:	b21b      	sxth	r3, r3
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	b21a      	sxth	r2, r3
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	801a      	strh	r2, [r3, #0]
        gyro[0]  = (int16_t)(buffer[8] << 8 | buffer[9]);
 8000bd2:	7e3b      	ldrb	r3, [r7, #24]
 8000bd4:	021b      	lsls	r3, r3, #8
 8000bd6:	b21a      	sxth	r2, r3
 8000bd8:	7e7b      	ldrb	r3, [r7, #25]
 8000bda:	b21b      	sxth	r3, r3
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	b21a      	sxth	r2, r3
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	801a      	strh	r2, [r3, #0]
        gyro[1]  = (int16_t)(buffer[10] << 8 | buffer[11]);
 8000be4:	7ebb      	ldrb	r3, [r7, #26]
 8000be6:	021b      	lsls	r3, r3, #8
 8000be8:	b219      	sxth	r1, r3
 8000bea:	7efb      	ldrb	r3, [r7, #27]
 8000bec:	b21a      	sxth	r2, r3
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	3302      	adds	r3, #2
 8000bf2:	430a      	orrs	r2, r1
 8000bf4:	b212      	sxth	r2, r2
 8000bf6:	801a      	strh	r2, [r3, #0]
        gyro[2]  = (int16_t)(buffer[12] << 8 | buffer[13]);
 8000bf8:	7f3b      	ldrb	r3, [r7, #28]
 8000bfa:	021b      	lsls	r3, r3, #8
 8000bfc:	b219      	sxth	r1, r3
 8000bfe:	7f7b      	ldrb	r3, [r7, #29]
 8000c00:	b21a      	sxth	r2, r3
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	3304      	adds	r3, #4
 8000c06:	430a      	orrs	r2, r1
 8000c08:	b212      	sxth	r2, r2
 8000c0a:	801a      	strh	r2, [r3, #0]
    }
    return status;
 8000c0c:	7ffb      	ldrb	r3, [r7, #31]
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3720      	adds	r7, #32
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
	...

08000c18 <MPU6050_GetScaledData>:

HAL_StatusTypeDef MPU6050_GetScaledData(I2C_HandleTypeDef *hi2c, int16_t *accel, int16_t *gyro, int16_t *temp) {
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b086      	sub	sp, #24
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	60f8      	str	r0, [r7, #12]
 8000c20:	60b9      	str	r1, [r7, #8]
 8000c22:	607a      	str	r2, [r7, #4]
 8000c24:	603b      	str	r3, [r7, #0]
    uint8_t i=0;
 8000c26:	2300      	movs	r3, #0
 8000c28:	75fb      	strb	r3, [r7, #23]
    HAL_StatusTypeDef status;
    status=MPU6050_ReadAllData(hi2c, accel, gyro, temp);
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	687a      	ldr	r2, [r7, #4]
 8000c2e:	68b9      	ldr	r1, [r7, #8]
 8000c30:	68f8      	ldr	r0, [r7, #12]
 8000c32:	f7ff ff8e 	bl	8000b52 <MPU6050_ReadAllData>
 8000c36:	4603      	mov	r3, r0
 8000c38:	75bb      	strb	r3, [r7, #22]
    if (status==HAL_OK) {
 8000c3a:	7dbb      	ldrb	r3, [r7, #22]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d14e      	bne.n	8000cde <MPU6050_GetScaledData+0xc6>
        // Accelerometer
    	for (i=0;i<3;i++)
 8000c40:	2300      	movs	r3, #0
 8000c42:	75fb      	strb	r3, [r7, #23]
 8000c44:	e032      	b.n	8000cac <MPU6050_GetScaledData+0x94>
    	{
    		accel[i]/=ACCEL_SCALE;
 8000c46:	7dfb      	ldrb	r3, [r7, #23]
 8000c48:	005b      	lsls	r3, r3, #1
 8000c4a:	68ba      	ldr	r2, [r7, #8]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c52:	ee07 3a90 	vmov	s15, r3
 8000c56:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000c5a:	ed9f 5b23 	vldr	d5, [pc, #140]	; 8000ce8 <MPU6050_GetScaledData+0xd0>
 8000c5e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000c62:	7dfb      	ldrb	r3, [r7, #23]
 8000c64:	005b      	lsls	r3, r3, #1
 8000c66:	68ba      	ldr	r2, [r7, #8]
 8000c68:	4413      	add	r3, r2
 8000c6a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000c6e:	ee17 2a90 	vmov	r2, s15
 8000c72:	b212      	sxth	r2, r2
 8000c74:	801a      	strh	r2, [r3, #0]
    		gyro[i]/=GYRO_SCALE;
 8000c76:	7dfb      	ldrb	r3, [r7, #23]
 8000c78:	005b      	lsls	r3, r3, #1
 8000c7a:	687a      	ldr	r2, [r7, #4]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c82:	ee07 3a90 	vmov	s15, r3
 8000c86:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000c8a:	ed9f 5b19 	vldr	d5, [pc, #100]	; 8000cf0 <MPU6050_GetScaledData+0xd8>
 8000c8e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000c92:	7dfb      	ldrb	r3, [r7, #23]
 8000c94:	005b      	lsls	r3, r3, #1
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	4413      	add	r3, r2
 8000c9a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000c9e:	ee17 2a90 	vmov	r2, s15
 8000ca2:	b212      	sxth	r2, r2
 8000ca4:	801a      	strh	r2, [r3, #0]
    	for (i=0;i<3;i++)
 8000ca6:	7dfb      	ldrb	r3, [r7, #23]
 8000ca8:	3301      	adds	r3, #1
 8000caa:	75fb      	strb	r3, [r7, #23]
 8000cac:	7dfb      	ldrb	r3, [r7, #23]
 8000cae:	2b02      	cmp	r3, #2
 8000cb0:	d9c9      	bls.n	8000c46 <MPU6050_GetScaledData+0x2e>
    	}


        // Temperature
        *temp = *temp / 340.0 + 36.53;
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cb8:	ee07 3a90 	vmov	s15, r3
 8000cbc:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000cc0:	ed9f 5b0d 	vldr	d5, [pc, #52]	; 8000cf8 <MPU6050_GetScaledData+0xe0>
 8000cc4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000cc8:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8000d00 <MPU6050_GetScaledData+0xe8>
 8000ccc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000cd0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000cd4:	ee17 3a90 	vmov	r3, s15
 8000cd8:	b21a      	sxth	r2, r3
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	801a      	strh	r2, [r3, #0]

    }
    return status;
 8000cde:	7dbb      	ldrb	r3, [r7, #22]

}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3718      	adds	r7, #24
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	00000000 	.word	0x00000000
 8000cec:	406f4000 	.word	0x406f4000
 8000cf0:	00000000 	.word	0x00000000
 8000cf4:	40606000 	.word	0x40606000
 8000cf8:	00000000 	.word	0x00000000
 8000cfc:	40754000 	.word	0x40754000
 8000d00:	0a3d70a4 	.word	0x0a3d70a4
 8000d04:	404243d7 	.word	0x404243d7

08000d08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d0e:	4b0a      	ldr	r3, [pc, #40]	; (8000d38 <HAL_MspInit+0x30>)
 8000d10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d14:	4a08      	ldr	r2, [pc, #32]	; (8000d38 <HAL_MspInit+0x30>)
 8000d16:	f043 0302 	orr.w	r3, r3, #2
 8000d1a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d1e:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <HAL_MspInit+0x30>)
 8000d20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d24:	f003 0302 	and.w	r3, r3, #2
 8000d28:	607b      	str	r3, [r7, #4]
 8000d2a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d2c:	bf00      	nop
 8000d2e:	370c      	adds	r7, #12
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr
 8000d38:	58024400 	.word	0x58024400

08000d3c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b08e      	sub	sp, #56	; 0x38
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]
 8000d52:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a59      	ldr	r2, [pc, #356]	; (8000ec0 <HAL_ETH_MspInit+0x184>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	f040 80ab 	bne.w	8000eb6 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000d60:	4b58      	ldr	r3, [pc, #352]	; (8000ec4 <HAL_ETH_MspInit+0x188>)
 8000d62:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d66:	4a57      	ldr	r2, [pc, #348]	; (8000ec4 <HAL_ETH_MspInit+0x188>)
 8000d68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d6c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d70:	4b54      	ldr	r3, [pc, #336]	; (8000ec4 <HAL_ETH_MspInit+0x188>)
 8000d72:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d7a:	623b      	str	r3, [r7, #32]
 8000d7c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000d7e:	4b51      	ldr	r3, [pc, #324]	; (8000ec4 <HAL_ETH_MspInit+0x188>)
 8000d80:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d84:	4a4f      	ldr	r2, [pc, #316]	; (8000ec4 <HAL_ETH_MspInit+0x188>)
 8000d86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d8a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d8e:	4b4d      	ldr	r3, [pc, #308]	; (8000ec4 <HAL_ETH_MspInit+0x188>)
 8000d90:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d98:	61fb      	str	r3, [r7, #28]
 8000d9a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000d9c:	4b49      	ldr	r3, [pc, #292]	; (8000ec4 <HAL_ETH_MspInit+0x188>)
 8000d9e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000da2:	4a48      	ldr	r2, [pc, #288]	; (8000ec4 <HAL_ETH_MspInit+0x188>)
 8000da4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000da8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000dac:	4b45      	ldr	r3, [pc, #276]	; (8000ec4 <HAL_ETH_MspInit+0x188>)
 8000dae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000db6:	61bb      	str	r3, [r7, #24]
 8000db8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dba:	4b42      	ldr	r3, [pc, #264]	; (8000ec4 <HAL_ETH_MspInit+0x188>)
 8000dbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dc0:	4a40      	ldr	r2, [pc, #256]	; (8000ec4 <HAL_ETH_MspInit+0x188>)
 8000dc2:	f043 0304 	orr.w	r3, r3, #4
 8000dc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dca:	4b3e      	ldr	r3, [pc, #248]	; (8000ec4 <HAL_ETH_MspInit+0x188>)
 8000dcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dd0:	f003 0304 	and.w	r3, r3, #4
 8000dd4:	617b      	str	r3, [r7, #20]
 8000dd6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd8:	4b3a      	ldr	r3, [pc, #232]	; (8000ec4 <HAL_ETH_MspInit+0x188>)
 8000dda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dde:	4a39      	ldr	r2, [pc, #228]	; (8000ec4 <HAL_ETH_MspInit+0x188>)
 8000de0:	f043 0301 	orr.w	r3, r3, #1
 8000de4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000de8:	4b36      	ldr	r3, [pc, #216]	; (8000ec4 <HAL_ETH_MspInit+0x188>)
 8000dea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	613b      	str	r3, [r7, #16]
 8000df4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df6:	4b33      	ldr	r3, [pc, #204]	; (8000ec4 <HAL_ETH_MspInit+0x188>)
 8000df8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dfc:	4a31      	ldr	r2, [pc, #196]	; (8000ec4 <HAL_ETH_MspInit+0x188>)
 8000dfe:	f043 0302 	orr.w	r3, r3, #2
 8000e02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e06:	4b2f      	ldr	r3, [pc, #188]	; (8000ec4 <HAL_ETH_MspInit+0x188>)
 8000e08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e0c:	f003 0302 	and.w	r3, r3, #2
 8000e10:	60fb      	str	r3, [r7, #12]
 8000e12:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e14:	4b2b      	ldr	r3, [pc, #172]	; (8000ec4 <HAL_ETH_MspInit+0x188>)
 8000e16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e1a:	4a2a      	ldr	r2, [pc, #168]	; (8000ec4 <HAL_ETH_MspInit+0x188>)
 8000e1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e24:	4b27      	ldr	r3, [pc, #156]	; (8000ec4 <HAL_ETH_MspInit+0x188>)
 8000e26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e2e:	60bb      	str	r3, [r7, #8]
 8000e30:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000e32:	2332      	movs	r3, #50	; 0x32
 8000e34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e36:	2302      	movs	r3, #2
 8000e38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e42:	230b      	movs	r3, #11
 8000e44:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	481e      	ldr	r0, [pc, #120]	; (8000ec8 <HAL_ETH_MspInit+0x18c>)
 8000e4e:	f000 ffc3 	bl	8001dd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000e52:	2386      	movs	r3, #134	; 0x86
 8000e54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e56:	2302      	movs	r3, #2
 8000e58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e62:	230b      	movs	r3, #11
 8000e64:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4817      	ldr	r0, [pc, #92]	; (8000ecc <HAL_ETH_MspInit+0x190>)
 8000e6e:	f000 ffb3 	bl	8001dd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000e72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e80:	2300      	movs	r3, #0
 8000e82:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e84:	230b      	movs	r3, #11
 8000e86:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000e88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4810      	ldr	r0, [pc, #64]	; (8000ed0 <HAL_ETH_MspInit+0x194>)
 8000e90:	f000 ffa2 	bl	8001dd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000e94:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000e98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ea6:	230b      	movs	r3, #11
 8000ea8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000eaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4808      	ldr	r0, [pc, #32]	; (8000ed4 <HAL_ETH_MspInit+0x198>)
 8000eb2:	f000 ff91 	bl	8001dd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000eb6:	bf00      	nop
 8000eb8:	3738      	adds	r7, #56	; 0x38
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40028000 	.word	0x40028000
 8000ec4:	58024400 	.word	0x58024400
 8000ec8:	58020800 	.word	0x58020800
 8000ecc:	58020000 	.word	0x58020000
 8000ed0:	58020400 	.word	0x58020400
 8000ed4:	58021800 	.word	0x58021800

08000ed8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b0b8      	sub	sp, #224	; 0xe0
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
 8000eee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ef0:	f107 0310 	add.w	r3, r7, #16
 8000ef4:	22b8      	movs	r2, #184	; 0xb8
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f005 fe95 	bl	8006c28 <memset>
  if(hi2c->Instance==I2C2)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a26      	ldr	r2, [pc, #152]	; (8000f9c <HAL_I2C_MspInit+0xc4>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d145      	bne.n	8000f94 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000f08:	f04f 0208 	mov.w	r2, #8
 8000f0c:	f04f 0300 	mov.w	r3, #0
 8000f10:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8000f14:	2300      	movs	r3, #0
 8000f16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f1a:	f107 0310 	add.w	r3, r7, #16
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f002 fee0 	bl	8003ce4 <HAL_RCCEx_PeriphCLKConfig>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000f2a:	f7ff fdf5 	bl	8000b18 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f2e:	4b1c      	ldr	r3, [pc, #112]	; (8000fa0 <HAL_I2C_MspInit+0xc8>)
 8000f30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f34:	4a1a      	ldr	r2, [pc, #104]	; (8000fa0 <HAL_I2C_MspInit+0xc8>)
 8000f36:	f043 0320 	orr.w	r3, r3, #32
 8000f3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f3e:	4b18      	ldr	r3, [pc, #96]	; (8000fa0 <HAL_I2C_MspInit+0xc8>)
 8000f40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f44:	f003 0320 	and.w	r3, r3, #32
 8000f48:	60fb      	str	r3, [r7, #12]
 8000f4a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f52:	2312      	movs	r3, #18
 8000f54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000f64:	2304      	movs	r3, #4
 8000f66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f6a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f6e:	4619      	mov	r1, r3
 8000f70:	480c      	ldr	r0, [pc, #48]	; (8000fa4 <HAL_I2C_MspInit+0xcc>)
 8000f72:	f000 ff31 	bl	8001dd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000f76:	4b0a      	ldr	r3, [pc, #40]	; (8000fa0 <HAL_I2C_MspInit+0xc8>)
 8000f78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f7c:	4a08      	ldr	r2, [pc, #32]	; (8000fa0 <HAL_I2C_MspInit+0xc8>)
 8000f7e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f82:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000f86:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <HAL_I2C_MspInit+0xc8>)
 8000f88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f90:	60bb      	str	r3, [r7, #8]
 8000f92:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000f94:	bf00      	nop
 8000f96:	37e0      	adds	r7, #224	; 0xe0
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40005800 	.word	0x40005800
 8000fa0:	58024400 	.word	0x58024400
 8000fa4:	58021400 	.word	0x58021400

08000fa8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b0b8      	sub	sp, #224	; 0xe0
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]
 8000fbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fc0:	f107 0310 	add.w	r3, r7, #16
 8000fc4:	22b8      	movs	r2, #184	; 0xb8
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f005 fe2d 	bl	8006c28 <memset>
  if(huart->Instance==USART3)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a27      	ldr	r2, [pc, #156]	; (8001070 <HAL_UART_MspInit+0xc8>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d146      	bne.n	8001066 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000fd8:	f04f 0202 	mov.w	r2, #2
 8000fdc:	f04f 0300 	mov.w	r3, #0
 8000fe0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fea:	f107 0310 	add.w	r3, r7, #16
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f002 fe78 	bl	8003ce4 <HAL_RCCEx_PeriphCLKConfig>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000ffa:	f7ff fd8d 	bl	8000b18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ffe:	4b1d      	ldr	r3, [pc, #116]	; (8001074 <HAL_UART_MspInit+0xcc>)
 8001000:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001004:	4a1b      	ldr	r2, [pc, #108]	; (8001074 <HAL_UART_MspInit+0xcc>)
 8001006:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800100a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800100e:	4b19      	ldr	r3, [pc, #100]	; (8001074 <HAL_UART_MspInit+0xcc>)
 8001010:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001014:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800101c:	4b15      	ldr	r3, [pc, #84]	; (8001074 <HAL_UART_MspInit+0xcc>)
 800101e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001022:	4a14      	ldr	r2, [pc, #80]	; (8001074 <HAL_UART_MspInit+0xcc>)
 8001024:	f043 0308 	orr.w	r3, r3, #8
 8001028:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800102c:	4b11      	ldr	r3, [pc, #68]	; (8001074 <HAL_UART_MspInit+0xcc>)
 800102e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001032:	f003 0308 	and.w	r3, r3, #8
 8001036:	60bb      	str	r3, [r7, #8]
 8001038:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 800103a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800103e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001042:	2302      	movs	r3, #2
 8001044:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104e:	2300      	movs	r3, #0
 8001050:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001054:	2307      	movs	r3, #7
 8001056:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800105a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800105e:	4619      	mov	r1, r3
 8001060:	4805      	ldr	r0, [pc, #20]	; (8001078 <HAL_UART_MspInit+0xd0>)
 8001062:	f000 feb9 	bl	8001dd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001066:	bf00      	nop
 8001068:	37e0      	adds	r7, #224	; 0xe0
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40004800 	.word	0x40004800
 8001074:	58024400 	.word	0x58024400
 8001078:	58020c00 	.word	0x58020c00

0800107c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001080:	e7fe      	b.n	8001080 <NMI_Handler+0x4>

08001082 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001082:	b480      	push	{r7}
 8001084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001086:	e7fe      	b.n	8001086 <HardFault_Handler+0x4>

08001088 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800108c:	e7fe      	b.n	800108c <MemManage_Handler+0x4>

0800108e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800108e:	b480      	push	{r7}
 8001090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001092:	e7fe      	b.n	8001092 <BusFault_Handler+0x4>

08001094 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001098:	e7fe      	b.n	8001098 <UsageFault_Handler+0x4>

0800109a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800109a:	b480      	push	{r7}
 800109c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr

080010b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010b6:	b480      	push	{r7}
 80010b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010ba:	bf00      	nop
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010c8:	f000 f916 	bl	80012f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010cc:	bf00      	nop
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80010d4:	4b32      	ldr	r3, [pc, #200]	; (80011a0 <SystemInit+0xd0>)
 80010d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010da:	4a31      	ldr	r2, [pc, #196]	; (80011a0 <SystemInit+0xd0>)
 80010dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80010e4:	4b2f      	ldr	r3, [pc, #188]	; (80011a4 <SystemInit+0xd4>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f003 030f 	and.w	r3, r3, #15
 80010ec:	2b06      	cmp	r3, #6
 80010ee:	d807      	bhi.n	8001100 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80010f0:	4b2c      	ldr	r3, [pc, #176]	; (80011a4 <SystemInit+0xd4>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f023 030f 	bic.w	r3, r3, #15
 80010f8:	4a2a      	ldr	r2, [pc, #168]	; (80011a4 <SystemInit+0xd4>)
 80010fa:	f043 0307 	orr.w	r3, r3, #7
 80010fe:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001100:	4b29      	ldr	r3, [pc, #164]	; (80011a8 <SystemInit+0xd8>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a28      	ldr	r2, [pc, #160]	; (80011a8 <SystemInit+0xd8>)
 8001106:	f043 0301 	orr.w	r3, r3, #1
 800110a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800110c:	4b26      	ldr	r3, [pc, #152]	; (80011a8 <SystemInit+0xd8>)
 800110e:	2200      	movs	r2, #0
 8001110:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001112:	4b25      	ldr	r3, [pc, #148]	; (80011a8 <SystemInit+0xd8>)
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	4924      	ldr	r1, [pc, #144]	; (80011a8 <SystemInit+0xd8>)
 8001118:	4b24      	ldr	r3, [pc, #144]	; (80011ac <SystemInit+0xdc>)
 800111a:	4013      	ands	r3, r2
 800111c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800111e:	4b21      	ldr	r3, [pc, #132]	; (80011a4 <SystemInit+0xd4>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f003 0308 	and.w	r3, r3, #8
 8001126:	2b00      	cmp	r3, #0
 8001128:	d007      	beq.n	800113a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800112a:	4b1e      	ldr	r3, [pc, #120]	; (80011a4 <SystemInit+0xd4>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f023 030f 	bic.w	r3, r3, #15
 8001132:	4a1c      	ldr	r2, [pc, #112]	; (80011a4 <SystemInit+0xd4>)
 8001134:	f043 0307 	orr.w	r3, r3, #7
 8001138:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800113a:	4b1b      	ldr	r3, [pc, #108]	; (80011a8 <SystemInit+0xd8>)
 800113c:	2200      	movs	r2, #0
 800113e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001140:	4b19      	ldr	r3, [pc, #100]	; (80011a8 <SystemInit+0xd8>)
 8001142:	2200      	movs	r2, #0
 8001144:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001146:	4b18      	ldr	r3, [pc, #96]	; (80011a8 <SystemInit+0xd8>)
 8001148:	2200      	movs	r2, #0
 800114a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800114c:	4b16      	ldr	r3, [pc, #88]	; (80011a8 <SystemInit+0xd8>)
 800114e:	4a18      	ldr	r2, [pc, #96]	; (80011b0 <SystemInit+0xe0>)
 8001150:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001152:	4b15      	ldr	r3, [pc, #84]	; (80011a8 <SystemInit+0xd8>)
 8001154:	4a17      	ldr	r2, [pc, #92]	; (80011b4 <SystemInit+0xe4>)
 8001156:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001158:	4b13      	ldr	r3, [pc, #76]	; (80011a8 <SystemInit+0xd8>)
 800115a:	4a17      	ldr	r2, [pc, #92]	; (80011b8 <SystemInit+0xe8>)
 800115c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800115e:	4b12      	ldr	r3, [pc, #72]	; (80011a8 <SystemInit+0xd8>)
 8001160:	2200      	movs	r2, #0
 8001162:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001164:	4b10      	ldr	r3, [pc, #64]	; (80011a8 <SystemInit+0xd8>)
 8001166:	4a14      	ldr	r2, [pc, #80]	; (80011b8 <SystemInit+0xe8>)
 8001168:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800116a:	4b0f      	ldr	r3, [pc, #60]	; (80011a8 <SystemInit+0xd8>)
 800116c:	2200      	movs	r2, #0
 800116e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001170:	4b0d      	ldr	r3, [pc, #52]	; (80011a8 <SystemInit+0xd8>)
 8001172:	4a11      	ldr	r2, [pc, #68]	; (80011b8 <SystemInit+0xe8>)
 8001174:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001176:	4b0c      	ldr	r3, [pc, #48]	; (80011a8 <SystemInit+0xd8>)
 8001178:	2200      	movs	r2, #0
 800117a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800117c:	4b0a      	ldr	r3, [pc, #40]	; (80011a8 <SystemInit+0xd8>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a09      	ldr	r2, [pc, #36]	; (80011a8 <SystemInit+0xd8>)
 8001182:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001186:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001188:	4b07      	ldr	r3, [pc, #28]	; (80011a8 <SystemInit+0xd8>)
 800118a:	2200      	movs	r2, #0
 800118c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800118e:	4b0b      	ldr	r3, [pc, #44]	; (80011bc <SystemInit+0xec>)
 8001190:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001194:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001196:	bf00      	nop
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	e000ed00 	.word	0xe000ed00
 80011a4:	52002000 	.word	0x52002000
 80011a8:	58024400 	.word	0x58024400
 80011ac:	eaf6ed7f 	.word	0xeaf6ed7f
 80011b0:	02020200 	.word	0x02020200
 80011b4:	01ff0000 	.word	0x01ff0000
 80011b8:	01010280 	.word	0x01010280
 80011bc:	52004000 	.word	0x52004000

080011c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80011c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011f8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80011c4:	f7ff ff84 	bl	80010d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011c8:	480c      	ldr	r0, [pc, #48]	; (80011fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011ca:	490d      	ldr	r1, [pc, #52]	; (8001200 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011cc:	4a0d      	ldr	r2, [pc, #52]	; (8001204 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011d0:	e002      	b.n	80011d8 <LoopCopyDataInit>

080011d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011d6:	3304      	adds	r3, #4

080011d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011dc:	d3f9      	bcc.n	80011d2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011de:	4a0a      	ldr	r2, [pc, #40]	; (8001208 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011e0:	4c0a      	ldr	r4, [pc, #40]	; (800120c <LoopFillZerobss+0x22>)
  movs r3, #0
 80011e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011e4:	e001      	b.n	80011ea <LoopFillZerobss>

080011e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011e8:	3204      	adds	r2, #4

080011ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011ec:	d3fb      	bcc.n	80011e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011ee:	f005 fd23 	bl	8006c38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011f2:	f7ff fa0b 	bl	800060c <main>
  bx  lr
 80011f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011f8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80011fc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001200:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001204:	08006ce0 	.word	0x08006ce0
  ldr r2, =_sbss
 8001208:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 800120c:	240002dc 	.word	0x240002dc

08001210 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001210:	e7fe      	b.n	8001210 <ADC3_IRQHandler>
	...

08001214 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800121a:	2003      	movs	r0, #3
 800121c:	f000 f976 	bl	800150c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001220:	f002 fb8a 	bl	8003938 <HAL_RCC_GetSysClockFreq>
 8001224:	4602      	mov	r2, r0
 8001226:	4b15      	ldr	r3, [pc, #84]	; (800127c <HAL_Init+0x68>)
 8001228:	699b      	ldr	r3, [r3, #24]
 800122a:	0a1b      	lsrs	r3, r3, #8
 800122c:	f003 030f 	and.w	r3, r3, #15
 8001230:	4913      	ldr	r1, [pc, #76]	; (8001280 <HAL_Init+0x6c>)
 8001232:	5ccb      	ldrb	r3, [r1, r3]
 8001234:	f003 031f 	and.w	r3, r3, #31
 8001238:	fa22 f303 	lsr.w	r3, r2, r3
 800123c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800123e:	4b0f      	ldr	r3, [pc, #60]	; (800127c <HAL_Init+0x68>)
 8001240:	699b      	ldr	r3, [r3, #24]
 8001242:	f003 030f 	and.w	r3, r3, #15
 8001246:	4a0e      	ldr	r2, [pc, #56]	; (8001280 <HAL_Init+0x6c>)
 8001248:	5cd3      	ldrb	r3, [r2, r3]
 800124a:	f003 031f 	and.w	r3, r3, #31
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	fa22 f303 	lsr.w	r3, r2, r3
 8001254:	4a0b      	ldr	r2, [pc, #44]	; (8001284 <HAL_Init+0x70>)
 8001256:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001258:	4a0b      	ldr	r2, [pc, #44]	; (8001288 <HAL_Init+0x74>)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800125e:	2000      	movs	r0, #0
 8001260:	f000 f814 	bl	800128c <HAL_InitTick>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e002      	b.n	8001274 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800126e:	f7ff fd4b 	bl	8000d08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001272:	2300      	movs	r3, #0
}
 8001274:	4618      	mov	r0, r3
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	58024400 	.word	0x58024400
 8001280:	08006c98 	.word	0x08006c98
 8001284:	24000004 	.word	0x24000004
 8001288:	24000000 	.word	0x24000000

0800128c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001294:	4b15      	ldr	r3, [pc, #84]	; (80012ec <HAL_InitTick+0x60>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d101      	bne.n	80012a0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800129c:	2301      	movs	r3, #1
 800129e:	e021      	b.n	80012e4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80012a0:	4b13      	ldr	r3, [pc, #76]	; (80012f0 <HAL_InitTick+0x64>)
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	4b11      	ldr	r3, [pc, #68]	; (80012ec <HAL_InitTick+0x60>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	4619      	mov	r1, r3
 80012aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80012b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012b6:	4618      	mov	r0, r3
 80012b8:	f000 f94d 	bl	8001556 <HAL_SYSTICK_Config>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e00e      	b.n	80012e4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2b0f      	cmp	r3, #15
 80012ca:	d80a      	bhi.n	80012e2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012cc:	2200      	movs	r2, #0
 80012ce:	6879      	ldr	r1, [r7, #4]
 80012d0:	f04f 30ff 	mov.w	r0, #4294967295
 80012d4:	f000 f925 	bl	8001522 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012d8:	4a06      	ldr	r2, [pc, #24]	; (80012f4 <HAL_InitTick+0x68>)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012de:	2300      	movs	r3, #0
 80012e0:	e000      	b.n	80012e4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3708      	adds	r7, #8
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	2400000c 	.word	0x2400000c
 80012f0:	24000000 	.word	0x24000000
 80012f4:	24000008 	.word	0x24000008

080012f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012fc:	4b06      	ldr	r3, [pc, #24]	; (8001318 <HAL_IncTick+0x20>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	461a      	mov	r2, r3
 8001302:	4b06      	ldr	r3, [pc, #24]	; (800131c <HAL_IncTick+0x24>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4413      	add	r3, r2
 8001308:	4a04      	ldr	r2, [pc, #16]	; (800131c <HAL_IncTick+0x24>)
 800130a:	6013      	str	r3, [r2, #0]
}
 800130c:	bf00      	nop
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	2400000c 	.word	0x2400000c
 800131c:	240002d8 	.word	0x240002d8

08001320 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  return uwTick;
 8001324:	4b03      	ldr	r3, [pc, #12]	; (8001334 <HAL_GetTick+0x14>)
 8001326:	681b      	ldr	r3, [r3, #0]
}
 8001328:	4618      	mov	r0, r3
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	240002d8 	.word	0x240002d8

08001338 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001340:	f7ff ffee 	bl	8001320 <HAL_GetTick>
 8001344:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001350:	d005      	beq.n	800135e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001352:	4b0a      	ldr	r3, [pc, #40]	; (800137c <HAL_Delay+0x44>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	461a      	mov	r2, r3
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	4413      	add	r3, r2
 800135c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800135e:	bf00      	nop
 8001360:	f7ff ffde 	bl	8001320 <HAL_GetTick>
 8001364:	4602      	mov	r2, r0
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	68fa      	ldr	r2, [r7, #12]
 800136c:	429a      	cmp	r2, r3
 800136e:	d8f7      	bhi.n	8001360 <HAL_Delay+0x28>
  {
  }
}
 8001370:	bf00      	nop
 8001372:	bf00      	nop
 8001374:	3710      	adds	r7, #16
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	2400000c 	.word	0x2400000c

08001380 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001388:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001390:	4904      	ldr	r1, [pc, #16]	; (80013a4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4313      	orrs	r3, r2
 8001396:	604b      	str	r3, [r1, #4]
}
 8001398:	bf00      	nop
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr
 80013a4:	58000400 	.word	0x58000400

080013a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f003 0307 	and.w	r3, r3, #7
 80013b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013b8:	4b0b      	ldr	r3, [pc, #44]	; (80013e8 <__NVIC_SetPriorityGrouping+0x40>)
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013be:	68ba      	ldr	r2, [r7, #8]
 80013c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013c4:	4013      	ands	r3, r2
 80013c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80013d0:	4b06      	ldr	r3, [pc, #24]	; (80013ec <__NVIC_SetPriorityGrouping+0x44>)
 80013d2:	4313      	orrs	r3, r2
 80013d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013d6:	4a04      	ldr	r2, [pc, #16]	; (80013e8 <__NVIC_SetPriorityGrouping+0x40>)
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	60d3      	str	r3, [r2, #12]
}
 80013dc:	bf00      	nop
 80013de:	3714      	adds	r7, #20
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr
 80013e8:	e000ed00 	.word	0xe000ed00
 80013ec:	05fa0000 	.word	0x05fa0000

080013f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013f4:	4b04      	ldr	r3, [pc, #16]	; (8001408 <__NVIC_GetPriorityGrouping+0x18>)
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	0a1b      	lsrs	r3, r3, #8
 80013fa:	f003 0307 	and.w	r3, r3, #7
}
 80013fe:	4618      	mov	r0, r3
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	e000ed00 	.word	0xe000ed00

0800140c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	6039      	str	r1, [r7, #0]
 8001416:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001418:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800141c:	2b00      	cmp	r3, #0
 800141e:	db0a      	blt.n	8001436 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	b2da      	uxtb	r2, r3
 8001424:	490c      	ldr	r1, [pc, #48]	; (8001458 <__NVIC_SetPriority+0x4c>)
 8001426:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800142a:	0112      	lsls	r2, r2, #4
 800142c:	b2d2      	uxtb	r2, r2
 800142e:	440b      	add	r3, r1
 8001430:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001434:	e00a      	b.n	800144c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	b2da      	uxtb	r2, r3
 800143a:	4908      	ldr	r1, [pc, #32]	; (800145c <__NVIC_SetPriority+0x50>)
 800143c:	88fb      	ldrh	r3, [r7, #6]
 800143e:	f003 030f 	and.w	r3, r3, #15
 8001442:	3b04      	subs	r3, #4
 8001444:	0112      	lsls	r2, r2, #4
 8001446:	b2d2      	uxtb	r2, r2
 8001448:	440b      	add	r3, r1
 800144a:	761a      	strb	r2, [r3, #24]
}
 800144c:	bf00      	nop
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	e000e100 	.word	0xe000e100
 800145c:	e000ed00 	.word	0xe000ed00

08001460 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001460:	b480      	push	{r7}
 8001462:	b089      	sub	sp, #36	; 0x24
 8001464:	af00      	add	r7, sp, #0
 8001466:	60f8      	str	r0, [r7, #12]
 8001468:	60b9      	str	r1, [r7, #8]
 800146a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	f003 0307 	and.w	r3, r3, #7
 8001472:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	f1c3 0307 	rsb	r3, r3, #7
 800147a:	2b04      	cmp	r3, #4
 800147c:	bf28      	it	cs
 800147e:	2304      	movcs	r3, #4
 8001480:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	3304      	adds	r3, #4
 8001486:	2b06      	cmp	r3, #6
 8001488:	d902      	bls.n	8001490 <NVIC_EncodePriority+0x30>
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	3b03      	subs	r3, #3
 800148e:	e000      	b.n	8001492 <NVIC_EncodePriority+0x32>
 8001490:	2300      	movs	r3, #0
 8001492:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001494:	f04f 32ff 	mov.w	r2, #4294967295
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	43da      	mvns	r2, r3
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	401a      	ands	r2, r3
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014a8:	f04f 31ff 	mov.w	r1, #4294967295
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	fa01 f303 	lsl.w	r3, r1, r3
 80014b2:	43d9      	mvns	r1, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b8:	4313      	orrs	r3, r2
         );
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3724      	adds	r7, #36	; 0x24
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
	...

080014c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	3b01      	subs	r3, #1
 80014d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014d8:	d301      	bcc.n	80014de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014da:	2301      	movs	r3, #1
 80014dc:	e00f      	b.n	80014fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014de:	4a0a      	ldr	r2, [pc, #40]	; (8001508 <SysTick_Config+0x40>)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	3b01      	subs	r3, #1
 80014e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014e6:	210f      	movs	r1, #15
 80014e8:	f04f 30ff 	mov.w	r0, #4294967295
 80014ec:	f7ff ff8e 	bl	800140c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014f0:	4b05      	ldr	r3, [pc, #20]	; (8001508 <SysTick_Config+0x40>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014f6:	4b04      	ldr	r3, [pc, #16]	; (8001508 <SysTick_Config+0x40>)
 80014f8:	2207      	movs	r2, #7
 80014fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014fc:	2300      	movs	r3, #0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	e000e010 	.word	0xe000e010

0800150c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f7ff ff47 	bl	80013a8 <__NVIC_SetPriorityGrouping>
}
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b086      	sub	sp, #24
 8001526:	af00      	add	r7, sp, #0
 8001528:	4603      	mov	r3, r0
 800152a:	60b9      	str	r1, [r7, #8]
 800152c:	607a      	str	r2, [r7, #4]
 800152e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001530:	f7ff ff5e 	bl	80013f0 <__NVIC_GetPriorityGrouping>
 8001534:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	68b9      	ldr	r1, [r7, #8]
 800153a:	6978      	ldr	r0, [r7, #20]
 800153c:	f7ff ff90 	bl	8001460 <NVIC_EncodePriority>
 8001540:	4602      	mov	r2, r0
 8001542:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001546:	4611      	mov	r1, r2
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff ff5f 	bl	800140c <__NVIC_SetPriority>
}
 800154e:	bf00      	nop
 8001550:	3718      	adds	r7, #24
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b082      	sub	sp, #8
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f7ff ffb2 	bl	80014c8 <SysTick_Config>
 8001564:	4603      	mov	r3, r0
}
 8001566:	4618      	mov	r0, r3
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
	...

08001570 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d101      	bne.n	8001582 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e0e3      	b.n	800174a <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001588:	2b00      	cmp	r3, #0
 800158a:	d106      	bne.n	800159a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2223      	movs	r2, #35	; 0x23
 8001590:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f7ff fbd1 	bl	8000d3c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800159a:	4b6e      	ldr	r3, [pc, #440]	; (8001754 <HAL_ETH_Init+0x1e4>)
 800159c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80015a0:	4a6c      	ldr	r2, [pc, #432]	; (8001754 <HAL_ETH_Init+0x1e4>)
 80015a2:	f043 0302 	orr.w	r3, r3, #2
 80015a6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80015aa:	4b6a      	ldr	r3, [pc, #424]	; (8001754 <HAL_ETH_Init+0x1e4>)
 80015ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80015b0:	f003 0302 	and.w	r3, r3, #2
 80015b4:	60bb      	str	r3, [r7, #8]
 80015b6:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	7a1b      	ldrb	r3, [r3, #8]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d103      	bne.n	80015c8 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80015c0:	2000      	movs	r0, #0
 80015c2:	f7ff fedd 	bl	8001380 <HAL_SYSCFG_ETHInterfaceSelect>
 80015c6:	e003      	b.n	80015d0 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80015c8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80015cc:	f7ff fed8 	bl	8001380 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80015d0:	4b61      	ldr	r3, [pc, #388]	; (8001758 <HAL_ETH_Init+0x1e8>)
 80015d2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	6812      	ldr	r2, [r2, #0]
 80015e2:	f043 0301 	orr.w	r3, r3, #1
 80015e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80015ea:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015ec:	f7ff fe98 	bl	8001320 <HAL_GetTick>
 80015f0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80015f2:	e011      	b.n	8001618 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80015f4:	f7ff fe94 	bl	8001320 <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001602:	d909      	bls.n	8001618 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2204      	movs	r2, #4
 8001608:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	22e0      	movs	r2, #224	; 0xe0
 8001610:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	e098      	b.n	800174a <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	2b00      	cmp	r3, #0
 8001628:	d1e4      	bne.n	80015f4 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f000 f89e 	bl	800176c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001630:	f002 fafc 	bl	8003c2c <HAL_RCC_GetHCLKFreq>
 8001634:	4603      	mov	r3, r0
 8001636:	4a49      	ldr	r2, [pc, #292]	; (800175c <HAL_ETH_Init+0x1ec>)
 8001638:	fba2 2303 	umull	r2, r3, r2, r3
 800163c:	0c9a      	lsrs	r2, r3, #18
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	3a01      	subs	r2, #1
 8001644:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f000 fa81 	bl	8001b50 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001656:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800165a:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	6812      	ldr	r2, [r2, #0]
 8001662:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001666:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800166a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	695b      	ldr	r3, [r3, #20]
 8001672:	f003 0303 	and.w	r3, r3, #3
 8001676:	2b00      	cmp	r3, #0
 8001678:	d009      	beq.n	800168e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2201      	movs	r2, #1
 800167e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	22e0      	movs	r2, #224	; 0xe0
 8001686:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e05d      	b.n	800174a <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001696:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800169a:	4b31      	ldr	r3, [pc, #196]	; (8001760 <HAL_ETH_Init+0x1f0>)
 800169c:	4013      	ands	r3, r2
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	6952      	ldr	r2, [r2, #20]
 80016a2:	0051      	lsls	r1, r2, #1
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	6812      	ldr	r2, [r2, #0]
 80016a8:	430b      	orrs	r3, r1
 80016aa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016ae:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f000 fae9 	bl	8001c8a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f000 fb2f 	bl	8001d1c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	3305      	adds	r3, #5
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	021a      	lsls	r2, r3, #8
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	3304      	adds	r3, #4
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	4619      	mov	r1, r3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	430a      	orrs	r2, r1
 80016d8:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	3303      	adds	r3, #3
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	061a      	lsls	r2, r3, #24
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	3302      	adds	r3, #2
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	041b      	lsls	r3, r3, #16
 80016f0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	3301      	adds	r3, #1
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80016fc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800170a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800170c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f8d3 170c 	ldr.w	r1, [r3, #1804]	; 0x70c
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	4b11      	ldr	r3, [pc, #68]	; (8001764 <HAL_ETH_Init+0x1f4>)
 800171e:	430b      	orrs	r3, r1
 8001720:	f8c2 370c 	str.w	r3, [r2, #1804]	; 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f8d3 1710 	ldr.w	r1, [r3, #1808]	; 0x710
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	4b0d      	ldr	r3, [pc, #52]	; (8001768 <HAL_ETH_Init+0x1f8>)
 8001732:	430b      	orrs	r3, r1
 8001734:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2200      	movs	r2, #0
 800173c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2210      	movs	r2, #16
 8001744:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	58024400 	.word	0x58024400
 8001758:	58000400 	.word	0x58000400
 800175c:	431bde83 	.word	0x431bde83
 8001760:	ffff8001 	.word	0xffff8001
 8001764:	0c020060 	.word	0x0c020060
 8001768:	0c20c000 	.word	0x0c20c000

0800176c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800177c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001784:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001786:	f002 fa51 	bl	8003c2c <HAL_RCC_GetHCLKFreq>
 800178a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	4a1a      	ldr	r2, [pc, #104]	; (80017f8 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d804      	bhi.n	800179e <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	e022      	b.n	80017e4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	4a16      	ldr	r2, [pc, #88]	; (80017fc <HAL_ETH_SetMDIOClockRange+0x90>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d204      	bcs.n	80017b0 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	e019      	b.n	80017e4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	4a13      	ldr	r2, [pc, #76]	; (8001800 <HAL_ETH_SetMDIOClockRange+0x94>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d915      	bls.n	80017e4 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	4a12      	ldr	r2, [pc, #72]	; (8001804 <HAL_ETH_SetMDIOClockRange+0x98>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d804      	bhi.n	80017ca <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	e00c      	b.n	80017e4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	4a0e      	ldr	r2, [pc, #56]	; (8001808 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d804      	bhi.n	80017dc <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017d8:	60fb      	str	r3, [r7, #12]
 80017da:	e003      	b.n	80017e4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 80017e2:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	68fa      	ldr	r2, [r7, #12]
 80017ea:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80017ee:	bf00      	nop
 80017f0:	3710      	adds	r7, #16
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	02160ebf 	.word	0x02160ebf
 80017fc:	03938700 	.word	0x03938700
 8001800:	05f5e0ff 	.word	0x05f5e0ff
 8001804:	08f0d17f 	.word	0x08f0d17f
 8001808:	0ee6b27f 	.word	0x0ee6b27f

0800180c <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800181e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	791b      	ldrb	r3, [r3, #4]
 8001824:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8001826:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	7b1b      	ldrb	r3, [r3, #12]
 800182c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800182e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	7b5b      	ldrb	r3, [r3, #13]
 8001834:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001836:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	7b9b      	ldrb	r3, [r3, #14]
 800183c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800183e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	7bdb      	ldrb	r3, [r3, #15]
 8001844:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001846:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001848:	683a      	ldr	r2, [r7, #0]
 800184a:	7c12      	ldrb	r2, [r2, #16]
 800184c:	2a00      	cmp	r2, #0
 800184e:	d102      	bne.n	8001856 <ETH_SetMACConfig+0x4a>
 8001850:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001854:	e000      	b.n	8001858 <ETH_SetMACConfig+0x4c>
 8001856:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001858:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800185a:	683a      	ldr	r2, [r7, #0]
 800185c:	7c52      	ldrb	r2, [r2, #17]
 800185e:	2a00      	cmp	r2, #0
 8001860:	d102      	bne.n	8001868 <ETH_SetMACConfig+0x5c>
 8001862:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001866:	e000      	b.n	800186a <ETH_SetMACConfig+0x5e>
 8001868:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800186a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	7c9b      	ldrb	r3, [r3, #18]
 8001870:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001872:	431a      	orrs	r2, r3
               macconf->Speed |
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001878:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800187e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	7f1b      	ldrb	r3, [r3, #28]
 8001884:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8001886:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	7f5b      	ldrb	r3, [r3, #29]
 800188c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800188e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001890:	683a      	ldr	r2, [r7, #0]
 8001892:	7f92      	ldrb	r2, [r2, #30]
 8001894:	2a00      	cmp	r2, #0
 8001896:	d102      	bne.n	800189e <ETH_SetMACConfig+0x92>
 8001898:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800189c:	e000      	b.n	80018a0 <ETH_SetMACConfig+0x94>
 800189e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80018a0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	7fdb      	ldrb	r3, [r3, #31]
 80018a6:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80018a8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80018aa:	683a      	ldr	r2, [r7, #0]
 80018ac:	f892 2020 	ldrb.w	r2, [r2, #32]
 80018b0:	2a00      	cmp	r2, #0
 80018b2:	d102      	bne.n	80018ba <ETH_SetMACConfig+0xae>
 80018b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018b8:	e000      	b.n	80018bc <ETH_SetMACConfig+0xb0>
 80018ba:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80018bc:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80018c2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80018ca:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80018cc:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 80018d2:	4313      	orrs	r3, r2
 80018d4:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	4b56      	ldr	r3, [pc, #344]	; (8001a38 <ETH_SetMACConfig+0x22c>)
 80018de:	4013      	ands	r3, r2
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	6812      	ldr	r2, [r2, #0]
 80018e4:	68f9      	ldr	r1, [r7, #12]
 80018e6:	430b      	orrs	r3, r1
 80018e8:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018ee:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80018f6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80018f8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001900:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001902:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800190a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800190c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800190e:	683a      	ldr	r2, [r7, #0]
 8001910:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001914:	2a00      	cmp	r2, #0
 8001916:	d102      	bne.n	800191e <ETH_SetMACConfig+0x112>
 8001918:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800191c:	e000      	b.n	8001920 <ETH_SetMACConfig+0x114>
 800191e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001920:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001926:	4313      	orrs	r3, r2
 8001928:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	685a      	ldr	r2, [r3, #4]
 8001930:	4b42      	ldr	r3, [pc, #264]	; (8001a3c <ETH_SetMACConfig+0x230>)
 8001932:	4013      	ands	r3, r2
 8001934:	687a      	ldr	r2, [r7, #4]
 8001936:	6812      	ldr	r2, [r2, #0]
 8001938:	68f9      	ldr	r1, [r7, #12]
 800193a:	430b      	orrs	r3, r1
 800193c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001944:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800194a:	4313      	orrs	r3, r2
 800194c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	68da      	ldr	r2, [r3, #12]
 8001954:	4b3a      	ldr	r3, [pc, #232]	; (8001a40 <ETH_SetMACConfig+0x234>)
 8001956:	4013      	ands	r3, r2
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	6812      	ldr	r2, [r2, #0]
 800195c:	68f9      	ldr	r1, [r7, #12]
 800195e:	430b      	orrs	r3, r1
 8001960:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001968:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800196e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001970:	683a      	ldr	r2, [r7, #0]
 8001972:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001976:	2a00      	cmp	r2, #0
 8001978:	d101      	bne.n	800197e <ETH_SetMACConfig+0x172>
 800197a:	2280      	movs	r2, #128	; 0x80
 800197c:	e000      	b.n	8001980 <ETH_SetMACConfig+0x174>
 800197e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001980:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001986:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001988:	4313      	orrs	r3, r2
 800198a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001992:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8001996:	4013      	ands	r3, r2
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	6812      	ldr	r2, [r2, #0]
 800199c:	68f9      	ldr	r1, [r7, #12]
 800199e:	430b      	orrs	r3, r1
 80019a0:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80019a8:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80019b0:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80019b2:	4313      	orrs	r3, r2
 80019b4:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019be:	f023 0103 	bic.w	r1, r3, #3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	68fa      	ldr	r2, [r7, #12]
 80019c8:	430a      	orrs	r2, r1
 80019ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80019d6:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	430a      	orrs	r2, r1
 80019e4:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80019ec:	683a      	ldr	r2, [r7, #0]
 80019ee:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80019f2:	2a00      	cmp	r2, #0
 80019f4:	d101      	bne.n	80019fa <ETH_SetMACConfig+0x1ee>
 80019f6:	2240      	movs	r2, #64	; 0x40
 80019f8:	e000      	b.n	80019fc <ETH_SetMACConfig+0x1f0>
 80019fa:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80019fc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001a04:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001a06:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001a0e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001a10:	4313      	orrs	r3, r2
 8001a12:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001a1c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	68fa      	ldr	r2, [r7, #12]
 8001a26:	430a      	orrs	r2, r1
 8001a28:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001a2c:	bf00      	nop
 8001a2e:	3714      	adds	r7, #20
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr
 8001a38:	00048083 	.word	0x00048083
 8001a3c:	c0f88000 	.word	0xc0f88000
 8001a40:	fffffef0 	.word	0xfffffef0

08001a44 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	4b38      	ldr	r3, [pc, #224]	; (8001b3c <ETH_SetDMAConfig+0xf8>)
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	683a      	ldr	r2, [r7, #0]
 8001a5e:	6811      	ldr	r1, [r2, #0]
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	6812      	ldr	r2, [r2, #0]
 8001a64:	430b      	orrs	r3, r1
 8001a66:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a6a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	791b      	ldrb	r3, [r3, #4]
 8001a70:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001a76:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	7b1b      	ldrb	r3, [r3, #12]
 8001a7c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a8a:	685a      	ldr	r2, [r3, #4]
 8001a8c:	4b2c      	ldr	r3, [pc, #176]	; (8001b40 <ETH_SetDMAConfig+0xfc>)
 8001a8e:	4013      	ands	r3, r2
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	6812      	ldr	r2, [r2, #0]
 8001a94:	68f9      	ldr	r1, [r7, #12]
 8001a96:	430b      	orrs	r3, r1
 8001a98:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a9c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	7b5b      	ldrb	r3, [r3, #13]
 8001aa2:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ab4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8001ab8:	4b22      	ldr	r3, [pc, #136]	; (8001b44 <ETH_SetDMAConfig+0x100>)
 8001aba:	4013      	ands	r3, r2
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	6812      	ldr	r2, [r2, #0]
 8001ac0:	68f9      	ldr	r1, [r7, #12]
 8001ac2:	430b      	orrs	r3, r1
 8001ac4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ac8:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	7d1b      	ldrb	r3, [r3, #20]
 8001ad4:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001ad6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	7f5b      	ldrb	r3, [r3, #29]
 8001adc:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001aea:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8001aee:	4b16      	ldr	r3, [pc, #88]	; (8001b48 <ETH_SetDMAConfig+0x104>)
 8001af0:	4013      	ands	r3, r2
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	6812      	ldr	r2, [r2, #0]
 8001af6:	68f9      	ldr	r1, [r7, #12]
 8001af8:	430b      	orrs	r3, r1
 8001afa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001afe:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	7f1b      	ldrb	r3, [r3, #28]
 8001b06:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b18:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001b1c:	4b0b      	ldr	r3, [pc, #44]	; (8001b4c <ETH_SetDMAConfig+0x108>)
 8001b1e:	4013      	ands	r3, r2
 8001b20:	687a      	ldr	r2, [r7, #4]
 8001b22:	6812      	ldr	r2, [r2, #0]
 8001b24:	68f9      	ldr	r1, [r7, #12]
 8001b26:	430b      	orrs	r3, r1
 8001b28:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b2c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8001b30:	bf00      	nop
 8001b32:	3714      	adds	r7, #20
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr
 8001b3c:	ffff87fd 	.word	0xffff87fd
 8001b40:	ffff2ffe 	.word	0xffff2ffe
 8001b44:	fffec000 	.word	0xfffec000
 8001b48:	ffc0efef 	.word	0xffc0efef
 8001b4c:	7fc0ffff 	.word	0x7fc0ffff

08001b50 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b0a4      	sub	sp, #144	; 0x90
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001b62:	2300      	movs	r3, #0
 8001b64:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001b74:	2301      	movs	r3, #1
 8001b76:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001b80:	2300      	movs	r3, #0
 8001b82:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001b86:	2301      	movs	r3, #1
 8001b88:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001b8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b90:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001b92:	2300      	movs	r3, #0
 8001b94:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8001ba8:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001bac:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001be2:	2301      	movs	r3, #1
 8001be4:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001be8:	2320      	movs	r3, #32
 8001bea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001bfa:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001c00:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c04:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001c06:	2300      	movs	r3, #0
 8001c08:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001c12:	2300      	movs	r3, #0
 8001c14:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001c24:	2301      	movs	r3, #1
 8001c26:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001c34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c38:	4619      	mov	r1, r3
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f7ff fde6 	bl	800180c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001c40:	2301      	movs	r3, #1
 8001c42:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001c44:	2301      	movs	r3, #1
 8001c46:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001c52:	2300      	movs	r3, #0
 8001c54:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001c56:	2300      	movs	r3, #0
 8001c58:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001c5a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c5e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001c60:	2300      	movs	r3, #0
 8001c62:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001c64:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c68:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001c70:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001c74:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001c76:	f107 0308 	add.w	r3, r7, #8
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f7ff fee1 	bl	8001a44 <ETH_SetDMAConfig>
}
 8001c82:	bf00      	nop
 8001c84:	3790      	adds	r7, #144	; 0x90
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	b085      	sub	sp, #20
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001c92:	2300      	movs	r3, #0
 8001c94:	60fb      	str	r3, [r7, #12]
 8001c96:	e01d      	b.n	8001cd4 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	68d9      	ldr	r1, [r3, #12]
 8001c9c:	68fa      	ldr	r2, [r7, #12]
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	4413      	add	r3, r2
 8001ca4:	00db      	lsls	r3, r3, #3
 8001ca6:	440b      	add	r3, r1
 8001ca8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001cc2:	68b9      	ldr	r1, [r7, #8]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	68fa      	ldr	r2, [r7, #12]
 8001cc8:	3206      	adds	r2, #6
 8001cca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2b03      	cmp	r3, #3
 8001cd8:	d9de      	bls.n	8001c98 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ce8:	461a      	mov	r2, r3
 8001cea:	2303      	movs	r3, #3
 8001cec:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	68da      	ldr	r2, [r3, #12]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cfc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	68da      	ldr	r2, [r3, #12]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d0c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8001d10:	bf00      	nop
 8001d12:	3714      	adds	r7, #20
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b085      	sub	sp, #20
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001d24:	2300      	movs	r3, #0
 8001d26:	60fb      	str	r3, [r7, #12]
 8001d28:	e023      	b.n	8001d72 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6919      	ldr	r1, [r3, #16]
 8001d2e:	68fa      	ldr	r2, [r7, #12]
 8001d30:	4613      	mov	r3, r2
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	4413      	add	r3, r2
 8001d36:	00db      	lsls	r3, r3, #3
 8001d38:	440b      	add	r3, r1
 8001d3a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	2200      	movs	r2, #0
 8001d46:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	2200      	movs	r2, #0
 8001d52:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	2200      	movs	r2, #0
 8001d58:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001d60:	68b9      	ldr	r1, [r7, #8]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	68fa      	ldr	r2, [r7, #12]
 8001d66:	3212      	adds	r2, #18
 8001d68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	3301      	adds	r3, #1
 8001d70:	60fb      	str	r3, [r7, #12]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2b03      	cmp	r3, #3
 8001d76:	d9d8      	bls.n	8001d2a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d9e:	461a      	mov	r2, r3
 8001da0:	2303      	movs	r3, #3
 8001da2:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	691a      	ldr	r2, [r3, #16]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001db2:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	691b      	ldr	r3, [r3, #16]
 8001dba:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dc6:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8001dca:	bf00      	nop
 8001dcc:	3714      	adds	r7, #20
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
	...

08001dd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b089      	sub	sp, #36	; 0x24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001de2:	2300      	movs	r3, #0
 8001de4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001de6:	4b86      	ldr	r3, [pc, #536]	; (8002000 <HAL_GPIO_Init+0x228>)
 8001de8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001dea:	e18c      	b.n	8002106 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	2101      	movs	r1, #1
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	fa01 f303 	lsl.w	r3, r1, r3
 8001df8:	4013      	ands	r3, r2
 8001dfa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	f000 817e 	beq.w	8002100 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f003 0303 	and.w	r3, r3, #3
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d005      	beq.n	8001e1c <HAL_GPIO_Init+0x44>
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f003 0303 	and.w	r3, r3, #3
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d130      	bne.n	8001e7e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	2203      	movs	r2, #3
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	4013      	ands	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	68da      	ldr	r2, [r3, #12]
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e52:	2201      	movs	r2, #1
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5a:	43db      	mvns	r3, r3
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	4013      	ands	r3, r2
 8001e60:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	091b      	lsrs	r3, r3, #4
 8001e68:	f003 0201 	and.w	r2, r3, #1
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f003 0303 	and.w	r3, r3, #3
 8001e86:	2b03      	cmp	r3, #3
 8001e88:	d017      	beq.n	8001eba <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	2203      	movs	r2, #3
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	689a      	ldr	r2, [r3, #8]
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f003 0303 	and.w	r3, r3, #3
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d123      	bne.n	8001f0e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	08da      	lsrs	r2, r3, #3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	3208      	adds	r2, #8
 8001ece:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	f003 0307 	and.w	r3, r3, #7
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	220f      	movs	r2, #15
 8001ede:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee2:	43db      	mvns	r3, r3
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	691a      	ldr	r2, [r3, #16]
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	f003 0307 	and.w	r3, r3, #7
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	08da      	lsrs	r2, r3, #3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	3208      	adds	r2, #8
 8001f08:	69b9      	ldr	r1, [r7, #24]
 8001f0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	2203      	movs	r2, #3
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	43db      	mvns	r3, r3
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	4013      	ands	r3, r2
 8001f24:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f003 0203 	and.w	r2, r3, #3
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	fa02 f303 	lsl.w	r3, r2, r3
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	f000 80d8 	beq.w	8002100 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f50:	4b2c      	ldr	r3, [pc, #176]	; (8002004 <HAL_GPIO_Init+0x22c>)
 8001f52:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f56:	4a2b      	ldr	r2, [pc, #172]	; (8002004 <HAL_GPIO_Init+0x22c>)
 8001f58:	f043 0302 	orr.w	r3, r3, #2
 8001f5c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001f60:	4b28      	ldr	r3, [pc, #160]	; (8002004 <HAL_GPIO_Init+0x22c>)
 8001f62:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f6e:	4a26      	ldr	r2, [pc, #152]	; (8002008 <HAL_GPIO_Init+0x230>)
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	089b      	lsrs	r3, r3, #2
 8001f74:	3302      	adds	r3, #2
 8001f76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	f003 0303 	and.w	r3, r3, #3
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	220f      	movs	r2, #15
 8001f86:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8a:	43db      	mvns	r3, r3
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	4013      	ands	r3, r2
 8001f90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a1d      	ldr	r2, [pc, #116]	; (800200c <HAL_GPIO_Init+0x234>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d04a      	beq.n	8002030 <HAL_GPIO_Init+0x258>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a1c      	ldr	r2, [pc, #112]	; (8002010 <HAL_GPIO_Init+0x238>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d02b      	beq.n	8001ffa <HAL_GPIO_Init+0x222>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a1b      	ldr	r2, [pc, #108]	; (8002014 <HAL_GPIO_Init+0x23c>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d025      	beq.n	8001ff6 <HAL_GPIO_Init+0x21e>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a1a      	ldr	r2, [pc, #104]	; (8002018 <HAL_GPIO_Init+0x240>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d01f      	beq.n	8001ff2 <HAL_GPIO_Init+0x21a>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a19      	ldr	r2, [pc, #100]	; (800201c <HAL_GPIO_Init+0x244>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d019      	beq.n	8001fee <HAL_GPIO_Init+0x216>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a18      	ldr	r2, [pc, #96]	; (8002020 <HAL_GPIO_Init+0x248>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d013      	beq.n	8001fea <HAL_GPIO_Init+0x212>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a17      	ldr	r2, [pc, #92]	; (8002024 <HAL_GPIO_Init+0x24c>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d00d      	beq.n	8001fe6 <HAL_GPIO_Init+0x20e>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a16      	ldr	r2, [pc, #88]	; (8002028 <HAL_GPIO_Init+0x250>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d007      	beq.n	8001fe2 <HAL_GPIO_Init+0x20a>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a15      	ldr	r2, [pc, #84]	; (800202c <HAL_GPIO_Init+0x254>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d101      	bne.n	8001fde <HAL_GPIO_Init+0x206>
 8001fda:	2309      	movs	r3, #9
 8001fdc:	e029      	b.n	8002032 <HAL_GPIO_Init+0x25a>
 8001fde:	230a      	movs	r3, #10
 8001fe0:	e027      	b.n	8002032 <HAL_GPIO_Init+0x25a>
 8001fe2:	2307      	movs	r3, #7
 8001fe4:	e025      	b.n	8002032 <HAL_GPIO_Init+0x25a>
 8001fe6:	2306      	movs	r3, #6
 8001fe8:	e023      	b.n	8002032 <HAL_GPIO_Init+0x25a>
 8001fea:	2305      	movs	r3, #5
 8001fec:	e021      	b.n	8002032 <HAL_GPIO_Init+0x25a>
 8001fee:	2304      	movs	r3, #4
 8001ff0:	e01f      	b.n	8002032 <HAL_GPIO_Init+0x25a>
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e01d      	b.n	8002032 <HAL_GPIO_Init+0x25a>
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	e01b      	b.n	8002032 <HAL_GPIO_Init+0x25a>
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e019      	b.n	8002032 <HAL_GPIO_Init+0x25a>
 8001ffe:	bf00      	nop
 8002000:	58000080 	.word	0x58000080
 8002004:	58024400 	.word	0x58024400
 8002008:	58000400 	.word	0x58000400
 800200c:	58020000 	.word	0x58020000
 8002010:	58020400 	.word	0x58020400
 8002014:	58020800 	.word	0x58020800
 8002018:	58020c00 	.word	0x58020c00
 800201c:	58021000 	.word	0x58021000
 8002020:	58021400 	.word	0x58021400
 8002024:	58021800 	.word	0x58021800
 8002028:	58021c00 	.word	0x58021c00
 800202c:	58022400 	.word	0x58022400
 8002030:	2300      	movs	r3, #0
 8002032:	69fa      	ldr	r2, [r7, #28]
 8002034:	f002 0203 	and.w	r2, r2, #3
 8002038:	0092      	lsls	r2, r2, #2
 800203a:	4093      	lsls	r3, r2
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	4313      	orrs	r3, r2
 8002040:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002042:	4938      	ldr	r1, [pc, #224]	; (8002124 <HAL_GPIO_Init+0x34c>)
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	089b      	lsrs	r3, r3, #2
 8002048:	3302      	adds	r3, #2
 800204a:	69ba      	ldr	r2, [r7, #24]
 800204c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002050:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	43db      	mvns	r3, r3
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	4013      	ands	r3, r2
 8002060:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d003      	beq.n	8002076 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	4313      	orrs	r3, r2
 8002074:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002076:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800207a:	69bb      	ldr	r3, [r7, #24]
 800207c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800207e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	43db      	mvns	r3, r3
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	4013      	ands	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d003      	beq.n	80020a4 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80020a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	43db      	mvns	r3, r3
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	4013      	ands	r3, r2
 80020ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d003      	beq.n	80020d0 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	43db      	mvns	r3, r3
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	4013      	ands	r3, r2
 80020e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d003      	beq.n	80020fa <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	3301      	adds	r3, #1
 8002104:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	fa22 f303 	lsr.w	r3, r2, r3
 8002110:	2b00      	cmp	r3, #0
 8002112:	f47f ae6b 	bne.w	8001dec <HAL_GPIO_Init+0x14>
  }
}
 8002116:	bf00      	nop
 8002118:	bf00      	nop
 800211a:	3724      	adds	r7, #36	; 0x24
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr
 8002124:	58000400 	.word	0x58000400

08002128 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	460b      	mov	r3, r1
 8002132:	807b      	strh	r3, [r7, #2]
 8002134:	4613      	mov	r3, r2
 8002136:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002138:	787b      	ldrb	r3, [r7, #1]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d003      	beq.n	8002146 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800213e:	887a      	ldrh	r2, [r7, #2]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002144:	e003      	b.n	800214e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002146:	887b      	ldrh	r3, [r7, #2]
 8002148:	041a      	lsls	r2, r3, #16
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	619a      	str	r2, [r3, #24]
}
 800214e:	bf00      	nop
 8002150:	370c      	adds	r7, #12
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
	...

0800215c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d101      	bne.n	800216e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e08b      	b.n	8002286 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002174:	b2db      	uxtb	r3, r3
 8002176:	2b00      	cmp	r3, #0
 8002178:	d106      	bne.n	8002188 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f7fe fea8 	bl	8000ed8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2224      	movs	r2, #36	; 0x24
 800218c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f022 0201 	bic.w	r2, r2, #1
 800219e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685a      	ldr	r2, [r3, #4]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021ac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	689a      	ldr	r2, [r3, #8]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021bc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d107      	bne.n	80021d6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	689a      	ldr	r2, [r3, #8]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021d2:	609a      	str	r2, [r3, #8]
 80021d4:	e006      	b.n	80021e4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	689a      	ldr	r2, [r3, #8]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80021e2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d108      	bne.n	80021fe <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	685a      	ldr	r2, [r3, #4]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021fa:	605a      	str	r2, [r3, #4]
 80021fc:	e007      	b.n	800220e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	685a      	ldr	r2, [r3, #4]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800220c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	6859      	ldr	r1, [r3, #4]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	4b1d      	ldr	r3, [pc, #116]	; (8002290 <HAL_I2C_Init+0x134>)
 800221a:	430b      	orrs	r3, r1
 800221c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	68da      	ldr	r2, [r3, #12]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800222c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	691a      	ldr	r2, [r3, #16]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	695b      	ldr	r3, [r3, #20]
 8002236:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	699b      	ldr	r3, [r3, #24]
 800223e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	430a      	orrs	r2, r1
 8002246:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	69d9      	ldr	r1, [r3, #28]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a1a      	ldr	r2, [r3, #32]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	430a      	orrs	r2, r1
 8002256:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f042 0201 	orr.w	r2, r2, #1
 8002266:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2200      	movs	r2, #0
 800226c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2220      	movs	r2, #32
 8002272:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002284:	2300      	movs	r3, #0
}
 8002286:	4618      	mov	r0, r3
 8002288:	3708      	adds	r7, #8
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	02008000 	.word	0x02008000

08002294 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b088      	sub	sp, #32
 8002298:	af02      	add	r7, sp, #8
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	4608      	mov	r0, r1
 800229e:	4611      	mov	r1, r2
 80022a0:	461a      	mov	r2, r3
 80022a2:	4603      	mov	r3, r0
 80022a4:	817b      	strh	r3, [r7, #10]
 80022a6:	460b      	mov	r3, r1
 80022a8:	813b      	strh	r3, [r7, #8]
 80022aa:	4613      	mov	r3, r2
 80022ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b20      	cmp	r3, #32
 80022b8:	f040 80f9 	bne.w	80024ae <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80022bc:	6a3b      	ldr	r3, [r7, #32]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d002      	beq.n	80022c8 <HAL_I2C_Mem_Write+0x34>
 80022c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d105      	bne.n	80022d4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022ce:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e0ed      	b.n	80024b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d101      	bne.n	80022e2 <HAL_I2C_Mem_Write+0x4e>
 80022de:	2302      	movs	r3, #2
 80022e0:	e0e6      	b.n	80024b0 <HAL_I2C_Mem_Write+0x21c>
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2201      	movs	r2, #1
 80022e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80022ea:	f7ff f819 	bl	8001320 <HAL_GetTick>
 80022ee:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	9300      	str	r3, [sp, #0]
 80022f4:	2319      	movs	r3, #25
 80022f6:	2201      	movs	r2, #1
 80022f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80022fc:	68f8      	ldr	r0, [r7, #12]
 80022fe:	f000 fac3 	bl	8002888 <I2C_WaitOnFlagUntilTimeout>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e0d1      	b.n	80024b0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2221      	movs	r2, #33	; 0x21
 8002310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2240      	movs	r2, #64	; 0x40
 8002318:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2200      	movs	r2, #0
 8002320:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6a3a      	ldr	r2, [r7, #32]
 8002326:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800232c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2200      	movs	r2, #0
 8002332:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002334:	88f8      	ldrh	r0, [r7, #6]
 8002336:	893a      	ldrh	r2, [r7, #8]
 8002338:	8979      	ldrh	r1, [r7, #10]
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	9301      	str	r3, [sp, #4]
 800233e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002340:	9300      	str	r3, [sp, #0]
 8002342:	4603      	mov	r3, r0
 8002344:	68f8      	ldr	r0, [r7, #12]
 8002346:	f000 f9d3 	bl	80026f0 <I2C_RequestMemoryWrite>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d005      	beq.n	800235c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2200      	movs	r2, #0
 8002354:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e0a9      	b.n	80024b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002360:	b29b      	uxth	r3, r3
 8002362:	2bff      	cmp	r3, #255	; 0xff
 8002364:	d90e      	bls.n	8002384 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	22ff      	movs	r2, #255	; 0xff
 800236a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002370:	b2da      	uxtb	r2, r3
 8002372:	8979      	ldrh	r1, [r7, #10]
 8002374:	2300      	movs	r3, #0
 8002376:	9300      	str	r3, [sp, #0]
 8002378:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800237c:	68f8      	ldr	r0, [r7, #12]
 800237e:	f000 fc47 	bl	8002c10 <I2C_TransferConfig>
 8002382:	e00f      	b.n	80023a4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002388:	b29a      	uxth	r2, r3
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002392:	b2da      	uxtb	r2, r3
 8002394:	8979      	ldrh	r1, [r7, #10]
 8002396:	2300      	movs	r3, #0
 8002398:	9300      	str	r3, [sp, #0]
 800239a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800239e:	68f8      	ldr	r0, [r7, #12]
 80023a0:	f000 fc36 	bl	8002c10 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023a4:	697a      	ldr	r2, [r7, #20]
 80023a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023a8:	68f8      	ldr	r0, [r7, #12]
 80023aa:	f000 fac6 	bl	800293a <I2C_WaitOnTXISFlagUntilTimeout>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d001      	beq.n	80023b8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e07b      	b.n	80024b0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023bc:	781a      	ldrb	r2, [r3, #0]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c8:	1c5a      	adds	r2, r3, #1
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	3b01      	subs	r3, #1
 80023d6:	b29a      	uxth	r2, r3
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e0:	3b01      	subs	r3, #1
 80023e2:	b29a      	uxth	r2, r3
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d034      	beq.n	800245c <HAL_I2C_Mem_Write+0x1c8>
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d130      	bne.n	800245c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	9300      	str	r3, [sp, #0]
 80023fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002400:	2200      	movs	r2, #0
 8002402:	2180      	movs	r1, #128	; 0x80
 8002404:	68f8      	ldr	r0, [r7, #12]
 8002406:	f000 fa3f 	bl	8002888 <I2C_WaitOnFlagUntilTimeout>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d001      	beq.n	8002414 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e04d      	b.n	80024b0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002418:	b29b      	uxth	r3, r3
 800241a:	2bff      	cmp	r3, #255	; 0xff
 800241c:	d90e      	bls.n	800243c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	22ff      	movs	r2, #255	; 0xff
 8002422:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002428:	b2da      	uxtb	r2, r3
 800242a:	8979      	ldrh	r1, [r7, #10]
 800242c:	2300      	movs	r3, #0
 800242e:	9300      	str	r3, [sp, #0]
 8002430:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002434:	68f8      	ldr	r0, [r7, #12]
 8002436:	f000 fbeb 	bl	8002c10 <I2C_TransferConfig>
 800243a:	e00f      	b.n	800245c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002440:	b29a      	uxth	r2, r3
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800244a:	b2da      	uxtb	r2, r3
 800244c:	8979      	ldrh	r1, [r7, #10]
 800244e:	2300      	movs	r3, #0
 8002450:	9300      	str	r3, [sp, #0]
 8002452:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002456:	68f8      	ldr	r0, [r7, #12]
 8002458:	f000 fbda 	bl	8002c10 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002460:	b29b      	uxth	r3, r3
 8002462:	2b00      	cmp	r3, #0
 8002464:	d19e      	bne.n	80023a4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002466:	697a      	ldr	r2, [r7, #20]
 8002468:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800246a:	68f8      	ldr	r0, [r7, #12]
 800246c:	f000 faac 	bl	80029c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e01a      	b.n	80024b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2220      	movs	r2, #32
 8002480:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	6859      	ldr	r1, [r3, #4]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	4b0a      	ldr	r3, [pc, #40]	; (80024b8 <HAL_I2C_Mem_Write+0x224>)
 800248e:	400b      	ands	r3, r1
 8002490:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2220      	movs	r2, #32
 8002496:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2200      	movs	r2, #0
 800249e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80024aa:	2300      	movs	r3, #0
 80024ac:	e000      	b.n	80024b0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80024ae:	2302      	movs	r3, #2
  }
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3718      	adds	r7, #24
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	fe00e800 	.word	0xfe00e800

080024bc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b088      	sub	sp, #32
 80024c0:	af02      	add	r7, sp, #8
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	4608      	mov	r0, r1
 80024c6:	4611      	mov	r1, r2
 80024c8:	461a      	mov	r2, r3
 80024ca:	4603      	mov	r3, r0
 80024cc:	817b      	strh	r3, [r7, #10]
 80024ce:	460b      	mov	r3, r1
 80024d0:	813b      	strh	r3, [r7, #8]
 80024d2:	4613      	mov	r3, r2
 80024d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b20      	cmp	r3, #32
 80024e0:	f040 80fd 	bne.w	80026de <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80024e4:	6a3b      	ldr	r3, [r7, #32]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d002      	beq.n	80024f0 <HAL_I2C_Mem_Read+0x34>
 80024ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d105      	bne.n	80024fc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024f6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e0f1      	b.n	80026e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002502:	2b01      	cmp	r3, #1
 8002504:	d101      	bne.n	800250a <HAL_I2C_Mem_Read+0x4e>
 8002506:	2302      	movs	r3, #2
 8002508:	e0ea      	b.n	80026e0 <HAL_I2C_Mem_Read+0x224>
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2201      	movs	r2, #1
 800250e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002512:	f7fe ff05 	bl	8001320 <HAL_GetTick>
 8002516:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	9300      	str	r3, [sp, #0]
 800251c:	2319      	movs	r3, #25
 800251e:	2201      	movs	r2, #1
 8002520:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002524:	68f8      	ldr	r0, [r7, #12]
 8002526:	f000 f9af 	bl	8002888 <I2C_WaitOnFlagUntilTimeout>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d001      	beq.n	8002534 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e0d5      	b.n	80026e0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2222      	movs	r2, #34	; 0x22
 8002538:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2240      	movs	r2, #64	; 0x40
 8002540:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2200      	movs	r2, #0
 8002548:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6a3a      	ldr	r2, [r7, #32]
 800254e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002554:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2200      	movs	r2, #0
 800255a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800255c:	88f8      	ldrh	r0, [r7, #6]
 800255e:	893a      	ldrh	r2, [r7, #8]
 8002560:	8979      	ldrh	r1, [r7, #10]
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	9301      	str	r3, [sp, #4]
 8002566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002568:	9300      	str	r3, [sp, #0]
 800256a:	4603      	mov	r3, r0
 800256c:	68f8      	ldr	r0, [r7, #12]
 800256e:	f000 f913 	bl	8002798 <I2C_RequestMemoryRead>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d005      	beq.n	8002584 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2200      	movs	r2, #0
 800257c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e0ad      	b.n	80026e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002588:	b29b      	uxth	r3, r3
 800258a:	2bff      	cmp	r3, #255	; 0xff
 800258c:	d90e      	bls.n	80025ac <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	22ff      	movs	r2, #255	; 0xff
 8002592:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002598:	b2da      	uxtb	r2, r3
 800259a:	8979      	ldrh	r1, [r7, #10]
 800259c:	4b52      	ldr	r3, [pc, #328]	; (80026e8 <HAL_I2C_Mem_Read+0x22c>)
 800259e:	9300      	str	r3, [sp, #0]
 80025a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025a4:	68f8      	ldr	r0, [r7, #12]
 80025a6:	f000 fb33 	bl	8002c10 <I2C_TransferConfig>
 80025aa:	e00f      	b.n	80025cc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025b0:	b29a      	uxth	r2, r3
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ba:	b2da      	uxtb	r2, r3
 80025bc:	8979      	ldrh	r1, [r7, #10]
 80025be:	4b4a      	ldr	r3, [pc, #296]	; (80026e8 <HAL_I2C_Mem_Read+0x22c>)
 80025c0:	9300      	str	r3, [sp, #0]
 80025c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025c6:	68f8      	ldr	r0, [r7, #12]
 80025c8:	f000 fb22 	bl	8002c10 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	9300      	str	r3, [sp, #0]
 80025d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025d2:	2200      	movs	r2, #0
 80025d4:	2104      	movs	r1, #4
 80025d6:	68f8      	ldr	r0, [r7, #12]
 80025d8:	f000 f956 	bl	8002888 <I2C_WaitOnFlagUntilTimeout>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e07c      	b.n	80026e0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f0:	b2d2      	uxtb	r2, r2
 80025f2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f8:	1c5a      	adds	r2, r3, #1
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002602:	3b01      	subs	r3, #1
 8002604:	b29a      	uxth	r2, r3
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800260e:	b29b      	uxth	r3, r3
 8002610:	3b01      	subs	r3, #1
 8002612:	b29a      	uxth	r2, r3
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800261c:	b29b      	uxth	r3, r3
 800261e:	2b00      	cmp	r3, #0
 8002620:	d034      	beq.n	800268c <HAL_I2C_Mem_Read+0x1d0>
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002626:	2b00      	cmp	r3, #0
 8002628:	d130      	bne.n	800268c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	9300      	str	r3, [sp, #0]
 800262e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002630:	2200      	movs	r2, #0
 8002632:	2180      	movs	r1, #128	; 0x80
 8002634:	68f8      	ldr	r0, [r7, #12]
 8002636:	f000 f927 	bl	8002888 <I2C_WaitOnFlagUntilTimeout>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e04d      	b.n	80026e0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002648:	b29b      	uxth	r3, r3
 800264a:	2bff      	cmp	r3, #255	; 0xff
 800264c:	d90e      	bls.n	800266c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	22ff      	movs	r2, #255	; 0xff
 8002652:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002658:	b2da      	uxtb	r2, r3
 800265a:	8979      	ldrh	r1, [r7, #10]
 800265c:	2300      	movs	r3, #0
 800265e:	9300      	str	r3, [sp, #0]
 8002660:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002664:	68f8      	ldr	r0, [r7, #12]
 8002666:	f000 fad3 	bl	8002c10 <I2C_TransferConfig>
 800266a:	e00f      	b.n	800268c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002670:	b29a      	uxth	r2, r3
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800267a:	b2da      	uxtb	r2, r3
 800267c:	8979      	ldrh	r1, [r7, #10]
 800267e:	2300      	movs	r3, #0
 8002680:	9300      	str	r3, [sp, #0]
 8002682:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002686:	68f8      	ldr	r0, [r7, #12]
 8002688:	f000 fac2 	bl	8002c10 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002690:	b29b      	uxth	r3, r3
 8002692:	2b00      	cmp	r3, #0
 8002694:	d19a      	bne.n	80025cc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002696:	697a      	ldr	r2, [r7, #20]
 8002698:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800269a:	68f8      	ldr	r0, [r7, #12]
 800269c:	f000 f994 	bl	80029c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e01a      	b.n	80026e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2220      	movs	r2, #32
 80026b0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	6859      	ldr	r1, [r3, #4]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	4b0b      	ldr	r3, [pc, #44]	; (80026ec <HAL_I2C_Mem_Read+0x230>)
 80026be:	400b      	ands	r3, r1
 80026c0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2220      	movs	r2, #32
 80026c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026da:	2300      	movs	r3, #0
 80026dc:	e000      	b.n	80026e0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80026de:	2302      	movs	r3, #2
  }
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3718      	adds	r7, #24
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	80002400 	.word	0x80002400
 80026ec:	fe00e800 	.word	0xfe00e800

080026f0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b086      	sub	sp, #24
 80026f4:	af02      	add	r7, sp, #8
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	4608      	mov	r0, r1
 80026fa:	4611      	mov	r1, r2
 80026fc:	461a      	mov	r2, r3
 80026fe:	4603      	mov	r3, r0
 8002700:	817b      	strh	r3, [r7, #10]
 8002702:	460b      	mov	r3, r1
 8002704:	813b      	strh	r3, [r7, #8]
 8002706:	4613      	mov	r3, r2
 8002708:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800270a:	88fb      	ldrh	r3, [r7, #6]
 800270c:	b2da      	uxtb	r2, r3
 800270e:	8979      	ldrh	r1, [r7, #10]
 8002710:	4b20      	ldr	r3, [pc, #128]	; (8002794 <I2C_RequestMemoryWrite+0xa4>)
 8002712:	9300      	str	r3, [sp, #0]
 8002714:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002718:	68f8      	ldr	r0, [r7, #12]
 800271a:	f000 fa79 	bl	8002c10 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800271e:	69fa      	ldr	r2, [r7, #28]
 8002720:	69b9      	ldr	r1, [r7, #24]
 8002722:	68f8      	ldr	r0, [r7, #12]
 8002724:	f000 f909 	bl	800293a <I2C_WaitOnTXISFlagUntilTimeout>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e02c      	b.n	800278c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002732:	88fb      	ldrh	r3, [r7, #6]
 8002734:	2b01      	cmp	r3, #1
 8002736:	d105      	bne.n	8002744 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002738:	893b      	ldrh	r3, [r7, #8]
 800273a:	b2da      	uxtb	r2, r3
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	629a      	str	r2, [r3, #40]	; 0x28
 8002742:	e015      	b.n	8002770 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002744:	893b      	ldrh	r3, [r7, #8]
 8002746:	0a1b      	lsrs	r3, r3, #8
 8002748:	b29b      	uxth	r3, r3
 800274a:	b2da      	uxtb	r2, r3
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002752:	69fa      	ldr	r2, [r7, #28]
 8002754:	69b9      	ldr	r1, [r7, #24]
 8002756:	68f8      	ldr	r0, [r7, #12]
 8002758:	f000 f8ef 	bl	800293a <I2C_WaitOnTXISFlagUntilTimeout>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e012      	b.n	800278c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002766:	893b      	ldrh	r3, [r7, #8]
 8002768:	b2da      	uxtb	r2, r3
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	9300      	str	r3, [sp, #0]
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	2200      	movs	r2, #0
 8002778:	2180      	movs	r1, #128	; 0x80
 800277a:	68f8      	ldr	r0, [r7, #12]
 800277c:	f000 f884 	bl	8002888 <I2C_WaitOnFlagUntilTimeout>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e000      	b.n	800278c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800278a:	2300      	movs	r3, #0
}
 800278c:	4618      	mov	r0, r3
 800278e:	3710      	adds	r7, #16
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	80002000 	.word	0x80002000

08002798 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b086      	sub	sp, #24
 800279c:	af02      	add	r7, sp, #8
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	4608      	mov	r0, r1
 80027a2:	4611      	mov	r1, r2
 80027a4:	461a      	mov	r2, r3
 80027a6:	4603      	mov	r3, r0
 80027a8:	817b      	strh	r3, [r7, #10]
 80027aa:	460b      	mov	r3, r1
 80027ac:	813b      	strh	r3, [r7, #8]
 80027ae:	4613      	mov	r3, r2
 80027b0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80027b2:	88fb      	ldrh	r3, [r7, #6]
 80027b4:	b2da      	uxtb	r2, r3
 80027b6:	8979      	ldrh	r1, [r7, #10]
 80027b8:	4b20      	ldr	r3, [pc, #128]	; (800283c <I2C_RequestMemoryRead+0xa4>)
 80027ba:	9300      	str	r3, [sp, #0]
 80027bc:	2300      	movs	r3, #0
 80027be:	68f8      	ldr	r0, [r7, #12]
 80027c0:	f000 fa26 	bl	8002c10 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027c4:	69fa      	ldr	r2, [r7, #28]
 80027c6:	69b9      	ldr	r1, [r7, #24]
 80027c8:	68f8      	ldr	r0, [r7, #12]
 80027ca:	f000 f8b6 	bl	800293a <I2C_WaitOnTXISFlagUntilTimeout>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e02c      	b.n	8002832 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80027d8:	88fb      	ldrh	r3, [r7, #6]
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d105      	bne.n	80027ea <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80027de:	893b      	ldrh	r3, [r7, #8]
 80027e0:	b2da      	uxtb	r2, r3
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	629a      	str	r2, [r3, #40]	; 0x28
 80027e8:	e015      	b.n	8002816 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80027ea:	893b      	ldrh	r3, [r7, #8]
 80027ec:	0a1b      	lsrs	r3, r3, #8
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	b2da      	uxtb	r2, r3
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027f8:	69fa      	ldr	r2, [r7, #28]
 80027fa:	69b9      	ldr	r1, [r7, #24]
 80027fc:	68f8      	ldr	r0, [r7, #12]
 80027fe:	f000 f89c 	bl	800293a <I2C_WaitOnTXISFlagUntilTimeout>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d001      	beq.n	800280c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e012      	b.n	8002832 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800280c:	893b      	ldrh	r3, [r7, #8]
 800280e:	b2da      	uxtb	r2, r3
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	9300      	str	r3, [sp, #0]
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	2200      	movs	r2, #0
 800281e:	2140      	movs	r1, #64	; 0x40
 8002820:	68f8      	ldr	r0, [r7, #12]
 8002822:	f000 f831 	bl	8002888 <I2C_WaitOnFlagUntilTimeout>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e000      	b.n	8002832 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3710      	adds	r7, #16
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	80002000 	.word	0x80002000

08002840 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	2b02      	cmp	r3, #2
 8002854:	d103      	bne.n	800285e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2200      	movs	r2, #0
 800285c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	f003 0301 	and.w	r3, r3, #1
 8002868:	2b01      	cmp	r3, #1
 800286a:	d007      	beq.n	800287c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	699a      	ldr	r2, [r3, #24]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f042 0201 	orr.w	r2, r2, #1
 800287a:	619a      	str	r2, [r3, #24]
  }
}
 800287c:	bf00      	nop
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	603b      	str	r3, [r7, #0]
 8002894:	4613      	mov	r3, r2
 8002896:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002898:	e03b      	b.n	8002912 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	6839      	ldr	r1, [r7, #0]
 800289e:	68f8      	ldr	r0, [r7, #12]
 80028a0:	f000 f8d6 	bl	8002a50 <I2C_IsErrorOccurred>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e041      	b.n	8002932 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b4:	d02d      	beq.n	8002912 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028b6:	f7fe fd33 	bl	8001320 <HAL_GetTick>
 80028ba:	4602      	mov	r2, r0
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	683a      	ldr	r2, [r7, #0]
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d302      	bcc.n	80028cc <I2C_WaitOnFlagUntilTimeout+0x44>
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d122      	bne.n	8002912 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	699a      	ldr	r2, [r3, #24]
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	4013      	ands	r3, r2
 80028d6:	68ba      	ldr	r2, [r7, #8]
 80028d8:	429a      	cmp	r2, r3
 80028da:	bf0c      	ite	eq
 80028dc:	2301      	moveq	r3, #1
 80028de:	2300      	movne	r3, #0
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	461a      	mov	r2, r3
 80028e4:	79fb      	ldrb	r3, [r7, #7]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d113      	bne.n	8002912 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ee:	f043 0220 	orr.w	r2, r3, #32
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2220      	movs	r2, #32
 80028fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e00f      	b.n	8002932 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	699a      	ldr	r2, [r3, #24]
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	4013      	ands	r3, r2
 800291c:	68ba      	ldr	r2, [r7, #8]
 800291e:	429a      	cmp	r2, r3
 8002920:	bf0c      	ite	eq
 8002922:	2301      	moveq	r3, #1
 8002924:	2300      	movne	r3, #0
 8002926:	b2db      	uxtb	r3, r3
 8002928:	461a      	mov	r2, r3
 800292a:	79fb      	ldrb	r3, [r7, #7]
 800292c:	429a      	cmp	r2, r3
 800292e:	d0b4      	beq.n	800289a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002930:	2300      	movs	r3, #0
}
 8002932:	4618      	mov	r0, r3
 8002934:	3710      	adds	r7, #16
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}

0800293a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800293a:	b580      	push	{r7, lr}
 800293c:	b084      	sub	sp, #16
 800293e:	af00      	add	r7, sp, #0
 8002940:	60f8      	str	r0, [r7, #12]
 8002942:	60b9      	str	r1, [r7, #8]
 8002944:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002946:	e033      	b.n	80029b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	68b9      	ldr	r1, [r7, #8]
 800294c:	68f8      	ldr	r0, [r7, #12]
 800294e:	f000 f87f 	bl	8002a50 <I2C_IsErrorOccurred>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d001      	beq.n	800295c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e031      	b.n	80029c0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002962:	d025      	beq.n	80029b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002964:	f7fe fcdc 	bl	8001320 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	68ba      	ldr	r2, [r7, #8]
 8002970:	429a      	cmp	r2, r3
 8002972:	d302      	bcc.n	800297a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d11a      	bne.n	80029b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	699b      	ldr	r3, [r3, #24]
 8002980:	f003 0302 	and.w	r3, r3, #2
 8002984:	2b02      	cmp	r3, #2
 8002986:	d013      	beq.n	80029b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298c:	f043 0220 	orr.w	r2, r3, #32
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2220      	movs	r2, #32
 8002998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e007      	b.n	80029c0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d1c4      	bne.n	8002948 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3710      	adds	r7, #16
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029d4:	e02f      	b.n	8002a36 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	68b9      	ldr	r1, [r7, #8]
 80029da:	68f8      	ldr	r0, [r7, #12]
 80029dc:	f000 f838 	bl	8002a50 <I2C_IsErrorOccurred>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e02d      	b.n	8002a46 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029ea:	f7fe fc99 	bl	8001320 <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	68ba      	ldr	r2, [r7, #8]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d302      	bcc.n	8002a00 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d11a      	bne.n	8002a36 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	699b      	ldr	r3, [r3, #24]
 8002a06:	f003 0320 	and.w	r3, r3, #32
 8002a0a:	2b20      	cmp	r3, #32
 8002a0c:	d013      	beq.n	8002a36 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a12:	f043 0220 	orr.w	r2, r3, #32
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2220      	movs	r2, #32
 8002a1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e007      	b.n	8002a46 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	699b      	ldr	r3, [r3, #24]
 8002a3c:	f003 0320 	and.w	r3, r3, #32
 8002a40:	2b20      	cmp	r3, #32
 8002a42:	d1c8      	bne.n	80029d6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3710      	adds	r7, #16
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
	...

08002a50 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b08a      	sub	sp, #40	; 0x28
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	699b      	ldr	r3, [r3, #24]
 8002a68:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	f003 0310 	and.w	r3, r3, #16
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d068      	beq.n	8002b4e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2210      	movs	r2, #16
 8002a82:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002a84:	e049      	b.n	8002b1a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a8c:	d045      	beq.n	8002b1a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002a8e:	f7fe fc47 	bl	8001320 <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	68ba      	ldr	r2, [r7, #8]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d302      	bcc.n	8002aa4 <I2C_IsErrorOccurred+0x54>
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d13a      	bne.n	8002b1a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aae:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002ab6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	699b      	ldr	r3, [r3, #24]
 8002abe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ac2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ac6:	d121      	bne.n	8002b0c <I2C_IsErrorOccurred+0xbc>
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ace:	d01d      	beq.n	8002b0c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002ad0:	7cfb      	ldrb	r3, [r7, #19]
 8002ad2:	2b20      	cmp	r3, #32
 8002ad4:	d01a      	beq.n	8002b0c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	685a      	ldr	r2, [r3, #4]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ae4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002ae6:	f7fe fc1b 	bl	8001320 <HAL_GetTick>
 8002aea:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002aec:	e00e      	b.n	8002b0c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002aee:	f7fe fc17 	bl	8001320 <HAL_GetTick>
 8002af2:	4602      	mov	r2, r0
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	2b19      	cmp	r3, #25
 8002afa:	d907      	bls.n	8002b0c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002afc:	6a3b      	ldr	r3, [r7, #32]
 8002afe:	f043 0320 	orr.w	r3, r3, #32
 8002b02:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002b0a:	e006      	b.n	8002b1a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	699b      	ldr	r3, [r3, #24]
 8002b12:	f003 0320 	and.w	r3, r3, #32
 8002b16:	2b20      	cmp	r3, #32
 8002b18:	d1e9      	bne.n	8002aee <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	699b      	ldr	r3, [r3, #24]
 8002b20:	f003 0320 	and.w	r3, r3, #32
 8002b24:	2b20      	cmp	r3, #32
 8002b26:	d003      	beq.n	8002b30 <I2C_IsErrorOccurred+0xe0>
 8002b28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d0aa      	beq.n	8002a86 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002b30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d103      	bne.n	8002b40 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2220      	movs	r2, #32
 8002b3e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002b40:	6a3b      	ldr	r3, [r7, #32]
 8002b42:	f043 0304 	orr.w	r3, r3, #4
 8002b46:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	699b      	ldr	r3, [r3, #24]
 8002b54:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d00b      	beq.n	8002b78 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002b60:	6a3b      	ldr	r3, [r7, #32]
 8002b62:	f043 0301 	orr.w	r3, r3, #1
 8002b66:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b70:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d00b      	beq.n	8002b9a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002b82:	6a3b      	ldr	r3, [r7, #32]
 8002b84:	f043 0308 	orr.w	r3, r3, #8
 8002b88:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b92:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d00b      	beq.n	8002bbc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002ba4:	6a3b      	ldr	r3, [r7, #32]
 8002ba6:	f043 0302 	orr.w	r3, r3, #2
 8002baa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bb4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002bbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d01c      	beq.n	8002bfe <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002bc4:	68f8      	ldr	r0, [r7, #12]
 8002bc6:	f7ff fe3b 	bl	8002840 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	6859      	ldr	r1, [r3, #4]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	4b0d      	ldr	r3, [pc, #52]	; (8002c0c <I2C_IsErrorOccurred+0x1bc>)
 8002bd6:	400b      	ands	r3, r1
 8002bd8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002bde:	6a3b      	ldr	r3, [r7, #32]
 8002be0:	431a      	orrs	r2, r3
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2220      	movs	r2, #32
 8002bea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002bfe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3728      	adds	r7, #40	; 0x28
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	fe00e800 	.word	0xfe00e800

08002c10 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b087      	sub	sp, #28
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	607b      	str	r3, [r7, #4]
 8002c1a:	460b      	mov	r3, r1
 8002c1c:	817b      	strh	r3, [r7, #10]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c22:	897b      	ldrh	r3, [r7, #10]
 8002c24:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002c28:	7a7b      	ldrb	r3, [r7, #9]
 8002c2a:	041b      	lsls	r3, r3, #16
 8002c2c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c30:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c36:	6a3b      	ldr	r3, [r7, #32]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c3e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	685a      	ldr	r2, [r3, #4]
 8002c46:	6a3b      	ldr	r3, [r7, #32]
 8002c48:	0d5b      	lsrs	r3, r3, #21
 8002c4a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002c4e:	4b08      	ldr	r3, [pc, #32]	; (8002c70 <I2C_TransferConfig+0x60>)
 8002c50:	430b      	orrs	r3, r1
 8002c52:	43db      	mvns	r3, r3
 8002c54:	ea02 0103 	and.w	r1, r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	697a      	ldr	r2, [r7, #20]
 8002c5e:	430a      	orrs	r2, r1
 8002c60:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002c62:	bf00      	nop
 8002c64:	371c      	adds	r7, #28
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	03ff63ff 	.word	0x03ff63ff

08002c74 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2b20      	cmp	r3, #32
 8002c88:	d138      	bne.n	8002cfc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d101      	bne.n	8002c98 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002c94:	2302      	movs	r3, #2
 8002c96:	e032      	b.n	8002cfe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2224      	movs	r2, #36	; 0x24
 8002ca4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f022 0201 	bic.w	r2, r2, #1
 8002cb6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002cc6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	6819      	ldr	r1, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	683a      	ldr	r2, [r7, #0]
 8002cd4:	430a      	orrs	r2, r1
 8002cd6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f042 0201 	orr.w	r2, r2, #1
 8002ce6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2220      	movs	r2, #32
 8002cec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	e000      	b.n	8002cfe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002cfc:	2302      	movs	r3, #2
  }
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	370c      	adds	r7, #12
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr

08002d0a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	b085      	sub	sp, #20
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
 8002d12:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	2b20      	cmp	r3, #32
 8002d1e:	d139      	bne.n	8002d94 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d101      	bne.n	8002d2e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002d2a:	2302      	movs	r3, #2
 8002d2c:	e033      	b.n	8002d96 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2201      	movs	r2, #1
 8002d32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2224      	movs	r2, #36	; 0x24
 8002d3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f022 0201 	bic.w	r2, r2, #1
 8002d4c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002d5c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	021b      	lsls	r3, r3, #8
 8002d62:	68fa      	ldr	r2, [r7, #12]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	68fa      	ldr	r2, [r7, #12]
 8002d6e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f042 0201 	orr.w	r2, r2, #1
 8002d7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2220      	movs	r2, #32
 8002d84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d90:	2300      	movs	r3, #0
 8002d92:	e000      	b.n	8002d96 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002d94:	2302      	movs	r3, #2
  }
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3714      	adds	r7, #20
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
	...

08002da4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002dac:	4b19      	ldr	r3, [pc, #100]	; (8002e14 <HAL_PWREx_ConfigSupply+0x70>)
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	f003 0304 	and.w	r3, r3, #4
 8002db4:	2b04      	cmp	r3, #4
 8002db6:	d00a      	beq.n	8002dce <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002db8:	4b16      	ldr	r3, [pc, #88]	; (8002e14 <HAL_PWREx_ConfigSupply+0x70>)
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	f003 0307 	and.w	r3, r3, #7
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d001      	beq.n	8002dca <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e01f      	b.n	8002e0a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	e01d      	b.n	8002e0a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002dce:	4b11      	ldr	r3, [pc, #68]	; (8002e14 <HAL_PWREx_ConfigSupply+0x70>)
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	f023 0207 	bic.w	r2, r3, #7
 8002dd6:	490f      	ldr	r1, [pc, #60]	; (8002e14 <HAL_PWREx_ConfigSupply+0x70>)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002dde:	f7fe fa9f 	bl	8001320 <HAL_GetTick>
 8002de2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002de4:	e009      	b.n	8002dfa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002de6:	f7fe fa9b 	bl	8001320 <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002df4:	d901      	bls.n	8002dfa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e007      	b.n	8002e0a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002dfa:	4b06      	ldr	r3, [pc, #24]	; (8002e14 <HAL_PWREx_ConfigSupply+0x70>)
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e06:	d1ee      	bne.n	8002de6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3710      	adds	r7, #16
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	58024800 	.word	0x58024800

08002e18 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b08c      	sub	sp, #48	; 0x30
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d101      	bne.n	8002e2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e3c8      	b.n	80035bc <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	f000 8087 	beq.w	8002f46 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e38:	4b88      	ldr	r3, [pc, #544]	; (800305c <HAL_RCC_OscConfig+0x244>)
 8002e3a:	691b      	ldr	r3, [r3, #16]
 8002e3c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e40:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002e42:	4b86      	ldr	r3, [pc, #536]	; (800305c <HAL_RCC_OscConfig+0x244>)
 8002e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e46:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e4a:	2b10      	cmp	r3, #16
 8002e4c:	d007      	beq.n	8002e5e <HAL_RCC_OscConfig+0x46>
 8002e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e50:	2b18      	cmp	r3, #24
 8002e52:	d110      	bne.n	8002e76 <HAL_RCC_OscConfig+0x5e>
 8002e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e56:	f003 0303 	and.w	r3, r3, #3
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d10b      	bne.n	8002e76 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e5e:	4b7f      	ldr	r3, [pc, #508]	; (800305c <HAL_RCC_OscConfig+0x244>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d06c      	beq.n	8002f44 <HAL_RCC_OscConfig+0x12c>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d168      	bne.n	8002f44 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e3a2      	b.n	80035bc <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e7e:	d106      	bne.n	8002e8e <HAL_RCC_OscConfig+0x76>
 8002e80:	4b76      	ldr	r3, [pc, #472]	; (800305c <HAL_RCC_OscConfig+0x244>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a75      	ldr	r2, [pc, #468]	; (800305c <HAL_RCC_OscConfig+0x244>)
 8002e86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e8a:	6013      	str	r3, [r2, #0]
 8002e8c:	e02e      	b.n	8002eec <HAL_RCC_OscConfig+0xd4>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d10c      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x98>
 8002e96:	4b71      	ldr	r3, [pc, #452]	; (800305c <HAL_RCC_OscConfig+0x244>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a70      	ldr	r2, [pc, #448]	; (800305c <HAL_RCC_OscConfig+0x244>)
 8002e9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ea0:	6013      	str	r3, [r2, #0]
 8002ea2:	4b6e      	ldr	r3, [pc, #440]	; (800305c <HAL_RCC_OscConfig+0x244>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a6d      	ldr	r2, [pc, #436]	; (800305c <HAL_RCC_OscConfig+0x244>)
 8002ea8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002eac:	6013      	str	r3, [r2, #0]
 8002eae:	e01d      	b.n	8002eec <HAL_RCC_OscConfig+0xd4>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002eb8:	d10c      	bne.n	8002ed4 <HAL_RCC_OscConfig+0xbc>
 8002eba:	4b68      	ldr	r3, [pc, #416]	; (800305c <HAL_RCC_OscConfig+0x244>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a67      	ldr	r2, [pc, #412]	; (800305c <HAL_RCC_OscConfig+0x244>)
 8002ec0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ec4:	6013      	str	r3, [r2, #0]
 8002ec6:	4b65      	ldr	r3, [pc, #404]	; (800305c <HAL_RCC_OscConfig+0x244>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a64      	ldr	r2, [pc, #400]	; (800305c <HAL_RCC_OscConfig+0x244>)
 8002ecc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ed0:	6013      	str	r3, [r2, #0]
 8002ed2:	e00b      	b.n	8002eec <HAL_RCC_OscConfig+0xd4>
 8002ed4:	4b61      	ldr	r3, [pc, #388]	; (800305c <HAL_RCC_OscConfig+0x244>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a60      	ldr	r2, [pc, #384]	; (800305c <HAL_RCC_OscConfig+0x244>)
 8002eda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ede:	6013      	str	r3, [r2, #0]
 8002ee0:	4b5e      	ldr	r3, [pc, #376]	; (800305c <HAL_RCC_OscConfig+0x244>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a5d      	ldr	r2, [pc, #372]	; (800305c <HAL_RCC_OscConfig+0x244>)
 8002ee6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002eea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d013      	beq.n	8002f1c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef4:	f7fe fa14 	bl	8001320 <HAL_GetTick>
 8002ef8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002efa:	e008      	b.n	8002f0e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002efc:	f7fe fa10 	bl	8001320 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b64      	cmp	r3, #100	; 0x64
 8002f08:	d901      	bls.n	8002f0e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e356      	b.n	80035bc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f0e:	4b53      	ldr	r3, [pc, #332]	; (800305c <HAL_RCC_OscConfig+0x244>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d0f0      	beq.n	8002efc <HAL_RCC_OscConfig+0xe4>
 8002f1a:	e014      	b.n	8002f46 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f1c:	f7fe fa00 	bl	8001320 <HAL_GetTick>
 8002f20:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002f22:	e008      	b.n	8002f36 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f24:	f7fe f9fc 	bl	8001320 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b64      	cmp	r3, #100	; 0x64
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e342      	b.n	80035bc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002f36:	4b49      	ldr	r3, [pc, #292]	; (800305c <HAL_RCC_OscConfig+0x244>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1f0      	bne.n	8002f24 <HAL_RCC_OscConfig+0x10c>
 8002f42:	e000      	b.n	8002f46 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	f000 808c 	beq.w	800306c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f54:	4b41      	ldr	r3, [pc, #260]	; (800305c <HAL_RCC_OscConfig+0x244>)
 8002f56:	691b      	ldr	r3, [r3, #16]
 8002f58:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f5c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002f5e:	4b3f      	ldr	r3, [pc, #252]	; (800305c <HAL_RCC_OscConfig+0x244>)
 8002f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f62:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002f64:	6a3b      	ldr	r3, [r7, #32]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d007      	beq.n	8002f7a <HAL_RCC_OscConfig+0x162>
 8002f6a:	6a3b      	ldr	r3, [r7, #32]
 8002f6c:	2b18      	cmp	r3, #24
 8002f6e:	d137      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x1c8>
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	f003 0303 	and.w	r3, r3, #3
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d132      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f7a:	4b38      	ldr	r3, [pc, #224]	; (800305c <HAL_RCC_OscConfig+0x244>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0304 	and.w	r3, r3, #4
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d005      	beq.n	8002f92 <HAL_RCC_OscConfig+0x17a>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d101      	bne.n	8002f92 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e314      	b.n	80035bc <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002f92:	4b32      	ldr	r3, [pc, #200]	; (800305c <HAL_RCC_OscConfig+0x244>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f023 0219 	bic.w	r2, r3, #25
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	492f      	ldr	r1, [pc, #188]	; (800305c <HAL_RCC_OscConfig+0x244>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa4:	f7fe f9bc 	bl	8001320 <HAL_GetTick>
 8002fa8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002faa:	e008      	b.n	8002fbe <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fac:	f7fe f9b8 	bl	8001320 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e2fe      	b.n	80035bc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002fbe:	4b27      	ldr	r3, [pc, #156]	; (800305c <HAL_RCC_OscConfig+0x244>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0304 	and.w	r3, r3, #4
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d0f0      	beq.n	8002fac <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fca:	4b24      	ldr	r3, [pc, #144]	; (800305c <HAL_RCC_OscConfig+0x244>)
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	061b      	lsls	r3, r3, #24
 8002fd8:	4920      	ldr	r1, [pc, #128]	; (800305c <HAL_RCC_OscConfig+0x244>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fde:	e045      	b.n	800306c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d026      	beq.n	8003036 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002fe8:	4b1c      	ldr	r3, [pc, #112]	; (800305c <HAL_RCC_OscConfig+0x244>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f023 0219 	bic.w	r2, r3, #25
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	4919      	ldr	r1, [pc, #100]	; (800305c <HAL_RCC_OscConfig+0x244>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ffa:	f7fe f991 	bl	8001320 <HAL_GetTick>
 8002ffe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003000:	e008      	b.n	8003014 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003002:	f7fe f98d 	bl	8001320 <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	2b02      	cmp	r3, #2
 800300e:	d901      	bls.n	8003014 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e2d3      	b.n	80035bc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003014:	4b11      	ldr	r3, [pc, #68]	; (800305c <HAL_RCC_OscConfig+0x244>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0304 	and.w	r3, r3, #4
 800301c:	2b00      	cmp	r3, #0
 800301e:	d0f0      	beq.n	8003002 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003020:	4b0e      	ldr	r3, [pc, #56]	; (800305c <HAL_RCC_OscConfig+0x244>)
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	691b      	ldr	r3, [r3, #16]
 800302c:	061b      	lsls	r3, r3, #24
 800302e:	490b      	ldr	r1, [pc, #44]	; (800305c <HAL_RCC_OscConfig+0x244>)
 8003030:	4313      	orrs	r3, r2
 8003032:	604b      	str	r3, [r1, #4]
 8003034:	e01a      	b.n	800306c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003036:	4b09      	ldr	r3, [pc, #36]	; (800305c <HAL_RCC_OscConfig+0x244>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a08      	ldr	r2, [pc, #32]	; (800305c <HAL_RCC_OscConfig+0x244>)
 800303c:	f023 0301 	bic.w	r3, r3, #1
 8003040:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003042:	f7fe f96d 	bl	8001320 <HAL_GetTick>
 8003046:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003048:	e00a      	b.n	8003060 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800304a:	f7fe f969 	bl	8001320 <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	2b02      	cmp	r3, #2
 8003056:	d903      	bls.n	8003060 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e2af      	b.n	80035bc <HAL_RCC_OscConfig+0x7a4>
 800305c:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003060:	4b96      	ldr	r3, [pc, #600]	; (80032bc <HAL_RCC_OscConfig+0x4a4>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0304 	and.w	r3, r3, #4
 8003068:	2b00      	cmp	r3, #0
 800306a:	d1ee      	bne.n	800304a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0310 	and.w	r3, r3, #16
 8003074:	2b00      	cmp	r3, #0
 8003076:	d06a      	beq.n	800314e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003078:	4b90      	ldr	r3, [pc, #576]	; (80032bc <HAL_RCC_OscConfig+0x4a4>)
 800307a:	691b      	ldr	r3, [r3, #16]
 800307c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003080:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003082:	4b8e      	ldr	r3, [pc, #568]	; (80032bc <HAL_RCC_OscConfig+0x4a4>)
 8003084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003086:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003088:	69bb      	ldr	r3, [r7, #24]
 800308a:	2b08      	cmp	r3, #8
 800308c:	d007      	beq.n	800309e <HAL_RCC_OscConfig+0x286>
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	2b18      	cmp	r3, #24
 8003092:	d11b      	bne.n	80030cc <HAL_RCC_OscConfig+0x2b4>
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	f003 0303 	and.w	r3, r3, #3
 800309a:	2b01      	cmp	r3, #1
 800309c:	d116      	bne.n	80030cc <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800309e:	4b87      	ldr	r3, [pc, #540]	; (80032bc <HAL_RCC_OscConfig+0x4a4>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d005      	beq.n	80030b6 <HAL_RCC_OscConfig+0x29e>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	69db      	ldr	r3, [r3, #28]
 80030ae:	2b80      	cmp	r3, #128	; 0x80
 80030b0:	d001      	beq.n	80030b6 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e282      	b.n	80035bc <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80030b6:	4b81      	ldr	r3, [pc, #516]	; (80032bc <HAL_RCC_OscConfig+0x4a4>)
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a1b      	ldr	r3, [r3, #32]
 80030c2:	061b      	lsls	r3, r3, #24
 80030c4:	497d      	ldr	r1, [pc, #500]	; (80032bc <HAL_RCC_OscConfig+0x4a4>)
 80030c6:	4313      	orrs	r3, r2
 80030c8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80030ca:	e040      	b.n	800314e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	69db      	ldr	r3, [r3, #28]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d023      	beq.n	800311c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80030d4:	4b79      	ldr	r3, [pc, #484]	; (80032bc <HAL_RCC_OscConfig+0x4a4>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a78      	ldr	r2, [pc, #480]	; (80032bc <HAL_RCC_OscConfig+0x4a4>)
 80030da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e0:	f7fe f91e 	bl	8001320 <HAL_GetTick>
 80030e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80030e6:	e008      	b.n	80030fa <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80030e8:	f7fe f91a 	bl	8001320 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e260      	b.n	80035bc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80030fa:	4b70      	ldr	r3, [pc, #448]	; (80032bc <HAL_RCC_OscConfig+0x4a4>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003102:	2b00      	cmp	r3, #0
 8003104:	d0f0      	beq.n	80030e8 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003106:	4b6d      	ldr	r3, [pc, #436]	; (80032bc <HAL_RCC_OscConfig+0x4a4>)
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a1b      	ldr	r3, [r3, #32]
 8003112:	061b      	lsls	r3, r3, #24
 8003114:	4969      	ldr	r1, [pc, #420]	; (80032bc <HAL_RCC_OscConfig+0x4a4>)
 8003116:	4313      	orrs	r3, r2
 8003118:	60cb      	str	r3, [r1, #12]
 800311a:	e018      	b.n	800314e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800311c:	4b67      	ldr	r3, [pc, #412]	; (80032bc <HAL_RCC_OscConfig+0x4a4>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a66      	ldr	r2, [pc, #408]	; (80032bc <HAL_RCC_OscConfig+0x4a4>)
 8003122:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003126:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003128:	f7fe f8fa 	bl	8001320 <HAL_GetTick>
 800312c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800312e:	e008      	b.n	8003142 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003130:	f7fe f8f6 	bl	8001320 <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	2b02      	cmp	r3, #2
 800313c:	d901      	bls.n	8003142 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e23c      	b.n	80035bc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003142:	4b5e      	ldr	r3, [pc, #376]	; (80032bc <HAL_RCC_OscConfig+0x4a4>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800314a:	2b00      	cmp	r3, #0
 800314c:	d1f0      	bne.n	8003130 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0308 	and.w	r3, r3, #8
 8003156:	2b00      	cmp	r3, #0
 8003158:	d036      	beq.n	80031c8 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	695b      	ldr	r3, [r3, #20]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d019      	beq.n	8003196 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003162:	4b56      	ldr	r3, [pc, #344]	; (80032bc <HAL_RCC_OscConfig+0x4a4>)
 8003164:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003166:	4a55      	ldr	r2, [pc, #340]	; (80032bc <HAL_RCC_OscConfig+0x4a4>)
 8003168:	f043 0301 	orr.w	r3, r3, #1
 800316c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800316e:	f7fe f8d7 	bl	8001320 <HAL_GetTick>
 8003172:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003174:	e008      	b.n	8003188 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003176:	f7fe f8d3 	bl	8001320 <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	2b02      	cmp	r3, #2
 8003182:	d901      	bls.n	8003188 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8003184:	2303      	movs	r3, #3
 8003186:	e219      	b.n	80035bc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003188:	4b4c      	ldr	r3, [pc, #304]	; (80032bc <HAL_RCC_OscConfig+0x4a4>)
 800318a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800318c:	f003 0302 	and.w	r3, r3, #2
 8003190:	2b00      	cmp	r3, #0
 8003192:	d0f0      	beq.n	8003176 <HAL_RCC_OscConfig+0x35e>
 8003194:	e018      	b.n	80031c8 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003196:	4b49      	ldr	r3, [pc, #292]	; (80032bc <HAL_RCC_OscConfig+0x4a4>)
 8003198:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800319a:	4a48      	ldr	r2, [pc, #288]	; (80032bc <HAL_RCC_OscConfig+0x4a4>)
 800319c:	f023 0301 	bic.w	r3, r3, #1
 80031a0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031a2:	f7fe f8bd 	bl	8001320 <HAL_GetTick>
 80031a6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80031a8:	e008      	b.n	80031bc <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031aa:	f7fe f8b9 	bl	8001320 <HAL_GetTick>
 80031ae:	4602      	mov	r2, r0
 80031b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d901      	bls.n	80031bc <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e1ff      	b.n	80035bc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80031bc:	4b3f      	ldr	r3, [pc, #252]	; (80032bc <HAL_RCC_OscConfig+0x4a4>)
 80031be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031c0:	f003 0302 	and.w	r3, r3, #2
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d1f0      	bne.n	80031aa <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0320 	and.w	r3, r3, #32
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d036      	beq.n	8003242 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	699b      	ldr	r3, [r3, #24]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d019      	beq.n	8003210 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80031dc:	4b37      	ldr	r3, [pc, #220]	; (80032bc <HAL_RCC_OscConfig+0x4a4>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a36      	ldr	r2, [pc, #216]	; (80032bc <HAL_RCC_OscConfig+0x4a4>)
 80031e2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80031e6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80031e8:	f7fe f89a 	bl	8001320 <HAL_GetTick>
 80031ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80031ee:	e008      	b.n	8003202 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031f0:	f7fe f896 	bl	8001320 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e1dc      	b.n	80035bc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003202:	4b2e      	ldr	r3, [pc, #184]	; (80032bc <HAL_RCC_OscConfig+0x4a4>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d0f0      	beq.n	80031f0 <HAL_RCC_OscConfig+0x3d8>
 800320e:	e018      	b.n	8003242 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003210:	4b2a      	ldr	r3, [pc, #168]	; (80032bc <HAL_RCC_OscConfig+0x4a4>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a29      	ldr	r2, [pc, #164]	; (80032bc <HAL_RCC_OscConfig+0x4a4>)
 8003216:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800321a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800321c:	f7fe f880 	bl	8001320 <HAL_GetTick>
 8003220:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003222:	e008      	b.n	8003236 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003224:	f7fe f87c 	bl	8001320 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b02      	cmp	r3, #2
 8003230:	d901      	bls.n	8003236 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e1c2      	b.n	80035bc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003236:	4b21      	ldr	r3, [pc, #132]	; (80032bc <HAL_RCC_OscConfig+0x4a4>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1f0      	bne.n	8003224 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0304 	and.w	r3, r3, #4
 800324a:	2b00      	cmp	r3, #0
 800324c:	f000 8086 	beq.w	800335c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003250:	4b1b      	ldr	r3, [pc, #108]	; (80032c0 <HAL_RCC_OscConfig+0x4a8>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a1a      	ldr	r2, [pc, #104]	; (80032c0 <HAL_RCC_OscConfig+0x4a8>)
 8003256:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800325a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800325c:	f7fe f860 	bl	8001320 <HAL_GetTick>
 8003260:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003262:	e008      	b.n	8003276 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003264:	f7fe f85c 	bl	8001320 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b64      	cmp	r3, #100	; 0x64
 8003270:	d901      	bls.n	8003276 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e1a2      	b.n	80035bc <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003276:	4b12      	ldr	r3, [pc, #72]	; (80032c0 <HAL_RCC_OscConfig+0x4a8>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800327e:	2b00      	cmp	r3, #0
 8003280:	d0f0      	beq.n	8003264 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	2b01      	cmp	r3, #1
 8003288:	d106      	bne.n	8003298 <HAL_RCC_OscConfig+0x480>
 800328a:	4b0c      	ldr	r3, [pc, #48]	; (80032bc <HAL_RCC_OscConfig+0x4a4>)
 800328c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800328e:	4a0b      	ldr	r2, [pc, #44]	; (80032bc <HAL_RCC_OscConfig+0x4a4>)
 8003290:	f043 0301 	orr.w	r3, r3, #1
 8003294:	6713      	str	r3, [r2, #112]	; 0x70
 8003296:	e032      	b.n	80032fe <HAL_RCC_OscConfig+0x4e6>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d111      	bne.n	80032c4 <HAL_RCC_OscConfig+0x4ac>
 80032a0:	4b06      	ldr	r3, [pc, #24]	; (80032bc <HAL_RCC_OscConfig+0x4a4>)
 80032a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a4:	4a05      	ldr	r2, [pc, #20]	; (80032bc <HAL_RCC_OscConfig+0x4a4>)
 80032a6:	f023 0301 	bic.w	r3, r3, #1
 80032aa:	6713      	str	r3, [r2, #112]	; 0x70
 80032ac:	4b03      	ldr	r3, [pc, #12]	; (80032bc <HAL_RCC_OscConfig+0x4a4>)
 80032ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b0:	4a02      	ldr	r2, [pc, #8]	; (80032bc <HAL_RCC_OscConfig+0x4a4>)
 80032b2:	f023 0304 	bic.w	r3, r3, #4
 80032b6:	6713      	str	r3, [r2, #112]	; 0x70
 80032b8:	e021      	b.n	80032fe <HAL_RCC_OscConfig+0x4e6>
 80032ba:	bf00      	nop
 80032bc:	58024400 	.word	0x58024400
 80032c0:	58024800 	.word	0x58024800
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	2b05      	cmp	r3, #5
 80032ca:	d10c      	bne.n	80032e6 <HAL_RCC_OscConfig+0x4ce>
 80032cc:	4b83      	ldr	r3, [pc, #524]	; (80034dc <HAL_RCC_OscConfig+0x6c4>)
 80032ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d0:	4a82      	ldr	r2, [pc, #520]	; (80034dc <HAL_RCC_OscConfig+0x6c4>)
 80032d2:	f043 0304 	orr.w	r3, r3, #4
 80032d6:	6713      	str	r3, [r2, #112]	; 0x70
 80032d8:	4b80      	ldr	r3, [pc, #512]	; (80034dc <HAL_RCC_OscConfig+0x6c4>)
 80032da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032dc:	4a7f      	ldr	r2, [pc, #508]	; (80034dc <HAL_RCC_OscConfig+0x6c4>)
 80032de:	f043 0301 	orr.w	r3, r3, #1
 80032e2:	6713      	str	r3, [r2, #112]	; 0x70
 80032e4:	e00b      	b.n	80032fe <HAL_RCC_OscConfig+0x4e6>
 80032e6:	4b7d      	ldr	r3, [pc, #500]	; (80034dc <HAL_RCC_OscConfig+0x6c4>)
 80032e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ea:	4a7c      	ldr	r2, [pc, #496]	; (80034dc <HAL_RCC_OscConfig+0x6c4>)
 80032ec:	f023 0301 	bic.w	r3, r3, #1
 80032f0:	6713      	str	r3, [r2, #112]	; 0x70
 80032f2:	4b7a      	ldr	r3, [pc, #488]	; (80034dc <HAL_RCC_OscConfig+0x6c4>)
 80032f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f6:	4a79      	ldr	r2, [pc, #484]	; (80034dc <HAL_RCC_OscConfig+0x6c4>)
 80032f8:	f023 0304 	bic.w	r3, r3, #4
 80032fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d015      	beq.n	8003332 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003306:	f7fe f80b 	bl	8001320 <HAL_GetTick>
 800330a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800330c:	e00a      	b.n	8003324 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800330e:	f7fe f807 	bl	8001320 <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	f241 3288 	movw	r2, #5000	; 0x1388
 800331c:	4293      	cmp	r3, r2
 800331e:	d901      	bls.n	8003324 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e14b      	b.n	80035bc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003324:	4b6d      	ldr	r3, [pc, #436]	; (80034dc <HAL_RCC_OscConfig+0x6c4>)
 8003326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003328:	f003 0302 	and.w	r3, r3, #2
 800332c:	2b00      	cmp	r3, #0
 800332e:	d0ee      	beq.n	800330e <HAL_RCC_OscConfig+0x4f6>
 8003330:	e014      	b.n	800335c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003332:	f7fd fff5 	bl	8001320 <HAL_GetTick>
 8003336:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003338:	e00a      	b.n	8003350 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800333a:	f7fd fff1 	bl	8001320 <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	f241 3288 	movw	r2, #5000	; 0x1388
 8003348:	4293      	cmp	r3, r2
 800334a:	d901      	bls.n	8003350 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e135      	b.n	80035bc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003350:	4b62      	ldr	r3, [pc, #392]	; (80034dc <HAL_RCC_OscConfig+0x6c4>)
 8003352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003354:	f003 0302 	and.w	r3, r3, #2
 8003358:	2b00      	cmp	r3, #0
 800335a:	d1ee      	bne.n	800333a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003360:	2b00      	cmp	r3, #0
 8003362:	f000 812a 	beq.w	80035ba <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003366:	4b5d      	ldr	r3, [pc, #372]	; (80034dc <HAL_RCC_OscConfig+0x6c4>)
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800336e:	2b18      	cmp	r3, #24
 8003370:	f000 80ba 	beq.w	80034e8 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003378:	2b02      	cmp	r3, #2
 800337a:	f040 8095 	bne.w	80034a8 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800337e:	4b57      	ldr	r3, [pc, #348]	; (80034dc <HAL_RCC_OscConfig+0x6c4>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a56      	ldr	r2, [pc, #344]	; (80034dc <HAL_RCC_OscConfig+0x6c4>)
 8003384:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003388:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800338a:	f7fd ffc9 	bl	8001320 <HAL_GetTick>
 800338e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003390:	e008      	b.n	80033a4 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003392:	f7fd ffc5 	bl	8001320 <HAL_GetTick>
 8003396:	4602      	mov	r2, r0
 8003398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	2b02      	cmp	r3, #2
 800339e:	d901      	bls.n	80033a4 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80033a0:	2303      	movs	r3, #3
 80033a2:	e10b      	b.n	80035bc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80033a4:	4b4d      	ldr	r3, [pc, #308]	; (80034dc <HAL_RCC_OscConfig+0x6c4>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d1f0      	bne.n	8003392 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033b0:	4b4a      	ldr	r3, [pc, #296]	; (80034dc <HAL_RCC_OscConfig+0x6c4>)
 80033b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033b4:	4b4a      	ldr	r3, [pc, #296]	; (80034e0 <HAL_RCC_OscConfig+0x6c8>)
 80033b6:	4013      	ands	r3, r2
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80033c0:	0112      	lsls	r2, r2, #4
 80033c2:	430a      	orrs	r2, r1
 80033c4:	4945      	ldr	r1, [pc, #276]	; (80034dc <HAL_RCC_OscConfig+0x6c4>)
 80033c6:	4313      	orrs	r3, r2
 80033c8:	628b      	str	r3, [r1, #40]	; 0x28
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ce:	3b01      	subs	r3, #1
 80033d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033d8:	3b01      	subs	r3, #1
 80033da:	025b      	lsls	r3, r3, #9
 80033dc:	b29b      	uxth	r3, r3
 80033de:	431a      	orrs	r2, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e4:	3b01      	subs	r3, #1
 80033e6:	041b      	lsls	r3, r3, #16
 80033e8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80033ec:	431a      	orrs	r2, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033f2:	3b01      	subs	r3, #1
 80033f4:	061b      	lsls	r3, r3, #24
 80033f6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80033fa:	4938      	ldr	r1, [pc, #224]	; (80034dc <HAL_RCC_OscConfig+0x6c4>)
 80033fc:	4313      	orrs	r3, r2
 80033fe:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003400:	4b36      	ldr	r3, [pc, #216]	; (80034dc <HAL_RCC_OscConfig+0x6c4>)
 8003402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003404:	4a35      	ldr	r2, [pc, #212]	; (80034dc <HAL_RCC_OscConfig+0x6c4>)
 8003406:	f023 0301 	bic.w	r3, r3, #1
 800340a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800340c:	4b33      	ldr	r3, [pc, #204]	; (80034dc <HAL_RCC_OscConfig+0x6c4>)
 800340e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003410:	4b34      	ldr	r3, [pc, #208]	; (80034e4 <HAL_RCC_OscConfig+0x6cc>)
 8003412:	4013      	ands	r3, r2
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003418:	00d2      	lsls	r2, r2, #3
 800341a:	4930      	ldr	r1, [pc, #192]	; (80034dc <HAL_RCC_OscConfig+0x6c4>)
 800341c:	4313      	orrs	r3, r2
 800341e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003420:	4b2e      	ldr	r3, [pc, #184]	; (80034dc <HAL_RCC_OscConfig+0x6c4>)
 8003422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003424:	f023 020c 	bic.w	r2, r3, #12
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342c:	492b      	ldr	r1, [pc, #172]	; (80034dc <HAL_RCC_OscConfig+0x6c4>)
 800342e:	4313      	orrs	r3, r2
 8003430:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003432:	4b2a      	ldr	r3, [pc, #168]	; (80034dc <HAL_RCC_OscConfig+0x6c4>)
 8003434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003436:	f023 0202 	bic.w	r2, r3, #2
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800343e:	4927      	ldr	r1, [pc, #156]	; (80034dc <HAL_RCC_OscConfig+0x6c4>)
 8003440:	4313      	orrs	r3, r2
 8003442:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003444:	4b25      	ldr	r3, [pc, #148]	; (80034dc <HAL_RCC_OscConfig+0x6c4>)
 8003446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003448:	4a24      	ldr	r2, [pc, #144]	; (80034dc <HAL_RCC_OscConfig+0x6c4>)
 800344a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800344e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003450:	4b22      	ldr	r3, [pc, #136]	; (80034dc <HAL_RCC_OscConfig+0x6c4>)
 8003452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003454:	4a21      	ldr	r2, [pc, #132]	; (80034dc <HAL_RCC_OscConfig+0x6c4>)
 8003456:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800345a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800345c:	4b1f      	ldr	r3, [pc, #124]	; (80034dc <HAL_RCC_OscConfig+0x6c4>)
 800345e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003460:	4a1e      	ldr	r2, [pc, #120]	; (80034dc <HAL_RCC_OscConfig+0x6c4>)
 8003462:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003466:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003468:	4b1c      	ldr	r3, [pc, #112]	; (80034dc <HAL_RCC_OscConfig+0x6c4>)
 800346a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346c:	4a1b      	ldr	r2, [pc, #108]	; (80034dc <HAL_RCC_OscConfig+0x6c4>)
 800346e:	f043 0301 	orr.w	r3, r3, #1
 8003472:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003474:	4b19      	ldr	r3, [pc, #100]	; (80034dc <HAL_RCC_OscConfig+0x6c4>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a18      	ldr	r2, [pc, #96]	; (80034dc <HAL_RCC_OscConfig+0x6c4>)
 800347a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800347e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003480:	f7fd ff4e 	bl	8001320 <HAL_GetTick>
 8003484:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003486:	e008      	b.n	800349a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003488:	f7fd ff4a 	bl	8001320 <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	2b02      	cmp	r3, #2
 8003494:	d901      	bls.n	800349a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	e090      	b.n	80035bc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800349a:	4b10      	ldr	r3, [pc, #64]	; (80034dc <HAL_RCC_OscConfig+0x6c4>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d0f0      	beq.n	8003488 <HAL_RCC_OscConfig+0x670>
 80034a6:	e088      	b.n	80035ba <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034a8:	4b0c      	ldr	r3, [pc, #48]	; (80034dc <HAL_RCC_OscConfig+0x6c4>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a0b      	ldr	r2, [pc, #44]	; (80034dc <HAL_RCC_OscConfig+0x6c4>)
 80034ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b4:	f7fd ff34 	bl	8001320 <HAL_GetTick>
 80034b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80034ba:	e008      	b.n	80034ce <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034bc:	f7fd ff30 	bl	8001320 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d901      	bls.n	80034ce <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e076      	b.n	80035bc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80034ce:	4b03      	ldr	r3, [pc, #12]	; (80034dc <HAL_RCC_OscConfig+0x6c4>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d1f0      	bne.n	80034bc <HAL_RCC_OscConfig+0x6a4>
 80034da:	e06e      	b.n	80035ba <HAL_RCC_OscConfig+0x7a2>
 80034dc:	58024400 	.word	0x58024400
 80034e0:	fffffc0c 	.word	0xfffffc0c
 80034e4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80034e8:	4b36      	ldr	r3, [pc, #216]	; (80035c4 <HAL_RCC_OscConfig+0x7ac>)
 80034ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ec:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80034ee:	4b35      	ldr	r3, [pc, #212]	; (80035c4 <HAL_RCC_OscConfig+0x7ac>)
 80034f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d031      	beq.n	8003560 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	f003 0203 	and.w	r2, r3, #3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003506:	429a      	cmp	r2, r3
 8003508:	d12a      	bne.n	8003560 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	091b      	lsrs	r3, r3, #4
 800350e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003516:	429a      	cmp	r2, r3
 8003518:	d122      	bne.n	8003560 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003524:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003526:	429a      	cmp	r2, r3
 8003528:	d11a      	bne.n	8003560 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	0a5b      	lsrs	r3, r3, #9
 800352e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003536:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003538:	429a      	cmp	r2, r3
 800353a:	d111      	bne.n	8003560 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	0c1b      	lsrs	r3, r3, #16
 8003540:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003548:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800354a:	429a      	cmp	r2, r3
 800354c:	d108      	bne.n	8003560 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	0e1b      	lsrs	r3, r3, #24
 8003552:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800355a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800355c:	429a      	cmp	r2, r3
 800355e:	d001      	beq.n	8003564 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e02b      	b.n	80035bc <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003564:	4b17      	ldr	r3, [pc, #92]	; (80035c4 <HAL_RCC_OscConfig+0x7ac>)
 8003566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003568:	08db      	lsrs	r3, r3, #3
 800356a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800356e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003574:	693a      	ldr	r2, [r7, #16]
 8003576:	429a      	cmp	r2, r3
 8003578:	d01f      	beq.n	80035ba <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800357a:	4b12      	ldr	r3, [pc, #72]	; (80035c4 <HAL_RCC_OscConfig+0x7ac>)
 800357c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800357e:	4a11      	ldr	r2, [pc, #68]	; (80035c4 <HAL_RCC_OscConfig+0x7ac>)
 8003580:	f023 0301 	bic.w	r3, r3, #1
 8003584:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003586:	f7fd fecb 	bl	8001320 <HAL_GetTick>
 800358a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800358c:	bf00      	nop
 800358e:	f7fd fec7 	bl	8001320 <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003596:	4293      	cmp	r3, r2
 8003598:	d0f9      	beq.n	800358e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800359a:	4b0a      	ldr	r3, [pc, #40]	; (80035c4 <HAL_RCC_OscConfig+0x7ac>)
 800359c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800359e:	4b0a      	ldr	r3, [pc, #40]	; (80035c8 <HAL_RCC_OscConfig+0x7b0>)
 80035a0:	4013      	ands	r3, r2
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80035a6:	00d2      	lsls	r2, r2, #3
 80035a8:	4906      	ldr	r1, [pc, #24]	; (80035c4 <HAL_RCC_OscConfig+0x7ac>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80035ae:	4b05      	ldr	r3, [pc, #20]	; (80035c4 <HAL_RCC_OscConfig+0x7ac>)
 80035b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b2:	4a04      	ldr	r2, [pc, #16]	; (80035c4 <HAL_RCC_OscConfig+0x7ac>)
 80035b4:	f043 0301 	orr.w	r3, r3, #1
 80035b8:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80035ba:	2300      	movs	r3, #0
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3730      	adds	r7, #48	; 0x30
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	58024400 	.word	0x58024400
 80035c8:	ffff0007 	.word	0xffff0007

080035cc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b086      	sub	sp, #24
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d101      	bne.n	80035e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e19c      	b.n	800391a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035e0:	4b8a      	ldr	r3, [pc, #552]	; (800380c <HAL_RCC_ClockConfig+0x240>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 030f 	and.w	r3, r3, #15
 80035e8:	683a      	ldr	r2, [r7, #0]
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d910      	bls.n	8003610 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ee:	4b87      	ldr	r3, [pc, #540]	; (800380c <HAL_RCC_ClockConfig+0x240>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f023 020f 	bic.w	r2, r3, #15
 80035f6:	4985      	ldr	r1, [pc, #532]	; (800380c <HAL_RCC_ClockConfig+0x240>)
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035fe:	4b83      	ldr	r3, [pc, #524]	; (800380c <HAL_RCC_ClockConfig+0x240>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 030f 	and.w	r3, r3, #15
 8003606:	683a      	ldr	r2, [r7, #0]
 8003608:	429a      	cmp	r2, r3
 800360a:	d001      	beq.n	8003610 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e184      	b.n	800391a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0304 	and.w	r3, r3, #4
 8003618:	2b00      	cmp	r3, #0
 800361a:	d010      	beq.n	800363e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	691a      	ldr	r2, [r3, #16]
 8003620:	4b7b      	ldr	r3, [pc, #492]	; (8003810 <HAL_RCC_ClockConfig+0x244>)
 8003622:	699b      	ldr	r3, [r3, #24]
 8003624:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003628:	429a      	cmp	r2, r3
 800362a:	d908      	bls.n	800363e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800362c:	4b78      	ldr	r3, [pc, #480]	; (8003810 <HAL_RCC_ClockConfig+0x244>)
 800362e:	699b      	ldr	r3, [r3, #24]
 8003630:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	691b      	ldr	r3, [r3, #16]
 8003638:	4975      	ldr	r1, [pc, #468]	; (8003810 <HAL_RCC_ClockConfig+0x244>)
 800363a:	4313      	orrs	r3, r2
 800363c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0308 	and.w	r3, r3, #8
 8003646:	2b00      	cmp	r3, #0
 8003648:	d010      	beq.n	800366c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	695a      	ldr	r2, [r3, #20]
 800364e:	4b70      	ldr	r3, [pc, #448]	; (8003810 <HAL_RCC_ClockConfig+0x244>)
 8003650:	69db      	ldr	r3, [r3, #28]
 8003652:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003656:	429a      	cmp	r2, r3
 8003658:	d908      	bls.n	800366c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800365a:	4b6d      	ldr	r3, [pc, #436]	; (8003810 <HAL_RCC_ClockConfig+0x244>)
 800365c:	69db      	ldr	r3, [r3, #28]
 800365e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	695b      	ldr	r3, [r3, #20]
 8003666:	496a      	ldr	r1, [pc, #424]	; (8003810 <HAL_RCC_ClockConfig+0x244>)
 8003668:	4313      	orrs	r3, r2
 800366a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0310 	and.w	r3, r3, #16
 8003674:	2b00      	cmp	r3, #0
 8003676:	d010      	beq.n	800369a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	699a      	ldr	r2, [r3, #24]
 800367c:	4b64      	ldr	r3, [pc, #400]	; (8003810 <HAL_RCC_ClockConfig+0x244>)
 800367e:	69db      	ldr	r3, [r3, #28]
 8003680:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003684:	429a      	cmp	r2, r3
 8003686:	d908      	bls.n	800369a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003688:	4b61      	ldr	r3, [pc, #388]	; (8003810 <HAL_RCC_ClockConfig+0x244>)
 800368a:	69db      	ldr	r3, [r3, #28]
 800368c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	699b      	ldr	r3, [r3, #24]
 8003694:	495e      	ldr	r1, [pc, #376]	; (8003810 <HAL_RCC_ClockConfig+0x244>)
 8003696:	4313      	orrs	r3, r2
 8003698:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0320 	and.w	r3, r3, #32
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d010      	beq.n	80036c8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	69da      	ldr	r2, [r3, #28]
 80036aa:	4b59      	ldr	r3, [pc, #356]	; (8003810 <HAL_RCC_ClockConfig+0x244>)
 80036ac:	6a1b      	ldr	r3, [r3, #32]
 80036ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d908      	bls.n	80036c8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80036b6:	4b56      	ldr	r3, [pc, #344]	; (8003810 <HAL_RCC_ClockConfig+0x244>)
 80036b8:	6a1b      	ldr	r3, [r3, #32]
 80036ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	69db      	ldr	r3, [r3, #28]
 80036c2:	4953      	ldr	r1, [pc, #332]	; (8003810 <HAL_RCC_ClockConfig+0x244>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0302 	and.w	r3, r3, #2
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d010      	beq.n	80036f6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	68da      	ldr	r2, [r3, #12]
 80036d8:	4b4d      	ldr	r3, [pc, #308]	; (8003810 <HAL_RCC_ClockConfig+0x244>)
 80036da:	699b      	ldr	r3, [r3, #24]
 80036dc:	f003 030f 	and.w	r3, r3, #15
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d908      	bls.n	80036f6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036e4:	4b4a      	ldr	r3, [pc, #296]	; (8003810 <HAL_RCC_ClockConfig+0x244>)
 80036e6:	699b      	ldr	r3, [r3, #24]
 80036e8:	f023 020f 	bic.w	r2, r3, #15
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	4947      	ldr	r1, [pc, #284]	; (8003810 <HAL_RCC_ClockConfig+0x244>)
 80036f2:	4313      	orrs	r3, r2
 80036f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0301 	and.w	r3, r3, #1
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d055      	beq.n	80037ae <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003702:	4b43      	ldr	r3, [pc, #268]	; (8003810 <HAL_RCC_ClockConfig+0x244>)
 8003704:	699b      	ldr	r3, [r3, #24]
 8003706:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	4940      	ldr	r1, [pc, #256]	; (8003810 <HAL_RCC_ClockConfig+0x244>)
 8003710:	4313      	orrs	r3, r2
 8003712:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	2b02      	cmp	r3, #2
 800371a:	d107      	bne.n	800372c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800371c:	4b3c      	ldr	r3, [pc, #240]	; (8003810 <HAL_RCC_ClockConfig+0x244>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d121      	bne.n	800376c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e0f6      	b.n	800391a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	2b03      	cmp	r3, #3
 8003732:	d107      	bne.n	8003744 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003734:	4b36      	ldr	r3, [pc, #216]	; (8003810 <HAL_RCC_ClockConfig+0x244>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d115      	bne.n	800376c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e0ea      	b.n	800391a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	2b01      	cmp	r3, #1
 800374a:	d107      	bne.n	800375c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800374c:	4b30      	ldr	r3, [pc, #192]	; (8003810 <HAL_RCC_ClockConfig+0x244>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003754:	2b00      	cmp	r3, #0
 8003756:	d109      	bne.n	800376c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e0de      	b.n	800391a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800375c:	4b2c      	ldr	r3, [pc, #176]	; (8003810 <HAL_RCC_ClockConfig+0x244>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0304 	and.w	r3, r3, #4
 8003764:	2b00      	cmp	r3, #0
 8003766:	d101      	bne.n	800376c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e0d6      	b.n	800391a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800376c:	4b28      	ldr	r3, [pc, #160]	; (8003810 <HAL_RCC_ClockConfig+0x244>)
 800376e:	691b      	ldr	r3, [r3, #16]
 8003770:	f023 0207 	bic.w	r2, r3, #7
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	4925      	ldr	r1, [pc, #148]	; (8003810 <HAL_RCC_ClockConfig+0x244>)
 800377a:	4313      	orrs	r3, r2
 800377c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800377e:	f7fd fdcf 	bl	8001320 <HAL_GetTick>
 8003782:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003784:	e00a      	b.n	800379c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003786:	f7fd fdcb 	bl	8001320 <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	f241 3288 	movw	r2, #5000	; 0x1388
 8003794:	4293      	cmp	r3, r2
 8003796:	d901      	bls.n	800379c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	e0be      	b.n	800391a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800379c:	4b1c      	ldr	r3, [pc, #112]	; (8003810 <HAL_RCC_ClockConfig+0x244>)
 800379e:	691b      	ldr	r3, [r3, #16]
 80037a0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	00db      	lsls	r3, r3, #3
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d1eb      	bne.n	8003786 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0302 	and.w	r3, r3, #2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d010      	beq.n	80037dc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	68da      	ldr	r2, [r3, #12]
 80037be:	4b14      	ldr	r3, [pc, #80]	; (8003810 <HAL_RCC_ClockConfig+0x244>)
 80037c0:	699b      	ldr	r3, [r3, #24]
 80037c2:	f003 030f 	and.w	r3, r3, #15
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d208      	bcs.n	80037dc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037ca:	4b11      	ldr	r3, [pc, #68]	; (8003810 <HAL_RCC_ClockConfig+0x244>)
 80037cc:	699b      	ldr	r3, [r3, #24]
 80037ce:	f023 020f 	bic.w	r2, r3, #15
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	490e      	ldr	r1, [pc, #56]	; (8003810 <HAL_RCC_ClockConfig+0x244>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037dc:	4b0b      	ldr	r3, [pc, #44]	; (800380c <HAL_RCC_ClockConfig+0x240>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 030f 	and.w	r3, r3, #15
 80037e4:	683a      	ldr	r2, [r7, #0]
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d214      	bcs.n	8003814 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ea:	4b08      	ldr	r3, [pc, #32]	; (800380c <HAL_RCC_ClockConfig+0x240>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f023 020f 	bic.w	r2, r3, #15
 80037f2:	4906      	ldr	r1, [pc, #24]	; (800380c <HAL_RCC_ClockConfig+0x240>)
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037fa:	4b04      	ldr	r3, [pc, #16]	; (800380c <HAL_RCC_ClockConfig+0x240>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 030f 	and.w	r3, r3, #15
 8003802:	683a      	ldr	r2, [r7, #0]
 8003804:	429a      	cmp	r2, r3
 8003806:	d005      	beq.n	8003814 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e086      	b.n	800391a <HAL_RCC_ClockConfig+0x34e>
 800380c:	52002000 	.word	0x52002000
 8003810:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0304 	and.w	r3, r3, #4
 800381c:	2b00      	cmp	r3, #0
 800381e:	d010      	beq.n	8003842 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	691a      	ldr	r2, [r3, #16]
 8003824:	4b3f      	ldr	r3, [pc, #252]	; (8003924 <HAL_RCC_ClockConfig+0x358>)
 8003826:	699b      	ldr	r3, [r3, #24]
 8003828:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800382c:	429a      	cmp	r2, r3
 800382e:	d208      	bcs.n	8003842 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003830:	4b3c      	ldr	r3, [pc, #240]	; (8003924 <HAL_RCC_ClockConfig+0x358>)
 8003832:	699b      	ldr	r3, [r3, #24]
 8003834:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	4939      	ldr	r1, [pc, #228]	; (8003924 <HAL_RCC_ClockConfig+0x358>)
 800383e:	4313      	orrs	r3, r2
 8003840:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0308 	and.w	r3, r3, #8
 800384a:	2b00      	cmp	r3, #0
 800384c:	d010      	beq.n	8003870 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	695a      	ldr	r2, [r3, #20]
 8003852:	4b34      	ldr	r3, [pc, #208]	; (8003924 <HAL_RCC_ClockConfig+0x358>)
 8003854:	69db      	ldr	r3, [r3, #28]
 8003856:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800385a:	429a      	cmp	r2, r3
 800385c:	d208      	bcs.n	8003870 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800385e:	4b31      	ldr	r3, [pc, #196]	; (8003924 <HAL_RCC_ClockConfig+0x358>)
 8003860:	69db      	ldr	r3, [r3, #28]
 8003862:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	695b      	ldr	r3, [r3, #20]
 800386a:	492e      	ldr	r1, [pc, #184]	; (8003924 <HAL_RCC_ClockConfig+0x358>)
 800386c:	4313      	orrs	r3, r2
 800386e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0310 	and.w	r3, r3, #16
 8003878:	2b00      	cmp	r3, #0
 800387a:	d010      	beq.n	800389e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	699a      	ldr	r2, [r3, #24]
 8003880:	4b28      	ldr	r3, [pc, #160]	; (8003924 <HAL_RCC_ClockConfig+0x358>)
 8003882:	69db      	ldr	r3, [r3, #28]
 8003884:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003888:	429a      	cmp	r2, r3
 800388a:	d208      	bcs.n	800389e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800388c:	4b25      	ldr	r3, [pc, #148]	; (8003924 <HAL_RCC_ClockConfig+0x358>)
 800388e:	69db      	ldr	r3, [r3, #28]
 8003890:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	699b      	ldr	r3, [r3, #24]
 8003898:	4922      	ldr	r1, [pc, #136]	; (8003924 <HAL_RCC_ClockConfig+0x358>)
 800389a:	4313      	orrs	r3, r2
 800389c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0320 	and.w	r3, r3, #32
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d010      	beq.n	80038cc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	69da      	ldr	r2, [r3, #28]
 80038ae:	4b1d      	ldr	r3, [pc, #116]	; (8003924 <HAL_RCC_ClockConfig+0x358>)
 80038b0:	6a1b      	ldr	r3, [r3, #32]
 80038b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d208      	bcs.n	80038cc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80038ba:	4b1a      	ldr	r3, [pc, #104]	; (8003924 <HAL_RCC_ClockConfig+0x358>)
 80038bc:	6a1b      	ldr	r3, [r3, #32]
 80038be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	69db      	ldr	r3, [r3, #28]
 80038c6:	4917      	ldr	r1, [pc, #92]	; (8003924 <HAL_RCC_ClockConfig+0x358>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80038cc:	f000 f834 	bl	8003938 <HAL_RCC_GetSysClockFreq>
 80038d0:	4602      	mov	r2, r0
 80038d2:	4b14      	ldr	r3, [pc, #80]	; (8003924 <HAL_RCC_ClockConfig+0x358>)
 80038d4:	699b      	ldr	r3, [r3, #24]
 80038d6:	0a1b      	lsrs	r3, r3, #8
 80038d8:	f003 030f 	and.w	r3, r3, #15
 80038dc:	4912      	ldr	r1, [pc, #72]	; (8003928 <HAL_RCC_ClockConfig+0x35c>)
 80038de:	5ccb      	ldrb	r3, [r1, r3]
 80038e0:	f003 031f 	and.w	r3, r3, #31
 80038e4:	fa22 f303 	lsr.w	r3, r2, r3
 80038e8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80038ea:	4b0e      	ldr	r3, [pc, #56]	; (8003924 <HAL_RCC_ClockConfig+0x358>)
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	f003 030f 	and.w	r3, r3, #15
 80038f2:	4a0d      	ldr	r2, [pc, #52]	; (8003928 <HAL_RCC_ClockConfig+0x35c>)
 80038f4:	5cd3      	ldrb	r3, [r2, r3]
 80038f6:	f003 031f 	and.w	r3, r3, #31
 80038fa:	693a      	ldr	r2, [r7, #16]
 80038fc:	fa22 f303 	lsr.w	r3, r2, r3
 8003900:	4a0a      	ldr	r2, [pc, #40]	; (800392c <HAL_RCC_ClockConfig+0x360>)
 8003902:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003904:	4a0a      	ldr	r2, [pc, #40]	; (8003930 <HAL_RCC_ClockConfig+0x364>)
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800390a:	4b0a      	ldr	r3, [pc, #40]	; (8003934 <HAL_RCC_ClockConfig+0x368>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4618      	mov	r0, r3
 8003910:	f7fd fcbc 	bl	800128c <HAL_InitTick>
 8003914:	4603      	mov	r3, r0
 8003916:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003918:	7bfb      	ldrb	r3, [r7, #15]
}
 800391a:	4618      	mov	r0, r3
 800391c:	3718      	adds	r7, #24
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	58024400 	.word	0x58024400
 8003928:	08006c98 	.word	0x08006c98
 800392c:	24000004 	.word	0x24000004
 8003930:	24000000 	.word	0x24000000
 8003934:	24000008 	.word	0x24000008

08003938 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003938:	b480      	push	{r7}
 800393a:	b089      	sub	sp, #36	; 0x24
 800393c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800393e:	4bb3      	ldr	r3, [pc, #716]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003940:	691b      	ldr	r3, [r3, #16]
 8003942:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003946:	2b18      	cmp	r3, #24
 8003948:	f200 8155 	bhi.w	8003bf6 <HAL_RCC_GetSysClockFreq+0x2be>
 800394c:	a201      	add	r2, pc, #4	; (adr r2, 8003954 <HAL_RCC_GetSysClockFreq+0x1c>)
 800394e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003952:	bf00      	nop
 8003954:	080039b9 	.word	0x080039b9
 8003958:	08003bf7 	.word	0x08003bf7
 800395c:	08003bf7 	.word	0x08003bf7
 8003960:	08003bf7 	.word	0x08003bf7
 8003964:	08003bf7 	.word	0x08003bf7
 8003968:	08003bf7 	.word	0x08003bf7
 800396c:	08003bf7 	.word	0x08003bf7
 8003970:	08003bf7 	.word	0x08003bf7
 8003974:	080039df 	.word	0x080039df
 8003978:	08003bf7 	.word	0x08003bf7
 800397c:	08003bf7 	.word	0x08003bf7
 8003980:	08003bf7 	.word	0x08003bf7
 8003984:	08003bf7 	.word	0x08003bf7
 8003988:	08003bf7 	.word	0x08003bf7
 800398c:	08003bf7 	.word	0x08003bf7
 8003990:	08003bf7 	.word	0x08003bf7
 8003994:	080039e5 	.word	0x080039e5
 8003998:	08003bf7 	.word	0x08003bf7
 800399c:	08003bf7 	.word	0x08003bf7
 80039a0:	08003bf7 	.word	0x08003bf7
 80039a4:	08003bf7 	.word	0x08003bf7
 80039a8:	08003bf7 	.word	0x08003bf7
 80039ac:	08003bf7 	.word	0x08003bf7
 80039b0:	08003bf7 	.word	0x08003bf7
 80039b4:	080039eb 	.word	0x080039eb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80039b8:	4b94      	ldr	r3, [pc, #592]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0320 	and.w	r3, r3, #32
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d009      	beq.n	80039d8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80039c4:	4b91      	ldr	r3, [pc, #580]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	08db      	lsrs	r3, r3, #3
 80039ca:	f003 0303 	and.w	r3, r3, #3
 80039ce:	4a90      	ldr	r2, [pc, #576]	; (8003c10 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80039d0:	fa22 f303 	lsr.w	r3, r2, r3
 80039d4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80039d6:	e111      	b.n	8003bfc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80039d8:	4b8d      	ldr	r3, [pc, #564]	; (8003c10 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80039da:	61bb      	str	r3, [r7, #24]
      break;
 80039dc:	e10e      	b.n	8003bfc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80039de:	4b8d      	ldr	r3, [pc, #564]	; (8003c14 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80039e0:	61bb      	str	r3, [r7, #24]
      break;
 80039e2:	e10b      	b.n	8003bfc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80039e4:	4b8c      	ldr	r3, [pc, #560]	; (8003c18 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80039e6:	61bb      	str	r3, [r7, #24]
      break;
 80039e8:	e108      	b.n	8003bfc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80039ea:	4b88      	ldr	r3, [pc, #544]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ee:	f003 0303 	and.w	r3, r3, #3
 80039f2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80039f4:	4b85      	ldr	r3, [pc, #532]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f8:	091b      	lsrs	r3, r3, #4
 80039fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039fe:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003a00:	4b82      	ldr	r3, [pc, #520]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a04:	f003 0301 	and.w	r3, r3, #1
 8003a08:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003a0a:	4b80      	ldr	r3, [pc, #512]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a0e:	08db      	lsrs	r3, r3, #3
 8003a10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003a14:	68fa      	ldr	r2, [r7, #12]
 8003a16:	fb02 f303 	mul.w	r3, r2, r3
 8003a1a:	ee07 3a90 	vmov	s15, r3
 8003a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a22:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	f000 80e1 	beq.w	8003bf0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	f000 8083 	beq.w	8003b3c <HAL_RCC_GetSysClockFreq+0x204>
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	f200 80a1 	bhi.w	8003b80 <HAL_RCC_GetSysClockFreq+0x248>
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d003      	beq.n	8003a4c <HAL_RCC_GetSysClockFreq+0x114>
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d056      	beq.n	8003af8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003a4a:	e099      	b.n	8003b80 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a4c:	4b6f      	ldr	r3, [pc, #444]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0320 	and.w	r3, r3, #32
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d02d      	beq.n	8003ab4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003a58:	4b6c      	ldr	r3, [pc, #432]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	08db      	lsrs	r3, r3, #3
 8003a5e:	f003 0303 	and.w	r3, r3, #3
 8003a62:	4a6b      	ldr	r2, [pc, #428]	; (8003c10 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003a64:	fa22 f303 	lsr.w	r3, r2, r3
 8003a68:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	ee07 3a90 	vmov	s15, r3
 8003a70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	ee07 3a90 	vmov	s15, r3
 8003a7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a82:	4b62      	ldr	r3, [pc, #392]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a8a:	ee07 3a90 	vmov	s15, r3
 8003a8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a92:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a96:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003c1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003aa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003aa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003aaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aae:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003ab2:	e087      	b.n	8003bc4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	ee07 3a90 	vmov	s15, r3
 8003aba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003abe:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003c20 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003ac2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ac6:	4b51      	ldr	r3, [pc, #324]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ace:	ee07 3a90 	vmov	s15, r3
 8003ad2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ad6:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ada:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003c1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003ade:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ae2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ae6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003aea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003aee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003af2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003af6:	e065      	b.n	8003bc4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	ee07 3a90 	vmov	s15, r3
 8003afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b02:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003c24 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003b06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b0a:	4b40      	ldr	r3, [pc, #256]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b12:	ee07 3a90 	vmov	s15, r3
 8003b16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b1e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003c1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b36:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003b3a:	e043      	b.n	8003bc4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	ee07 3a90 	vmov	s15, r3
 8003b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b46:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003c28 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003b4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b4e:	4b2f      	ldr	r3, [pc, #188]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b56:	ee07 3a90 	vmov	s15, r3
 8003b5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b62:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003c1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b7a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003b7e:	e021      	b.n	8003bc4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	ee07 3a90 	vmov	s15, r3
 8003b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b8a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003c24 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003b8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b92:	4b1e      	ldr	r3, [pc, #120]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b9a:	ee07 3a90 	vmov	s15, r3
 8003b9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ba2:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ba6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003c1c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003baa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bbe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003bc2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003bc4:	4b11      	ldr	r3, [pc, #68]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc8:	0a5b      	lsrs	r3, r3, #9
 8003bca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bce:	3301      	adds	r3, #1
 8003bd0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	ee07 3a90 	vmov	s15, r3
 8003bd8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003bdc:	edd7 6a07 	vldr	s13, [r7, #28]
 8003be0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003be4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003be8:	ee17 3a90 	vmov	r3, s15
 8003bec:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003bee:	e005      	b.n	8003bfc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	61bb      	str	r3, [r7, #24]
      break;
 8003bf4:	e002      	b.n	8003bfc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003bf6:	4b07      	ldr	r3, [pc, #28]	; (8003c14 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003bf8:	61bb      	str	r3, [r7, #24]
      break;
 8003bfa:	bf00      	nop
  }

  return sysclockfreq;
 8003bfc:	69bb      	ldr	r3, [r7, #24]
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3724      	adds	r7, #36	; 0x24
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop
 8003c0c:	58024400 	.word	0x58024400
 8003c10:	03d09000 	.word	0x03d09000
 8003c14:	003d0900 	.word	0x003d0900
 8003c18:	007a1200 	.word	0x007a1200
 8003c1c:	46000000 	.word	0x46000000
 8003c20:	4c742400 	.word	0x4c742400
 8003c24:	4a742400 	.word	0x4a742400
 8003c28:	4af42400 	.word	0x4af42400

08003c2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003c32:	f7ff fe81 	bl	8003938 <HAL_RCC_GetSysClockFreq>
 8003c36:	4602      	mov	r2, r0
 8003c38:	4b10      	ldr	r3, [pc, #64]	; (8003c7c <HAL_RCC_GetHCLKFreq+0x50>)
 8003c3a:	699b      	ldr	r3, [r3, #24]
 8003c3c:	0a1b      	lsrs	r3, r3, #8
 8003c3e:	f003 030f 	and.w	r3, r3, #15
 8003c42:	490f      	ldr	r1, [pc, #60]	; (8003c80 <HAL_RCC_GetHCLKFreq+0x54>)
 8003c44:	5ccb      	ldrb	r3, [r1, r3]
 8003c46:	f003 031f 	and.w	r3, r3, #31
 8003c4a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c4e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003c50:	4b0a      	ldr	r3, [pc, #40]	; (8003c7c <HAL_RCC_GetHCLKFreq+0x50>)
 8003c52:	699b      	ldr	r3, [r3, #24]
 8003c54:	f003 030f 	and.w	r3, r3, #15
 8003c58:	4a09      	ldr	r2, [pc, #36]	; (8003c80 <HAL_RCC_GetHCLKFreq+0x54>)
 8003c5a:	5cd3      	ldrb	r3, [r2, r3]
 8003c5c:	f003 031f 	and.w	r3, r3, #31
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	fa22 f303 	lsr.w	r3, r2, r3
 8003c66:	4a07      	ldr	r2, [pc, #28]	; (8003c84 <HAL_RCC_GetHCLKFreq+0x58>)
 8003c68:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003c6a:	4a07      	ldr	r2, [pc, #28]	; (8003c88 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003c70:	4b04      	ldr	r3, [pc, #16]	; (8003c84 <HAL_RCC_GetHCLKFreq+0x58>)
 8003c72:	681b      	ldr	r3, [r3, #0]
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3708      	adds	r7, #8
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	58024400 	.word	0x58024400
 8003c80:	08006c98 	.word	0x08006c98
 8003c84:	24000004 	.word	0x24000004
 8003c88:	24000000 	.word	0x24000000

08003c8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003c90:	f7ff ffcc 	bl	8003c2c <HAL_RCC_GetHCLKFreq>
 8003c94:	4602      	mov	r2, r0
 8003c96:	4b06      	ldr	r3, [pc, #24]	; (8003cb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c98:	69db      	ldr	r3, [r3, #28]
 8003c9a:	091b      	lsrs	r3, r3, #4
 8003c9c:	f003 0307 	and.w	r3, r3, #7
 8003ca0:	4904      	ldr	r1, [pc, #16]	; (8003cb4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003ca2:	5ccb      	ldrb	r3, [r1, r3]
 8003ca4:	f003 031f 	and.w	r3, r3, #31
 8003ca8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	58024400 	.word	0x58024400
 8003cb4:	08006c98 	.word	0x08006c98

08003cb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003cbc:	f7ff ffb6 	bl	8003c2c <HAL_RCC_GetHCLKFreq>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	4b06      	ldr	r3, [pc, #24]	; (8003cdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cc4:	69db      	ldr	r3, [r3, #28]
 8003cc6:	0a1b      	lsrs	r3, r3, #8
 8003cc8:	f003 0307 	and.w	r3, r3, #7
 8003ccc:	4904      	ldr	r1, [pc, #16]	; (8003ce0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003cce:	5ccb      	ldrb	r3, [r1, r3]
 8003cd0:	f003 031f 	and.w	r3, r3, #31
 8003cd4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	58024400 	.word	0x58024400
 8003ce0:	08006c98 	.word	0x08006c98

08003ce4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ce4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ce8:	b0c6      	sub	sp, #280	; 0x118
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003cfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d04:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003d08:	2500      	movs	r5, #0
 8003d0a:	ea54 0305 	orrs.w	r3, r4, r5
 8003d0e:	d049      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003d10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d16:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d1a:	d02f      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003d1c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d20:	d828      	bhi.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003d22:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d26:	d01a      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003d28:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d2c:	d822      	bhi.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d003      	beq.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003d32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d36:	d007      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003d38:	e01c      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d3a:	4bab      	ldr	r3, [pc, #684]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d3e:	4aaa      	ldr	r2, [pc, #680]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003d40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d44:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003d46:	e01a      	b.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003d48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d4c:	3308      	adds	r3, #8
 8003d4e:	2102      	movs	r1, #2
 8003d50:	4618      	mov	r0, r3
 8003d52:	f001 fc25 	bl	80055a0 <RCCEx_PLL2_Config>
 8003d56:	4603      	mov	r3, r0
 8003d58:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003d5c:	e00f      	b.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003d5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d62:	3328      	adds	r3, #40	; 0x28
 8003d64:	2102      	movs	r1, #2
 8003d66:	4618      	mov	r0, r3
 8003d68:	f001 fccc 	bl	8005704 <RCCEx_PLL3_Config>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003d72:	e004      	b.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003d7a:	e000      	b.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003d7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d7e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d10a      	bne.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003d86:	4b98      	ldr	r3, [pc, #608]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003d88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d8a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003d8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d94:	4a94      	ldr	r2, [pc, #592]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003d96:	430b      	orrs	r3, r1
 8003d98:	6513      	str	r3, [r2, #80]	; 0x50
 8003d9a:	e003      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d9c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003da0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003da4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dac:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003db0:	f04f 0900 	mov.w	r9, #0
 8003db4:	ea58 0309 	orrs.w	r3, r8, r9
 8003db8:	d047      	beq.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003dba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dc0:	2b04      	cmp	r3, #4
 8003dc2:	d82a      	bhi.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003dc4:	a201      	add	r2, pc, #4	; (adr r2, 8003dcc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dca:	bf00      	nop
 8003dcc:	08003de1 	.word	0x08003de1
 8003dd0:	08003def 	.word	0x08003def
 8003dd4:	08003e05 	.word	0x08003e05
 8003dd8:	08003e23 	.word	0x08003e23
 8003ddc:	08003e23 	.word	0x08003e23
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003de0:	4b81      	ldr	r3, [pc, #516]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de4:	4a80      	ldr	r2, [pc, #512]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003de6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003dec:	e01a      	b.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003dee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003df2:	3308      	adds	r3, #8
 8003df4:	2100      	movs	r1, #0
 8003df6:	4618      	mov	r0, r3
 8003df8:	f001 fbd2 	bl	80055a0 <RCCEx_PLL2_Config>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003e02:	e00f      	b.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003e04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e08:	3328      	adds	r3, #40	; 0x28
 8003e0a:	2100      	movs	r1, #0
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f001 fc79 	bl	8005704 <RCCEx_PLL3_Config>
 8003e12:	4603      	mov	r3, r0
 8003e14:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003e18:	e004      	b.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003e20:	e000      	b.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003e22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e24:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d10a      	bne.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e2c:	4b6e      	ldr	r3, [pc, #440]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003e2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e30:	f023 0107 	bic.w	r1, r3, #7
 8003e34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e3a:	4a6b      	ldr	r2, [pc, #428]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003e3c:	430b      	orrs	r3, r1
 8003e3e:	6513      	str	r3, [r2, #80]	; 0x50
 8003e40:	e003      	b.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e42:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003e46:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003e4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e52:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 8003e56:	f04f 0b00 	mov.w	fp, #0
 8003e5a:	ea5a 030b 	orrs.w	r3, sl, fp
 8003e5e:	d05b      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003e60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e64:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003e68:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8003e6c:	d03b      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8003e6e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8003e72:	d834      	bhi.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003e74:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e78:	d037      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003e7a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e7e:	d82e      	bhi.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003e80:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003e84:	d033      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003e86:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003e8a:	d828      	bhi.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003e8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e90:	d01a      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8003e92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e96:	d822      	bhi.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d003      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8003e9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ea0:	d007      	beq.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8003ea2:	e01c      	b.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ea4:	4b50      	ldr	r3, [pc, #320]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea8:	4a4f      	ldr	r2, [pc, #316]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003eaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003eae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003eb0:	e01e      	b.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003eb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003eb6:	3308      	adds	r3, #8
 8003eb8:	2100      	movs	r1, #0
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f001 fb70 	bl	80055a0 <RCCEx_PLL2_Config>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003ec6:	e013      	b.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ec8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ecc:	3328      	adds	r3, #40	; 0x28
 8003ece:	2100      	movs	r1, #0
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f001 fc17 	bl	8005704 <RCCEx_PLL3_Config>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003edc:	e008      	b.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003ee4:	e004      	b.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003ee6:	bf00      	nop
 8003ee8:	e002      	b.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003eea:	bf00      	nop
 8003eec:	e000      	b.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003eee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ef0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d10b      	bne.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003ef8:	4b3b      	ldr	r3, [pc, #236]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003efc:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8003f00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f04:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003f08:	4a37      	ldr	r2, [pc, #220]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003f0a:	430b      	orrs	r3, r1
 8003f0c:	6593      	str	r3, [r2, #88]	; 0x58
 8003f0e:	e003      	b.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f10:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003f14:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003f18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f20:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003f24:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003f28:	2300      	movs	r3, #0
 8003f2a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003f2e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003f32:	460b      	mov	r3, r1
 8003f34:	4313      	orrs	r3, r2
 8003f36:	d05d      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003f38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f3c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003f40:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003f44:	d03b      	beq.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003f46:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003f4a:	d834      	bhi.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003f4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f50:	d037      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8003f52:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f56:	d82e      	bhi.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003f58:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003f5c:	d033      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8003f5e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003f62:	d828      	bhi.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003f64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f68:	d01a      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8003f6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f6e:	d822      	bhi.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d003      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003f74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f78:	d007      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003f7a:	e01c      	b.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f7c:	4b1a      	ldr	r3, [pc, #104]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f80:	4a19      	ldr	r2, [pc, #100]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003f82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003f88:	e01e      	b.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f8e:	3308      	adds	r3, #8
 8003f90:	2100      	movs	r1, #0
 8003f92:	4618      	mov	r0, r3
 8003f94:	f001 fb04 	bl	80055a0 <RCCEx_PLL2_Config>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003f9e:	e013      	b.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003fa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003fa4:	3328      	adds	r3, #40	; 0x28
 8003fa6:	2100      	movs	r1, #0
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f001 fbab 	bl	8005704 <RCCEx_PLL3_Config>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003fb4:	e008      	b.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003fbc:	e004      	b.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003fbe:	bf00      	nop
 8003fc0:	e002      	b.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003fc2:	bf00      	nop
 8003fc4:	e000      	b.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003fc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fc8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d10d      	bne.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003fd0:	4b05      	ldr	r3, [pc, #20]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fd4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003fd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003fdc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003fe0:	4a01      	ldr	r2, [pc, #4]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003fe2:	430b      	orrs	r3, r1
 8003fe4:	6593      	str	r3, [r2, #88]	; 0x58
 8003fe6:	e005      	b.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003fe8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003ff0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003ff4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ffc:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8004000:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004004:	2300      	movs	r3, #0
 8004006:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800400a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800400e:	460b      	mov	r3, r1
 8004010:	4313      	orrs	r3, r2
 8004012:	d03a      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8004014:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800401a:	2b30      	cmp	r3, #48	; 0x30
 800401c:	d01f      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800401e:	2b30      	cmp	r3, #48	; 0x30
 8004020:	d819      	bhi.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8004022:	2b20      	cmp	r3, #32
 8004024:	d00c      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004026:	2b20      	cmp	r3, #32
 8004028:	d815      	bhi.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800402a:	2b00      	cmp	r3, #0
 800402c:	d019      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800402e:	2b10      	cmp	r3, #16
 8004030:	d111      	bne.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004032:	4baa      	ldr	r3, [pc, #680]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004036:	4aa9      	ldr	r2, [pc, #676]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004038:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800403c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800403e:	e011      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004040:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004044:	3308      	adds	r3, #8
 8004046:	2102      	movs	r1, #2
 8004048:	4618      	mov	r0, r3
 800404a:	f001 faa9 	bl	80055a0 <RCCEx_PLL2_Config>
 800404e:	4603      	mov	r3, r0
 8004050:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004054:	e006      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800405c:	e002      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800405e:	bf00      	nop
 8004060:	e000      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8004062:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004064:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004068:	2b00      	cmp	r3, #0
 800406a:	d10a      	bne.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800406c:	4b9b      	ldr	r3, [pc, #620]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800406e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004070:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8004074:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800407a:	4a98      	ldr	r2, [pc, #608]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800407c:	430b      	orrs	r3, r1
 800407e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004080:	e003      	b.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004082:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004086:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800408a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800408e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004092:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8004096:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800409a:	2300      	movs	r3, #0
 800409c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80040a0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80040a4:	460b      	mov	r3, r1
 80040a6:	4313      	orrs	r3, r2
 80040a8:	d051      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80040aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040b4:	d035      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80040b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040ba:	d82e      	bhi.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x436>
 80040bc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80040c0:	d031      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x442>
 80040c2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80040c6:	d828      	bhi.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x436>
 80040c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040cc:	d01a      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80040ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040d2:	d822      	bhi.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x436>
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d003      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80040d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040dc:	d007      	beq.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80040de:	e01c      	b.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040e0:	4b7e      	ldr	r3, [pc, #504]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80040e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e4:	4a7d      	ldr	r2, [pc, #500]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80040e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80040ec:	e01c      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80040ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040f2:	3308      	adds	r3, #8
 80040f4:	2100      	movs	r1, #0
 80040f6:	4618      	mov	r0, r3
 80040f8:	f001 fa52 	bl	80055a0 <RCCEx_PLL2_Config>
 80040fc:	4603      	mov	r3, r0
 80040fe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004102:	e011      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004104:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004108:	3328      	adds	r3, #40	; 0x28
 800410a:	2100      	movs	r1, #0
 800410c:	4618      	mov	r0, r3
 800410e:	f001 faf9 	bl	8005704 <RCCEx_PLL3_Config>
 8004112:	4603      	mov	r3, r0
 8004114:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004118:	e006      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004120:	e002      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8004122:	bf00      	nop
 8004124:	e000      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8004126:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004128:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800412c:	2b00      	cmp	r3, #0
 800412e:	d10a      	bne.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004130:	4b6a      	ldr	r3, [pc, #424]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004132:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004134:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004138:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800413c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800413e:	4a67      	ldr	r2, [pc, #412]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004140:	430b      	orrs	r3, r1
 8004142:	6513      	str	r3, [r2, #80]	; 0x50
 8004144:	e003      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004146:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800414a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800414e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004156:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800415a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800415e:	2300      	movs	r3, #0
 8004160:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004164:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8004168:	460b      	mov	r3, r1
 800416a:	4313      	orrs	r3, r2
 800416c:	d053      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800416e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004172:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004174:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004178:	d033      	beq.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800417a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800417e:	d82c      	bhi.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004180:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004184:	d02f      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8004186:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800418a:	d826      	bhi.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800418c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004190:	d02b      	beq.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x506>
 8004192:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004196:	d820      	bhi.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004198:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800419c:	d012      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800419e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041a2:	d81a      	bhi.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d022      	beq.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80041a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041ac:	d115      	bne.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80041ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041b2:	3308      	adds	r3, #8
 80041b4:	2101      	movs	r1, #1
 80041b6:	4618      	mov	r0, r3
 80041b8:	f001 f9f2 	bl	80055a0 <RCCEx_PLL2_Config>
 80041bc:	4603      	mov	r3, r0
 80041be:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80041c2:	e015      	b.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80041c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041c8:	3328      	adds	r3, #40	; 0x28
 80041ca:	2101      	movs	r1, #1
 80041cc:	4618      	mov	r0, r3
 80041ce:	f001 fa99 	bl	8005704 <RCCEx_PLL3_Config>
 80041d2:	4603      	mov	r3, r0
 80041d4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80041d8:	e00a      	b.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80041e0:	e006      	b.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80041e2:	bf00      	nop
 80041e4:	e004      	b.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80041e6:	bf00      	nop
 80041e8:	e002      	b.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80041ea:	bf00      	nop
 80041ec:	e000      	b.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80041ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041f0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d10a      	bne.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80041f8:	4b38      	ldr	r3, [pc, #224]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80041fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041fc:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004200:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004204:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004206:	4a35      	ldr	r2, [pc, #212]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004208:	430b      	orrs	r3, r1
 800420a:	6513      	str	r3, [r2, #80]	; 0x50
 800420c:	e003      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800420e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004212:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004216:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800421a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800421e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004222:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004226:	2300      	movs	r3, #0
 8004228:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800422c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004230:	460b      	mov	r3, r1
 8004232:	4313      	orrs	r3, r2
 8004234:	d058      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004236:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800423a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800423e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004242:	d033      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8004244:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004248:	d82c      	bhi.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800424a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800424e:	d02f      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8004250:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004254:	d826      	bhi.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004256:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800425a:	d02b      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800425c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004260:	d820      	bhi.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004262:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004266:	d012      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8004268:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800426c:	d81a      	bhi.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800426e:	2b00      	cmp	r3, #0
 8004270:	d022      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004272:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004276:	d115      	bne.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004278:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800427c:	3308      	adds	r3, #8
 800427e:	2101      	movs	r1, #1
 8004280:	4618      	mov	r0, r3
 8004282:	f001 f98d 	bl	80055a0 <RCCEx_PLL2_Config>
 8004286:	4603      	mov	r3, r0
 8004288:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800428c:	e015      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800428e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004292:	3328      	adds	r3, #40	; 0x28
 8004294:	2101      	movs	r1, #1
 8004296:	4618      	mov	r0, r3
 8004298:	f001 fa34 	bl	8005704 <RCCEx_PLL3_Config>
 800429c:	4603      	mov	r3, r0
 800429e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80042a2:	e00a      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80042aa:	e006      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80042ac:	bf00      	nop
 80042ae:	e004      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80042b0:	bf00      	nop
 80042b2:	e002      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80042b4:	bf00      	nop
 80042b6:	e000      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80042b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042ba:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d10e      	bne.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80042c2:	4b06      	ldr	r3, [pc, #24]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80042c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042c6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80042ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042ce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80042d2:	4a02      	ldr	r2, [pc, #8]	; (80042dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80042d4:	430b      	orrs	r3, r1
 80042d6:	6593      	str	r3, [r2, #88]	; 0x58
 80042d8:	e006      	b.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80042da:	bf00      	nop
 80042dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042e0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80042e4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80042e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80042f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80042f8:	2300      	movs	r3, #0
 80042fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80042fe:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8004302:	460b      	mov	r3, r1
 8004304:	4313      	orrs	r3, r2
 8004306:	d037      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004308:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800430c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800430e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004312:	d00e      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8004314:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004318:	d816      	bhi.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800431a:	2b00      	cmp	r3, #0
 800431c:	d018      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800431e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004322:	d111      	bne.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004324:	4bc4      	ldr	r3, [pc, #784]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004328:	4ac3      	ldr	r2, [pc, #780]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800432a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800432e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004330:	e00f      	b.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004332:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004336:	3308      	adds	r3, #8
 8004338:	2101      	movs	r1, #1
 800433a:	4618      	mov	r0, r3
 800433c:	f001 f930 	bl	80055a0 <RCCEx_PLL2_Config>
 8004340:	4603      	mov	r3, r0
 8004342:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004346:	e004      	b.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800434e:	e000      	b.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8004350:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004352:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004356:	2b00      	cmp	r3, #0
 8004358:	d10a      	bne.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800435a:	4bb7      	ldr	r3, [pc, #732]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800435c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800435e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004362:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004366:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004368:	4ab3      	ldr	r2, [pc, #716]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800436a:	430b      	orrs	r3, r1
 800436c:	6513      	str	r3, [r2, #80]	; 0x50
 800436e:	e003      	b.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004370:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004374:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004378:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800437c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004380:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8004384:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004388:	2300      	movs	r3, #0
 800438a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800438e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004392:	460b      	mov	r3, r1
 8004394:	4313      	orrs	r3, r2
 8004396:	d039      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004398:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800439c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800439e:	2b03      	cmp	r3, #3
 80043a0:	d81c      	bhi.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80043a2:	a201      	add	r2, pc, #4	; (adr r2, 80043a8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80043a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043a8:	080043e5 	.word	0x080043e5
 80043ac:	080043b9 	.word	0x080043b9
 80043b0:	080043c7 	.word	0x080043c7
 80043b4:	080043e5 	.word	0x080043e5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043b8:	4b9f      	ldr	r3, [pc, #636]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80043ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043bc:	4a9e      	ldr	r2, [pc, #632]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80043be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80043c4:	e00f      	b.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80043c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043ca:	3308      	adds	r3, #8
 80043cc:	2102      	movs	r1, #2
 80043ce:	4618      	mov	r0, r3
 80043d0:	f001 f8e6 	bl	80055a0 <RCCEx_PLL2_Config>
 80043d4:	4603      	mov	r3, r0
 80043d6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80043da:	e004      	b.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80043e2:	e000      	b.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80043e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043e6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d10a      	bne.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80043ee:	4b92      	ldr	r3, [pc, #584]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80043f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043f2:	f023 0103 	bic.w	r1, r3, #3
 80043f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043fc:	4a8e      	ldr	r2, [pc, #568]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80043fe:	430b      	orrs	r3, r1
 8004400:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004402:	e003      	b.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004404:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004408:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800440c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004414:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004418:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800441c:	2300      	movs	r3, #0
 800441e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004422:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004426:	460b      	mov	r3, r1
 8004428:	4313      	orrs	r3, r2
 800442a:	f000 8099 	beq.w	8004560 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800442e:	4b83      	ldr	r3, [pc, #524]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a82      	ldr	r2, [pc, #520]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004434:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004438:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800443a:	f7fc ff71 	bl	8001320 <HAL_GetTick>
 800443e:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004442:	e00b      	b.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004444:	f7fc ff6c 	bl	8001320 <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	2b64      	cmp	r3, #100	; 0x64
 8004452:	d903      	bls.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800445a:	e005      	b.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800445c:	4b77      	ldr	r3, [pc, #476]	; (800463c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004464:	2b00      	cmp	r3, #0
 8004466:	d0ed      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8004468:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800446c:	2b00      	cmp	r3, #0
 800446e:	d173      	bne.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004470:	4b71      	ldr	r3, [pc, #452]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004472:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004474:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004478:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800447c:	4053      	eors	r3, r2
 800447e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004482:	2b00      	cmp	r3, #0
 8004484:	d015      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004486:	4b6c      	ldr	r3, [pc, #432]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800448a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800448e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004492:	4b69      	ldr	r3, [pc, #420]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004496:	4a68      	ldr	r2, [pc, #416]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004498:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800449c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800449e:	4b66      	ldr	r3, [pc, #408]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80044a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044a2:	4a65      	ldr	r2, [pc, #404]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80044a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044a8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80044aa:	4a63      	ldr	r2, [pc, #396]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80044ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044b0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80044b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80044ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044be:	d118      	bne.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044c0:	f7fc ff2e 	bl	8001320 <HAL_GetTick>
 80044c4:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80044c8:	e00d      	b.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044ca:	f7fc ff29 	bl	8001320 <HAL_GetTick>
 80044ce:	4602      	mov	r2, r0
 80044d0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80044d4:	1ad2      	subs	r2, r2, r3
 80044d6:	f241 3388 	movw	r3, #5000	; 0x1388
 80044da:	429a      	cmp	r2, r3
 80044dc:	d903      	bls.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 80044e4:	e005      	b.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80044e6:	4b54      	ldr	r3, [pc, #336]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80044e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ea:	f003 0302 	and.w	r3, r3, #2
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d0eb      	beq.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80044f2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d129      	bne.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004502:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004506:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800450a:	d10e      	bne.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x846>
 800450c:	4b4a      	ldr	r3, [pc, #296]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800450e:	691b      	ldr	r3, [r3, #16]
 8004510:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004514:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004518:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800451c:	091a      	lsrs	r2, r3, #4
 800451e:	4b48      	ldr	r3, [pc, #288]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004520:	4013      	ands	r3, r2
 8004522:	4a45      	ldr	r2, [pc, #276]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004524:	430b      	orrs	r3, r1
 8004526:	6113      	str	r3, [r2, #16]
 8004528:	e005      	b.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800452a:	4b43      	ldr	r3, [pc, #268]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800452c:	691b      	ldr	r3, [r3, #16]
 800452e:	4a42      	ldr	r2, [pc, #264]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004530:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004534:	6113      	str	r3, [r2, #16]
 8004536:	4b40      	ldr	r3, [pc, #256]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004538:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800453a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800453e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004542:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004546:	4a3c      	ldr	r2, [pc, #240]	; (8004638 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004548:	430b      	orrs	r3, r1
 800454a:	6713      	str	r3, [r2, #112]	; 0x70
 800454c:	e008      	b.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800454e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004552:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8004556:	e003      	b.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004558:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800455c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004560:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004568:	f002 0301 	and.w	r3, r2, #1
 800456c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004570:	2300      	movs	r3, #0
 8004572:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004576:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800457a:	460b      	mov	r3, r1
 800457c:	4313      	orrs	r3, r2
 800457e:	f000 808f 	beq.w	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004582:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004586:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004588:	2b28      	cmp	r3, #40	; 0x28
 800458a:	d871      	bhi.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800458c:	a201      	add	r2, pc, #4	; (adr r2, 8004594 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800458e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004592:	bf00      	nop
 8004594:	08004679 	.word	0x08004679
 8004598:	08004671 	.word	0x08004671
 800459c:	08004671 	.word	0x08004671
 80045a0:	08004671 	.word	0x08004671
 80045a4:	08004671 	.word	0x08004671
 80045a8:	08004671 	.word	0x08004671
 80045ac:	08004671 	.word	0x08004671
 80045b0:	08004671 	.word	0x08004671
 80045b4:	08004645 	.word	0x08004645
 80045b8:	08004671 	.word	0x08004671
 80045bc:	08004671 	.word	0x08004671
 80045c0:	08004671 	.word	0x08004671
 80045c4:	08004671 	.word	0x08004671
 80045c8:	08004671 	.word	0x08004671
 80045cc:	08004671 	.word	0x08004671
 80045d0:	08004671 	.word	0x08004671
 80045d4:	0800465b 	.word	0x0800465b
 80045d8:	08004671 	.word	0x08004671
 80045dc:	08004671 	.word	0x08004671
 80045e0:	08004671 	.word	0x08004671
 80045e4:	08004671 	.word	0x08004671
 80045e8:	08004671 	.word	0x08004671
 80045ec:	08004671 	.word	0x08004671
 80045f0:	08004671 	.word	0x08004671
 80045f4:	08004679 	.word	0x08004679
 80045f8:	08004671 	.word	0x08004671
 80045fc:	08004671 	.word	0x08004671
 8004600:	08004671 	.word	0x08004671
 8004604:	08004671 	.word	0x08004671
 8004608:	08004671 	.word	0x08004671
 800460c:	08004671 	.word	0x08004671
 8004610:	08004671 	.word	0x08004671
 8004614:	08004679 	.word	0x08004679
 8004618:	08004671 	.word	0x08004671
 800461c:	08004671 	.word	0x08004671
 8004620:	08004671 	.word	0x08004671
 8004624:	08004671 	.word	0x08004671
 8004628:	08004671 	.word	0x08004671
 800462c:	08004671 	.word	0x08004671
 8004630:	08004671 	.word	0x08004671
 8004634:	08004679 	.word	0x08004679
 8004638:	58024400 	.word	0x58024400
 800463c:	58024800 	.word	0x58024800
 8004640:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004644:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004648:	3308      	adds	r3, #8
 800464a:	2101      	movs	r1, #1
 800464c:	4618      	mov	r0, r3
 800464e:	f000 ffa7 	bl	80055a0 <RCCEx_PLL2_Config>
 8004652:	4603      	mov	r3, r0
 8004654:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004658:	e00f      	b.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800465a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800465e:	3328      	adds	r3, #40	; 0x28
 8004660:	2101      	movs	r1, #1
 8004662:	4618      	mov	r0, r3
 8004664:	f001 f84e 	bl	8005704 <RCCEx_PLL3_Config>
 8004668:	4603      	mov	r3, r0
 800466a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800466e:	e004      	b.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004676:	e000      	b.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8004678:	bf00      	nop
    }

    if (ret == HAL_OK)
 800467a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800467e:	2b00      	cmp	r3, #0
 8004680:	d10a      	bne.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004682:	4bbf      	ldr	r3, [pc, #764]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004686:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800468a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800468e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004690:	4abb      	ldr	r2, [pc, #748]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004692:	430b      	orrs	r3, r1
 8004694:	6553      	str	r3, [r2, #84]	; 0x54
 8004696:	e003      	b.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004698:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800469c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80046a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a8:	f002 0302 	and.w	r3, r2, #2
 80046ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80046b0:	2300      	movs	r3, #0
 80046b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80046b6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80046ba:	460b      	mov	r3, r1
 80046bc:	4313      	orrs	r3, r2
 80046be:	d041      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80046c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046c6:	2b05      	cmp	r3, #5
 80046c8:	d824      	bhi.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80046ca:	a201      	add	r2, pc, #4	; (adr r2, 80046d0 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80046cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046d0:	0800471d 	.word	0x0800471d
 80046d4:	080046e9 	.word	0x080046e9
 80046d8:	080046ff 	.word	0x080046ff
 80046dc:	0800471d 	.word	0x0800471d
 80046e0:	0800471d 	.word	0x0800471d
 80046e4:	0800471d 	.word	0x0800471d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80046e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046ec:	3308      	adds	r3, #8
 80046ee:	2101      	movs	r1, #1
 80046f0:	4618      	mov	r0, r3
 80046f2:	f000 ff55 	bl	80055a0 <RCCEx_PLL2_Config>
 80046f6:	4603      	mov	r3, r0
 80046f8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80046fc:	e00f      	b.n	800471e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80046fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004702:	3328      	adds	r3, #40	; 0x28
 8004704:	2101      	movs	r1, #1
 8004706:	4618      	mov	r0, r3
 8004708:	f000 fffc 	bl	8005704 <RCCEx_PLL3_Config>
 800470c:	4603      	mov	r3, r0
 800470e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004712:	e004      	b.n	800471e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800471a:	e000      	b.n	800471e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800471c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800471e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004722:	2b00      	cmp	r3, #0
 8004724:	d10a      	bne.n	800473c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004726:	4b96      	ldr	r3, [pc, #600]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800472a:	f023 0107 	bic.w	r1, r3, #7
 800472e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004732:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004734:	4a92      	ldr	r2, [pc, #584]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004736:	430b      	orrs	r3, r1
 8004738:	6553      	str	r3, [r2, #84]	; 0x54
 800473a:	e003      	b.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800473c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004740:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004744:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800474c:	f002 0304 	and.w	r3, r2, #4
 8004750:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004754:	2300      	movs	r3, #0
 8004756:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800475a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800475e:	460b      	mov	r3, r1
 8004760:	4313      	orrs	r3, r2
 8004762:	d044      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004764:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004768:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800476c:	2b05      	cmp	r3, #5
 800476e:	d825      	bhi.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8004770:	a201      	add	r2, pc, #4	; (adr r2, 8004778 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8004772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004776:	bf00      	nop
 8004778:	080047c5 	.word	0x080047c5
 800477c:	08004791 	.word	0x08004791
 8004780:	080047a7 	.word	0x080047a7
 8004784:	080047c5 	.word	0x080047c5
 8004788:	080047c5 	.word	0x080047c5
 800478c:	080047c5 	.word	0x080047c5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004790:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004794:	3308      	adds	r3, #8
 8004796:	2101      	movs	r1, #1
 8004798:	4618      	mov	r0, r3
 800479a:	f000 ff01 	bl	80055a0 <RCCEx_PLL2_Config>
 800479e:	4603      	mov	r3, r0
 80047a0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80047a4:	e00f      	b.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80047a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047aa:	3328      	adds	r3, #40	; 0x28
 80047ac:	2101      	movs	r1, #1
 80047ae:	4618      	mov	r0, r3
 80047b0:	f000 ffa8 	bl	8005704 <RCCEx_PLL3_Config>
 80047b4:	4603      	mov	r3, r0
 80047b6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80047ba:	e004      	b.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80047c2:	e000      	b.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80047c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047c6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d10b      	bne.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80047ce:	4b6c      	ldr	r3, [pc, #432]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80047d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047d2:	f023 0107 	bic.w	r1, r3, #7
 80047d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047de:	4a68      	ldr	r2, [pc, #416]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80047e0:	430b      	orrs	r3, r1
 80047e2:	6593      	str	r3, [r2, #88]	; 0x58
 80047e4:	e003      	b.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047e6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80047ea:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80047ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80047f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f6:	f002 0320 	and.w	r3, r2, #32
 80047fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80047fe:	2300      	movs	r3, #0
 8004800:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004804:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004808:	460b      	mov	r3, r1
 800480a:	4313      	orrs	r3, r2
 800480c:	d055      	beq.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800480e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004812:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004816:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800481a:	d033      	beq.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800481c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004820:	d82c      	bhi.n	800487c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004822:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004826:	d02f      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8004828:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800482c:	d826      	bhi.n	800487c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800482e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004832:	d02b      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8004834:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004838:	d820      	bhi.n	800487c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800483a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800483e:	d012      	beq.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8004840:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004844:	d81a      	bhi.n	800487c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004846:	2b00      	cmp	r3, #0
 8004848:	d022      	beq.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800484a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800484e:	d115      	bne.n	800487c <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004850:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004854:	3308      	adds	r3, #8
 8004856:	2100      	movs	r1, #0
 8004858:	4618      	mov	r0, r3
 800485a:	f000 fea1 	bl	80055a0 <RCCEx_PLL2_Config>
 800485e:	4603      	mov	r3, r0
 8004860:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004864:	e015      	b.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004866:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800486a:	3328      	adds	r3, #40	; 0x28
 800486c:	2102      	movs	r1, #2
 800486e:	4618      	mov	r0, r3
 8004870:	f000 ff48 	bl	8005704 <RCCEx_PLL3_Config>
 8004874:	4603      	mov	r3, r0
 8004876:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800487a:	e00a      	b.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004882:	e006      	b.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004884:	bf00      	nop
 8004886:	e004      	b.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004888:	bf00      	nop
 800488a:	e002      	b.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800488c:	bf00      	nop
 800488e:	e000      	b.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004890:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004892:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004896:	2b00      	cmp	r3, #0
 8004898:	d10b      	bne.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800489a:	4b39      	ldr	r3, [pc, #228]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800489c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800489e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80048a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048aa:	4a35      	ldr	r2, [pc, #212]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80048ac:	430b      	orrs	r3, r1
 80048ae:	6553      	str	r3, [r2, #84]	; 0x54
 80048b0:	e003      	b.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048b2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80048b6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80048ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80048c6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80048ca:	2300      	movs	r3, #0
 80048cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80048d0:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80048d4:	460b      	mov	r3, r1
 80048d6:	4313      	orrs	r3, r2
 80048d8:	d058      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80048da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80048e2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80048e6:	d033      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80048e8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80048ec:	d82c      	bhi.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80048ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048f2:	d02f      	beq.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80048f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048f8:	d826      	bhi.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80048fa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80048fe:	d02b      	beq.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8004900:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004904:	d820      	bhi.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004906:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800490a:	d012      	beq.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800490c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004910:	d81a      	bhi.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004912:	2b00      	cmp	r3, #0
 8004914:	d022      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8004916:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800491a:	d115      	bne.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800491c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004920:	3308      	adds	r3, #8
 8004922:	2100      	movs	r1, #0
 8004924:	4618      	mov	r0, r3
 8004926:	f000 fe3b 	bl	80055a0 <RCCEx_PLL2_Config>
 800492a:	4603      	mov	r3, r0
 800492c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004930:	e015      	b.n	800495e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004932:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004936:	3328      	adds	r3, #40	; 0x28
 8004938:	2102      	movs	r1, #2
 800493a:	4618      	mov	r0, r3
 800493c:	f000 fee2 	bl	8005704 <RCCEx_PLL3_Config>
 8004940:	4603      	mov	r3, r0
 8004942:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004946:	e00a      	b.n	800495e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800494e:	e006      	b.n	800495e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004950:	bf00      	nop
 8004952:	e004      	b.n	800495e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004954:	bf00      	nop
 8004956:	e002      	b.n	800495e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004958:	bf00      	nop
 800495a:	e000      	b.n	800495e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800495c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800495e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004962:	2b00      	cmp	r3, #0
 8004964:	d10e      	bne.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004966:	4b06      	ldr	r3, [pc, #24]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800496a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800496e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004972:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004976:	4a02      	ldr	r2, [pc, #8]	; (8004980 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004978:	430b      	orrs	r3, r1
 800497a:	6593      	str	r3, [r2, #88]	; 0x58
 800497c:	e006      	b.n	800498c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800497e:	bf00      	nop
 8004980:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004984:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004988:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800498c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004994:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004998:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800499c:	2300      	movs	r3, #0
 800499e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80049a2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80049a6:	460b      	mov	r3, r1
 80049a8:	4313      	orrs	r3, r2
 80049aa:	d055      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80049ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80049b4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80049b8:	d033      	beq.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80049ba:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80049be:	d82c      	bhi.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80049c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049c4:	d02f      	beq.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80049c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049ca:	d826      	bhi.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80049cc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80049d0:	d02b      	beq.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80049d2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80049d6:	d820      	bhi.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80049d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049dc:	d012      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80049de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049e2:	d81a      	bhi.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d022      	beq.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80049e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049ec:	d115      	bne.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80049ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049f2:	3308      	adds	r3, #8
 80049f4:	2100      	movs	r1, #0
 80049f6:	4618      	mov	r0, r3
 80049f8:	f000 fdd2 	bl	80055a0 <RCCEx_PLL2_Config>
 80049fc:	4603      	mov	r3, r0
 80049fe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004a02:	e015      	b.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004a04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a08:	3328      	adds	r3, #40	; 0x28
 8004a0a:	2102      	movs	r1, #2
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f000 fe79 	bl	8005704 <RCCEx_PLL3_Config>
 8004a12:	4603      	mov	r3, r0
 8004a14:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004a18:	e00a      	b.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004a20:	e006      	b.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004a22:	bf00      	nop
 8004a24:	e004      	b.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004a26:	bf00      	nop
 8004a28:	e002      	b.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004a2a:	bf00      	nop
 8004a2c:	e000      	b.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004a2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a30:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d10b      	bne.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004a38:	4ba0      	ldr	r3, [pc, #640]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a3c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004a40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a44:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a48:	4a9c      	ldr	r2, [pc, #624]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004a4a:	430b      	orrs	r3, r1
 8004a4c:	6593      	str	r3, [r2, #88]	; 0x58
 8004a4e:	e003      	b.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a50:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004a54:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8004a58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a60:	f002 0308 	and.w	r3, r2, #8
 8004a64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004a68:	2300      	movs	r3, #0
 8004a6a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004a6e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004a72:	460b      	mov	r3, r1
 8004a74:	4313      	orrs	r3, r2
 8004a76:	d01e      	beq.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8004a78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a84:	d10c      	bne.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004a86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a8a:	3328      	adds	r3, #40	; 0x28
 8004a8c:	2102      	movs	r1, #2
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f000 fe38 	bl	8005704 <RCCEx_PLL3_Config>
 8004a94:	4603      	mov	r3, r0
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d002      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8004aa0:	4b86      	ldr	r3, [pc, #536]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aa4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004aa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004aac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ab0:	4a82      	ldr	r2, [pc, #520]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004ab2:	430b      	orrs	r3, r1
 8004ab4:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004ab6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004abe:	f002 0310 	and.w	r3, r2, #16
 8004ac2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004acc:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004ad0:	460b      	mov	r3, r1
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	d01e      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004ad6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ada:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ade:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ae2:	d10c      	bne.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004ae4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ae8:	3328      	adds	r3, #40	; 0x28
 8004aea:	2102      	movs	r1, #2
 8004aec:	4618      	mov	r0, r3
 8004aee:	f000 fe09 	bl	8005704 <RCCEx_PLL3_Config>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d002      	beq.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004afe:	4b6f      	ldr	r3, [pc, #444]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b02:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004b06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b0e:	4a6b      	ldr	r2, [pc, #428]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004b10:	430b      	orrs	r3, r1
 8004b12:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004b14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b1c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004b20:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b22:	2300      	movs	r3, #0
 8004b24:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004b26:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004b2a:	460b      	mov	r3, r1
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	d03e      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004b30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b34:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004b38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b3c:	d022      	beq.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004b3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b42:	d81b      	bhi.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d003      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8004b48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b4c:	d00b      	beq.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8004b4e:	e015      	b.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b54:	3308      	adds	r3, #8
 8004b56:	2100      	movs	r1, #0
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f000 fd21 	bl	80055a0 <RCCEx_PLL2_Config>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004b64:	e00f      	b.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004b66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b6a:	3328      	adds	r3, #40	; 0x28
 8004b6c:	2102      	movs	r1, #2
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f000 fdc8 	bl	8005704 <RCCEx_PLL3_Config>
 8004b74:	4603      	mov	r3, r0
 8004b76:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004b7a:	e004      	b.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004b82:	e000      	b.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8004b84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b86:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d10b      	bne.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b8e:	4b4b      	ldr	r3, [pc, #300]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b92:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004b96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b9a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004b9e:	4a47      	ldr	r2, [pc, #284]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004ba0:	430b      	orrs	r3, r1
 8004ba2:	6593      	str	r3, [r2, #88]	; 0x58
 8004ba4:	e003      	b.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ba6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004baa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004bae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004bba:	673b      	str	r3, [r7, #112]	; 0x70
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	677b      	str	r3, [r7, #116]	; 0x74
 8004bc0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004bc4:	460b      	mov	r3, r1
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	d03b      	beq.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004bca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bd2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004bd6:	d01f      	beq.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8004bd8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004bdc:	d818      	bhi.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8004bde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004be2:	d003      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8004be4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004be8:	d007      	beq.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8004bea:	e011      	b.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bec:	4b33      	ldr	r3, [pc, #204]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf0:	4a32      	ldr	r2, [pc, #200]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004bf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bf6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004bf8:	e00f      	b.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004bfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bfe:	3328      	adds	r3, #40	; 0x28
 8004c00:	2101      	movs	r1, #1
 8004c02:	4618      	mov	r0, r3
 8004c04:	f000 fd7e 	bl	8005704 <RCCEx_PLL3_Config>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8004c0e:	e004      	b.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004c16:	e000      	b.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8004c18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c1a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d10b      	bne.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c22:	4b26      	ldr	r3, [pc, #152]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c26:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004c2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c32:	4a22      	ldr	r2, [pc, #136]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004c34:	430b      	orrs	r3, r1
 8004c36:	6553      	str	r3, [r2, #84]	; 0x54
 8004c38:	e003      	b.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c3a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004c3e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004c42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c4a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004c4e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c50:	2300      	movs	r3, #0
 8004c52:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c54:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004c58:	460b      	mov	r3, r1
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	d034      	beq.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004c5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d003      	beq.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8004c68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c6c:	d007      	beq.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8004c6e:	e011      	b.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c70:	4b12      	ldr	r3, [pc, #72]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c74:	4a11      	ldr	r2, [pc, #68]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004c76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004c7c:	e00e      	b.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004c7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c82:	3308      	adds	r3, #8
 8004c84:	2102      	movs	r1, #2
 8004c86:	4618      	mov	r0, r3
 8004c88:	f000 fc8a 	bl	80055a0 <RCCEx_PLL2_Config>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004c92:	e003      	b.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004c9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c9c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d10d      	bne.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004ca4:	4b05      	ldr	r3, [pc, #20]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004ca6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ca8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004cac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cb2:	4a02      	ldr	r2, [pc, #8]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004cb4:	430b      	orrs	r3, r1
 8004cb6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004cb8:	e006      	b.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8004cba:	bf00      	nop
 8004cbc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cc0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004cc4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004cc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004cd4:	663b      	str	r3, [r7, #96]	; 0x60
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	667b      	str	r3, [r7, #100]	; 0x64
 8004cda:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004cde:	460b      	mov	r3, r1
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	d00c      	beq.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004ce4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ce8:	3328      	adds	r3, #40	; 0x28
 8004cea:	2102      	movs	r1, #2
 8004cec:	4618      	mov	r0, r3
 8004cee:	f000 fd09 	bl	8005704 <RCCEx_PLL3_Config>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d002      	beq.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004cfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d06:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004d0a:	65bb      	str	r3, [r7, #88]	; 0x58
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d10:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004d14:	460b      	mov	r3, r1
 8004d16:	4313      	orrs	r3, r2
 8004d18:	d036      	beq.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004d1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d24:	d018      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8004d26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d2a:	d811      	bhi.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004d2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d30:	d014      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8004d32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d36:	d80b      	bhi.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d011      	beq.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8004d3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d40:	d106      	bne.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d42:	4bb7      	ldr	r3, [pc, #732]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d46:	4ab6      	ldr	r2, [pc, #728]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004d48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d4c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004d4e:	e008      	b.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004d56:	e004      	b.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004d58:	bf00      	nop
 8004d5a:	e002      	b.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004d5c:	bf00      	nop
 8004d5e:	e000      	b.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004d60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d62:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d10a      	bne.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004d6a:	4bad      	ldr	r3, [pc, #692]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d6e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004d72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d78:	4aa9      	ldr	r2, [pc, #676]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004d7a:	430b      	orrs	r3, r1
 8004d7c:	6553      	str	r3, [r2, #84]	; 0x54
 8004d7e:	e003      	b.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d80:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004d84:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004d88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d90:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004d94:	653b      	str	r3, [r7, #80]	; 0x50
 8004d96:	2300      	movs	r3, #0
 8004d98:	657b      	str	r3, [r7, #84]	; 0x54
 8004d9a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004d9e:	460b      	mov	r3, r1
 8004da0:	4313      	orrs	r3, r2
 8004da2:	d009      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004da4:	4b9e      	ldr	r3, [pc, #632]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004da6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004da8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004dac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004db2:	4a9b      	ldr	r2, [pc, #620]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004db4:	430b      	orrs	r3, r1
 8004db6:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004db8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc0:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004dc4:	64bb      	str	r3, [r7, #72]	; 0x48
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004dca:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004dce:	460b      	mov	r3, r1
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	d009      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004dd4:	4b92      	ldr	r3, [pc, #584]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004dd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dd8:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8004ddc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004de0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004de2:	4a8f      	ldr	r2, [pc, #572]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004de4:	430b      	orrs	r3, r1
 8004de6:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004de8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df0:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004df4:	643b      	str	r3, [r7, #64]	; 0x40
 8004df6:	2300      	movs	r3, #0
 8004df8:	647b      	str	r3, [r7, #68]	; 0x44
 8004dfa:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004dfe:	460b      	mov	r3, r1
 8004e00:	4313      	orrs	r3, r2
 8004e02:	d00e      	beq.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004e04:	4b86      	ldr	r3, [pc, #536]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004e06:	691b      	ldr	r3, [r3, #16]
 8004e08:	4a85      	ldr	r2, [pc, #532]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004e0a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004e0e:	6113      	str	r3, [r2, #16]
 8004e10:	4b83      	ldr	r3, [pc, #524]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004e12:	6919      	ldr	r1, [r3, #16]
 8004e14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e18:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004e1c:	4a80      	ldr	r2, [pc, #512]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004e1e:	430b      	orrs	r3, r1
 8004e20:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004e22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e2a:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004e2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e30:	2300      	movs	r3, #0
 8004e32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e34:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004e38:	460b      	mov	r3, r1
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	d009      	beq.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004e3e:	4b78      	ldr	r3, [pc, #480]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e42:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004e46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e4c:	4a74      	ldr	r2, [pc, #464]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004e4e:	430b      	orrs	r3, r1
 8004e50:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004e52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e5a:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004e5e:	633b      	str	r3, [r7, #48]	; 0x30
 8004e60:	2300      	movs	r3, #0
 8004e62:	637b      	str	r3, [r7, #52]	; 0x34
 8004e64:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004e68:	460b      	mov	r3, r1
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	d00a      	beq.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004e6e:	4b6c      	ldr	r3, [pc, #432]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e72:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004e76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e7e:	4a68      	ldr	r2, [pc, #416]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004e80:	430b      	orrs	r3, r1
 8004e82:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004e84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e8c:	2100      	movs	r1, #0
 8004e8e:	62b9      	str	r1, [r7, #40]	; 0x28
 8004e90:	f003 0301 	and.w	r3, r3, #1
 8004e94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e96:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004e9a:	460b      	mov	r3, r1
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	d011      	beq.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ea0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ea4:	3308      	adds	r3, #8
 8004ea6:	2100      	movs	r1, #0
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f000 fb79 	bl	80055a0 <RCCEx_PLL2_Config>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8004eb4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d003      	beq.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ebc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004ec0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004ec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ecc:	2100      	movs	r1, #0
 8004ece:	6239      	str	r1, [r7, #32]
 8004ed0:	f003 0302 	and.w	r3, r3, #2
 8004ed4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ed6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004eda:	460b      	mov	r3, r1
 8004edc:	4313      	orrs	r3, r2
 8004ede:	d011      	beq.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004ee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ee4:	3308      	adds	r3, #8
 8004ee6:	2101      	movs	r1, #1
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f000 fb59 	bl	80055a0 <RCCEx_PLL2_Config>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8004ef4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d003      	beq.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004efc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004f00:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004f04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f0c:	2100      	movs	r1, #0
 8004f0e:	61b9      	str	r1, [r7, #24]
 8004f10:	f003 0304 	and.w	r3, r3, #4
 8004f14:	61fb      	str	r3, [r7, #28]
 8004f16:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004f1a:	460b      	mov	r3, r1
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	d011      	beq.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004f20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f24:	3308      	adds	r3, #8
 8004f26:	2102      	movs	r1, #2
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f000 fb39 	bl	80055a0 <RCCEx_PLL2_Config>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8004f34:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d003      	beq.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f3c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004f40:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004f44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f4c:	2100      	movs	r1, #0
 8004f4e:	6139      	str	r1, [r7, #16]
 8004f50:	f003 0308 	and.w	r3, r3, #8
 8004f54:	617b      	str	r3, [r7, #20]
 8004f56:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004f5a:	460b      	mov	r3, r1
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	d011      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004f60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f64:	3328      	adds	r3, #40	; 0x28
 8004f66:	2100      	movs	r1, #0
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f000 fbcb 	bl	8005704 <RCCEx_PLL3_Config>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 8004f74:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d003      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f7c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004f80:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004f84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f8c:	2100      	movs	r1, #0
 8004f8e:	60b9      	str	r1, [r7, #8]
 8004f90:	f003 0310 	and.w	r3, r3, #16
 8004f94:	60fb      	str	r3, [r7, #12]
 8004f96:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004f9a:	460b      	mov	r3, r1
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	d011      	beq.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004fa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fa4:	3328      	adds	r3, #40	; 0x28
 8004fa6:	2101      	movs	r1, #1
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f000 fbab 	bl	8005704 <RCCEx_PLL3_Config>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8004fb4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d003      	beq.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fbc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004fc0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004fc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fcc:	2100      	movs	r1, #0
 8004fce:	6039      	str	r1, [r7, #0]
 8004fd0:	f003 0320 	and.w	r3, r3, #32
 8004fd4:	607b      	str	r3, [r7, #4]
 8004fd6:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004fda:	460b      	mov	r3, r1
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	d011      	beq.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004fe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fe4:	3328      	adds	r3, #40	; 0x28
 8004fe6:	2102      	movs	r1, #2
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f000 fb8b 	bl	8005704 <RCCEx_PLL3_Config>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8004ff4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d003      	beq.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ffc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005000:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 8005004:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8005008:	2b00      	cmp	r3, #0
 800500a:	d101      	bne.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800500c:	2300      	movs	r3, #0
 800500e:	e000      	b.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8005010:	2301      	movs	r3, #1
}
 8005012:	4618      	mov	r0, r3
 8005014:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8005018:	46bd      	mov	sp, r7
 800501a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800501e:	bf00      	nop
 8005020:	58024400 	.word	0x58024400

08005024 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005028:	f7fe fe00 	bl	8003c2c <HAL_RCC_GetHCLKFreq>
 800502c:	4602      	mov	r2, r0
 800502e:	4b06      	ldr	r3, [pc, #24]	; (8005048 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005030:	6a1b      	ldr	r3, [r3, #32]
 8005032:	091b      	lsrs	r3, r3, #4
 8005034:	f003 0307 	and.w	r3, r3, #7
 8005038:	4904      	ldr	r1, [pc, #16]	; (800504c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800503a:	5ccb      	ldrb	r3, [r1, r3]
 800503c:	f003 031f 	and.w	r3, r3, #31
 8005040:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005044:	4618      	mov	r0, r3
 8005046:	bd80      	pop	{r7, pc}
 8005048:	58024400 	.word	0x58024400
 800504c:	08006c98 	.word	0x08006c98

08005050 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005050:	b480      	push	{r7}
 8005052:	b089      	sub	sp, #36	; 0x24
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005058:	4ba1      	ldr	r3, [pc, #644]	; (80052e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800505a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800505c:	f003 0303 	and.w	r3, r3, #3
 8005060:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005062:	4b9f      	ldr	r3, [pc, #636]	; (80052e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005066:	0b1b      	lsrs	r3, r3, #12
 8005068:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800506c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800506e:	4b9c      	ldr	r3, [pc, #624]	; (80052e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005072:	091b      	lsrs	r3, r3, #4
 8005074:	f003 0301 	and.w	r3, r3, #1
 8005078:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800507a:	4b99      	ldr	r3, [pc, #612]	; (80052e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800507c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800507e:	08db      	lsrs	r3, r3, #3
 8005080:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005084:	693a      	ldr	r2, [r7, #16]
 8005086:	fb02 f303 	mul.w	r3, r2, r3
 800508a:	ee07 3a90 	vmov	s15, r3
 800508e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005092:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	2b00      	cmp	r3, #0
 800509a:	f000 8111 	beq.w	80052c0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	2b02      	cmp	r3, #2
 80050a2:	f000 8083 	beq.w	80051ac <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80050a6:	69bb      	ldr	r3, [r7, #24]
 80050a8:	2b02      	cmp	r3, #2
 80050aa:	f200 80a1 	bhi.w	80051f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d003      	beq.n	80050bc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80050b4:	69bb      	ldr	r3, [r7, #24]
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d056      	beq.n	8005168 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80050ba:	e099      	b.n	80051f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80050bc:	4b88      	ldr	r3, [pc, #544]	; (80052e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 0320 	and.w	r3, r3, #32
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d02d      	beq.n	8005124 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80050c8:	4b85      	ldr	r3, [pc, #532]	; (80052e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	08db      	lsrs	r3, r3, #3
 80050ce:	f003 0303 	and.w	r3, r3, #3
 80050d2:	4a84      	ldr	r2, [pc, #528]	; (80052e4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80050d4:	fa22 f303 	lsr.w	r3, r2, r3
 80050d8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	ee07 3a90 	vmov	s15, r3
 80050e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	ee07 3a90 	vmov	s15, r3
 80050ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050f2:	4b7b      	ldr	r3, [pc, #492]	; (80052e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050fa:	ee07 3a90 	vmov	s15, r3
 80050fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005102:	ed97 6a03 	vldr	s12, [r7, #12]
 8005106:	eddf 5a78 	vldr	s11, [pc, #480]	; 80052e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800510a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800510e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005112:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005116:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800511a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800511e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005122:	e087      	b.n	8005234 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	ee07 3a90 	vmov	s15, r3
 800512a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800512e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80052ec <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005132:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005136:	4b6a      	ldr	r3, [pc, #424]	; (80052e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800513a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800513e:	ee07 3a90 	vmov	s15, r3
 8005142:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005146:	ed97 6a03 	vldr	s12, [r7, #12]
 800514a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80052e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800514e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005152:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005156:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800515a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800515e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005162:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005166:	e065      	b.n	8005234 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	ee07 3a90 	vmov	s15, r3
 800516e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005172:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80052f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005176:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800517a:	4b59      	ldr	r3, [pc, #356]	; (80052e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800517c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800517e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005182:	ee07 3a90 	vmov	s15, r3
 8005186:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800518a:	ed97 6a03 	vldr	s12, [r7, #12]
 800518e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80052e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005192:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005196:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800519a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800519e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80051aa:	e043      	b.n	8005234 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	ee07 3a90 	vmov	s15, r3
 80051b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051b6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80052f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80051ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051be:	4b48      	ldr	r3, [pc, #288]	; (80052e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051c6:	ee07 3a90 	vmov	s15, r3
 80051ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80051d2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80052e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80051d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80051ee:	e021      	b.n	8005234 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	ee07 3a90 	vmov	s15, r3
 80051f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051fa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80052f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80051fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005202:	4b37      	ldr	r3, [pc, #220]	; (80052e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005206:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800520a:	ee07 3a90 	vmov	s15, r3
 800520e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005212:	ed97 6a03 	vldr	s12, [r7, #12]
 8005216:	eddf 5a34 	vldr	s11, [pc, #208]	; 80052e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800521a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800521e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005222:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005226:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800522a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800522e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005232:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005234:	4b2a      	ldr	r3, [pc, #168]	; (80052e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005238:	0a5b      	lsrs	r3, r3, #9
 800523a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800523e:	ee07 3a90 	vmov	s15, r3
 8005242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005246:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800524a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800524e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005252:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005256:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800525a:	ee17 2a90 	vmov	r2, s15
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005262:	4b1f      	ldr	r3, [pc, #124]	; (80052e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005266:	0c1b      	lsrs	r3, r3, #16
 8005268:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800526c:	ee07 3a90 	vmov	s15, r3
 8005270:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005274:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005278:	ee37 7a87 	vadd.f32	s14, s15, s14
 800527c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005280:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005284:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005288:	ee17 2a90 	vmov	r2, s15
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005290:	4b13      	ldr	r3, [pc, #76]	; (80052e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005294:	0e1b      	lsrs	r3, r3, #24
 8005296:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800529a:	ee07 3a90 	vmov	s15, r3
 800529e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80052a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80052aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80052ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052b6:	ee17 2a90 	vmov	r2, s15
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80052be:	e008      	b.n	80052d2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	609a      	str	r2, [r3, #8]
}
 80052d2:	bf00      	nop
 80052d4:	3724      	adds	r7, #36	; 0x24
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr
 80052de:	bf00      	nop
 80052e0:	58024400 	.word	0x58024400
 80052e4:	03d09000 	.word	0x03d09000
 80052e8:	46000000 	.word	0x46000000
 80052ec:	4c742400 	.word	0x4c742400
 80052f0:	4a742400 	.word	0x4a742400
 80052f4:	4af42400 	.word	0x4af42400

080052f8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b089      	sub	sp, #36	; 0x24
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005300:	4ba1      	ldr	r3, [pc, #644]	; (8005588 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005304:	f003 0303 	and.w	r3, r3, #3
 8005308:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800530a:	4b9f      	ldr	r3, [pc, #636]	; (8005588 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800530c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800530e:	0d1b      	lsrs	r3, r3, #20
 8005310:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005314:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005316:	4b9c      	ldr	r3, [pc, #624]	; (8005588 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800531a:	0a1b      	lsrs	r3, r3, #8
 800531c:	f003 0301 	and.w	r3, r3, #1
 8005320:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005322:	4b99      	ldr	r3, [pc, #612]	; (8005588 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005326:	08db      	lsrs	r3, r3, #3
 8005328:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800532c:	693a      	ldr	r2, [r7, #16]
 800532e:	fb02 f303 	mul.w	r3, r2, r3
 8005332:	ee07 3a90 	vmov	s15, r3
 8005336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800533a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	2b00      	cmp	r3, #0
 8005342:	f000 8111 	beq.w	8005568 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	2b02      	cmp	r3, #2
 800534a:	f000 8083 	beq.w	8005454 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800534e:	69bb      	ldr	r3, [r7, #24]
 8005350:	2b02      	cmp	r3, #2
 8005352:	f200 80a1 	bhi.w	8005498 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d003      	beq.n	8005364 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800535c:	69bb      	ldr	r3, [r7, #24]
 800535e:	2b01      	cmp	r3, #1
 8005360:	d056      	beq.n	8005410 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005362:	e099      	b.n	8005498 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005364:	4b88      	ldr	r3, [pc, #544]	; (8005588 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 0320 	and.w	r3, r3, #32
 800536c:	2b00      	cmp	r3, #0
 800536e:	d02d      	beq.n	80053cc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005370:	4b85      	ldr	r3, [pc, #532]	; (8005588 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	08db      	lsrs	r3, r3, #3
 8005376:	f003 0303 	and.w	r3, r3, #3
 800537a:	4a84      	ldr	r2, [pc, #528]	; (800558c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800537c:	fa22 f303 	lsr.w	r3, r2, r3
 8005380:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	ee07 3a90 	vmov	s15, r3
 8005388:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	ee07 3a90 	vmov	s15, r3
 8005392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005396:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800539a:	4b7b      	ldr	r3, [pc, #492]	; (8005588 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800539c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053a2:	ee07 3a90 	vmov	s15, r3
 80053a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80053ae:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005590 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80053b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053c6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80053ca:	e087      	b.n	80054dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	ee07 3a90 	vmov	s15, r3
 80053d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053d6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005594 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80053da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053de:	4b6a      	ldr	r3, [pc, #424]	; (8005588 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053e6:	ee07 3a90 	vmov	s15, r3
 80053ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80053f2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005590 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80053f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005402:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005406:	ee67 7a27 	vmul.f32	s15, s14, s15
 800540a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800540e:	e065      	b.n	80054dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	ee07 3a90 	vmov	s15, r3
 8005416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800541a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005598 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800541e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005422:	4b59      	ldr	r3, [pc, #356]	; (8005588 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005426:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800542a:	ee07 3a90 	vmov	s15, r3
 800542e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005432:	ed97 6a03 	vldr	s12, [r7, #12]
 8005436:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005590 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800543a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800543e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005442:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005446:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800544a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800544e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005452:	e043      	b.n	80054dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	ee07 3a90 	vmov	s15, r3
 800545a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800545e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800559c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005462:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005466:	4b48      	ldr	r3, [pc, #288]	; (8005588 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800546e:	ee07 3a90 	vmov	s15, r3
 8005472:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005476:	ed97 6a03 	vldr	s12, [r7, #12]
 800547a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005590 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800547e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005482:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005486:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800548a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800548e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005492:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005496:	e021      	b.n	80054dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	ee07 3a90 	vmov	s15, r3
 800549e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054a2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005598 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80054a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054aa:	4b37      	ldr	r3, [pc, #220]	; (8005588 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054b2:	ee07 3a90 	vmov	s15, r3
 80054b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80054be:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005590 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80054c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80054da:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80054dc:	4b2a      	ldr	r3, [pc, #168]	; (8005588 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e0:	0a5b      	lsrs	r3, r3, #9
 80054e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054e6:	ee07 3a90 	vmov	s15, r3
 80054ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80054f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80054fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005502:	ee17 2a90 	vmov	r2, s15
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800550a:	4b1f      	ldr	r3, [pc, #124]	; (8005588 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800550c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800550e:	0c1b      	lsrs	r3, r3, #16
 8005510:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005514:	ee07 3a90 	vmov	s15, r3
 8005518:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800551c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005520:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005524:	edd7 6a07 	vldr	s13, [r7, #28]
 8005528:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800552c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005530:	ee17 2a90 	vmov	r2, s15
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005538:	4b13      	ldr	r3, [pc, #76]	; (8005588 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800553a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553c:	0e1b      	lsrs	r3, r3, #24
 800553e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005542:	ee07 3a90 	vmov	s15, r3
 8005546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800554a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800554e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005552:	edd7 6a07 	vldr	s13, [r7, #28]
 8005556:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800555a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800555e:	ee17 2a90 	vmov	r2, s15
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005566:	e008      	b.n	800557a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2200      	movs	r2, #0
 8005578:	609a      	str	r2, [r3, #8]
}
 800557a:	bf00      	nop
 800557c:	3724      	adds	r7, #36	; 0x24
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr
 8005586:	bf00      	nop
 8005588:	58024400 	.word	0x58024400
 800558c:	03d09000 	.word	0x03d09000
 8005590:	46000000 	.word	0x46000000
 8005594:	4c742400 	.word	0x4c742400
 8005598:	4a742400 	.word	0x4a742400
 800559c:	4af42400 	.word	0x4af42400

080055a0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b084      	sub	sp, #16
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80055aa:	2300      	movs	r3, #0
 80055ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80055ae:	4b53      	ldr	r3, [pc, #332]	; (80056fc <RCCEx_PLL2_Config+0x15c>)
 80055b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055b2:	f003 0303 	and.w	r3, r3, #3
 80055b6:	2b03      	cmp	r3, #3
 80055b8:	d101      	bne.n	80055be <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	e099      	b.n	80056f2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80055be:	4b4f      	ldr	r3, [pc, #316]	; (80056fc <RCCEx_PLL2_Config+0x15c>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a4e      	ldr	r2, [pc, #312]	; (80056fc <RCCEx_PLL2_Config+0x15c>)
 80055c4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80055c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055ca:	f7fb fea9 	bl	8001320 <HAL_GetTick>
 80055ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80055d0:	e008      	b.n	80055e4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80055d2:	f7fb fea5 	bl	8001320 <HAL_GetTick>
 80055d6:	4602      	mov	r2, r0
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	1ad3      	subs	r3, r2, r3
 80055dc:	2b02      	cmp	r3, #2
 80055de:	d901      	bls.n	80055e4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80055e0:	2303      	movs	r3, #3
 80055e2:	e086      	b.n	80056f2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80055e4:	4b45      	ldr	r3, [pc, #276]	; (80056fc <RCCEx_PLL2_Config+0x15c>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d1f0      	bne.n	80055d2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80055f0:	4b42      	ldr	r3, [pc, #264]	; (80056fc <RCCEx_PLL2_Config+0x15c>)
 80055f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	031b      	lsls	r3, r3, #12
 80055fe:	493f      	ldr	r1, [pc, #252]	; (80056fc <RCCEx_PLL2_Config+0x15c>)
 8005600:	4313      	orrs	r3, r2
 8005602:	628b      	str	r3, [r1, #40]	; 0x28
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	3b01      	subs	r3, #1
 800560a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	3b01      	subs	r3, #1
 8005614:	025b      	lsls	r3, r3, #9
 8005616:	b29b      	uxth	r3, r3
 8005618:	431a      	orrs	r2, r3
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	68db      	ldr	r3, [r3, #12]
 800561e:	3b01      	subs	r3, #1
 8005620:	041b      	lsls	r3, r3, #16
 8005622:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005626:	431a      	orrs	r2, r3
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	691b      	ldr	r3, [r3, #16]
 800562c:	3b01      	subs	r3, #1
 800562e:	061b      	lsls	r3, r3, #24
 8005630:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005634:	4931      	ldr	r1, [pc, #196]	; (80056fc <RCCEx_PLL2_Config+0x15c>)
 8005636:	4313      	orrs	r3, r2
 8005638:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800563a:	4b30      	ldr	r3, [pc, #192]	; (80056fc <RCCEx_PLL2_Config+0x15c>)
 800563c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800563e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	695b      	ldr	r3, [r3, #20]
 8005646:	492d      	ldr	r1, [pc, #180]	; (80056fc <RCCEx_PLL2_Config+0x15c>)
 8005648:	4313      	orrs	r3, r2
 800564a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800564c:	4b2b      	ldr	r3, [pc, #172]	; (80056fc <RCCEx_PLL2_Config+0x15c>)
 800564e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005650:	f023 0220 	bic.w	r2, r3, #32
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	699b      	ldr	r3, [r3, #24]
 8005658:	4928      	ldr	r1, [pc, #160]	; (80056fc <RCCEx_PLL2_Config+0x15c>)
 800565a:	4313      	orrs	r3, r2
 800565c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800565e:	4b27      	ldr	r3, [pc, #156]	; (80056fc <RCCEx_PLL2_Config+0x15c>)
 8005660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005662:	4a26      	ldr	r2, [pc, #152]	; (80056fc <RCCEx_PLL2_Config+0x15c>)
 8005664:	f023 0310 	bic.w	r3, r3, #16
 8005668:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800566a:	4b24      	ldr	r3, [pc, #144]	; (80056fc <RCCEx_PLL2_Config+0x15c>)
 800566c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800566e:	4b24      	ldr	r3, [pc, #144]	; (8005700 <RCCEx_PLL2_Config+0x160>)
 8005670:	4013      	ands	r3, r2
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	69d2      	ldr	r2, [r2, #28]
 8005676:	00d2      	lsls	r2, r2, #3
 8005678:	4920      	ldr	r1, [pc, #128]	; (80056fc <RCCEx_PLL2_Config+0x15c>)
 800567a:	4313      	orrs	r3, r2
 800567c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800567e:	4b1f      	ldr	r3, [pc, #124]	; (80056fc <RCCEx_PLL2_Config+0x15c>)
 8005680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005682:	4a1e      	ldr	r2, [pc, #120]	; (80056fc <RCCEx_PLL2_Config+0x15c>)
 8005684:	f043 0310 	orr.w	r3, r3, #16
 8005688:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d106      	bne.n	800569e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005690:	4b1a      	ldr	r3, [pc, #104]	; (80056fc <RCCEx_PLL2_Config+0x15c>)
 8005692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005694:	4a19      	ldr	r2, [pc, #100]	; (80056fc <RCCEx_PLL2_Config+0x15c>)
 8005696:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800569a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800569c:	e00f      	b.n	80056be <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d106      	bne.n	80056b2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80056a4:	4b15      	ldr	r3, [pc, #84]	; (80056fc <RCCEx_PLL2_Config+0x15c>)
 80056a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a8:	4a14      	ldr	r2, [pc, #80]	; (80056fc <RCCEx_PLL2_Config+0x15c>)
 80056aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 80056b0:	e005      	b.n	80056be <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80056b2:	4b12      	ldr	r3, [pc, #72]	; (80056fc <RCCEx_PLL2_Config+0x15c>)
 80056b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b6:	4a11      	ldr	r2, [pc, #68]	; (80056fc <RCCEx_PLL2_Config+0x15c>)
 80056b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80056bc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80056be:	4b0f      	ldr	r3, [pc, #60]	; (80056fc <RCCEx_PLL2_Config+0x15c>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a0e      	ldr	r2, [pc, #56]	; (80056fc <RCCEx_PLL2_Config+0x15c>)
 80056c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80056c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056ca:	f7fb fe29 	bl	8001320 <HAL_GetTick>
 80056ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80056d0:	e008      	b.n	80056e4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80056d2:	f7fb fe25 	bl	8001320 <HAL_GetTick>
 80056d6:	4602      	mov	r2, r0
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	1ad3      	subs	r3, r2, r3
 80056dc:	2b02      	cmp	r3, #2
 80056de:	d901      	bls.n	80056e4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80056e0:	2303      	movs	r3, #3
 80056e2:	e006      	b.n	80056f2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80056e4:	4b05      	ldr	r3, [pc, #20]	; (80056fc <RCCEx_PLL2_Config+0x15c>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d0f0      	beq.n	80056d2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80056f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3710      	adds	r7, #16
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	58024400 	.word	0x58024400
 8005700:	ffff0007 	.word	0xffff0007

08005704 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b084      	sub	sp, #16
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800570e:	2300      	movs	r3, #0
 8005710:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005712:	4b53      	ldr	r3, [pc, #332]	; (8005860 <RCCEx_PLL3_Config+0x15c>)
 8005714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005716:	f003 0303 	and.w	r3, r3, #3
 800571a:	2b03      	cmp	r3, #3
 800571c:	d101      	bne.n	8005722 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	e099      	b.n	8005856 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005722:	4b4f      	ldr	r3, [pc, #316]	; (8005860 <RCCEx_PLL3_Config+0x15c>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a4e      	ldr	r2, [pc, #312]	; (8005860 <RCCEx_PLL3_Config+0x15c>)
 8005728:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800572c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800572e:	f7fb fdf7 	bl	8001320 <HAL_GetTick>
 8005732:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005734:	e008      	b.n	8005748 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005736:	f7fb fdf3 	bl	8001320 <HAL_GetTick>
 800573a:	4602      	mov	r2, r0
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	1ad3      	subs	r3, r2, r3
 8005740:	2b02      	cmp	r3, #2
 8005742:	d901      	bls.n	8005748 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005744:	2303      	movs	r3, #3
 8005746:	e086      	b.n	8005856 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005748:	4b45      	ldr	r3, [pc, #276]	; (8005860 <RCCEx_PLL3_Config+0x15c>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005750:	2b00      	cmp	r3, #0
 8005752:	d1f0      	bne.n	8005736 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005754:	4b42      	ldr	r3, [pc, #264]	; (8005860 <RCCEx_PLL3_Config+0x15c>)
 8005756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005758:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	051b      	lsls	r3, r3, #20
 8005762:	493f      	ldr	r1, [pc, #252]	; (8005860 <RCCEx_PLL3_Config+0x15c>)
 8005764:	4313      	orrs	r3, r2
 8005766:	628b      	str	r3, [r1, #40]	; 0x28
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	3b01      	subs	r3, #1
 800576e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	3b01      	subs	r3, #1
 8005778:	025b      	lsls	r3, r3, #9
 800577a:	b29b      	uxth	r3, r3
 800577c:	431a      	orrs	r2, r3
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	3b01      	subs	r3, #1
 8005784:	041b      	lsls	r3, r3, #16
 8005786:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800578a:	431a      	orrs	r2, r3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	691b      	ldr	r3, [r3, #16]
 8005790:	3b01      	subs	r3, #1
 8005792:	061b      	lsls	r3, r3, #24
 8005794:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005798:	4931      	ldr	r1, [pc, #196]	; (8005860 <RCCEx_PLL3_Config+0x15c>)
 800579a:	4313      	orrs	r3, r2
 800579c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800579e:	4b30      	ldr	r3, [pc, #192]	; (8005860 <RCCEx_PLL3_Config+0x15c>)
 80057a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	695b      	ldr	r3, [r3, #20]
 80057aa:	492d      	ldr	r1, [pc, #180]	; (8005860 <RCCEx_PLL3_Config+0x15c>)
 80057ac:	4313      	orrs	r3, r2
 80057ae:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80057b0:	4b2b      	ldr	r3, [pc, #172]	; (8005860 <RCCEx_PLL3_Config+0x15c>)
 80057b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	699b      	ldr	r3, [r3, #24]
 80057bc:	4928      	ldr	r1, [pc, #160]	; (8005860 <RCCEx_PLL3_Config+0x15c>)
 80057be:	4313      	orrs	r3, r2
 80057c0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80057c2:	4b27      	ldr	r3, [pc, #156]	; (8005860 <RCCEx_PLL3_Config+0x15c>)
 80057c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c6:	4a26      	ldr	r2, [pc, #152]	; (8005860 <RCCEx_PLL3_Config+0x15c>)
 80057c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80057ce:	4b24      	ldr	r3, [pc, #144]	; (8005860 <RCCEx_PLL3_Config+0x15c>)
 80057d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057d2:	4b24      	ldr	r3, [pc, #144]	; (8005864 <RCCEx_PLL3_Config+0x160>)
 80057d4:	4013      	ands	r3, r2
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	69d2      	ldr	r2, [r2, #28]
 80057da:	00d2      	lsls	r2, r2, #3
 80057dc:	4920      	ldr	r1, [pc, #128]	; (8005860 <RCCEx_PLL3_Config+0x15c>)
 80057de:	4313      	orrs	r3, r2
 80057e0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80057e2:	4b1f      	ldr	r3, [pc, #124]	; (8005860 <RCCEx_PLL3_Config+0x15c>)
 80057e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e6:	4a1e      	ldr	r2, [pc, #120]	; (8005860 <RCCEx_PLL3_Config+0x15c>)
 80057e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d106      	bne.n	8005802 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80057f4:	4b1a      	ldr	r3, [pc, #104]	; (8005860 <RCCEx_PLL3_Config+0x15c>)
 80057f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f8:	4a19      	ldr	r2, [pc, #100]	; (8005860 <RCCEx_PLL3_Config+0x15c>)
 80057fa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80057fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005800:	e00f      	b.n	8005822 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	2b01      	cmp	r3, #1
 8005806:	d106      	bne.n	8005816 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005808:	4b15      	ldr	r3, [pc, #84]	; (8005860 <RCCEx_PLL3_Config+0x15c>)
 800580a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800580c:	4a14      	ldr	r2, [pc, #80]	; (8005860 <RCCEx_PLL3_Config+0x15c>)
 800580e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005812:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005814:	e005      	b.n	8005822 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005816:	4b12      	ldr	r3, [pc, #72]	; (8005860 <RCCEx_PLL3_Config+0x15c>)
 8005818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800581a:	4a11      	ldr	r2, [pc, #68]	; (8005860 <RCCEx_PLL3_Config+0x15c>)
 800581c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005820:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005822:	4b0f      	ldr	r3, [pc, #60]	; (8005860 <RCCEx_PLL3_Config+0x15c>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a0e      	ldr	r2, [pc, #56]	; (8005860 <RCCEx_PLL3_Config+0x15c>)
 8005828:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800582c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800582e:	f7fb fd77 	bl	8001320 <HAL_GetTick>
 8005832:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005834:	e008      	b.n	8005848 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005836:	f7fb fd73 	bl	8001320 <HAL_GetTick>
 800583a:	4602      	mov	r2, r0
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	1ad3      	subs	r3, r2, r3
 8005840:	2b02      	cmp	r3, #2
 8005842:	d901      	bls.n	8005848 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005844:	2303      	movs	r3, #3
 8005846:	e006      	b.n	8005856 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005848:	4b05      	ldr	r3, [pc, #20]	; (8005860 <RCCEx_PLL3_Config+0x15c>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005850:	2b00      	cmp	r3, #0
 8005852:	d0f0      	beq.n	8005836 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005854:	7bfb      	ldrb	r3, [r7, #15]
}
 8005856:	4618      	mov	r0, r3
 8005858:	3710      	adds	r7, #16
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
 800585e:	bf00      	nop
 8005860:	58024400 	.word	0x58024400
 8005864:	ffff0007 	.word	0xffff0007

08005868 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b082      	sub	sp, #8
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d101      	bne.n	800587a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	e042      	b.n	8005900 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005880:	2b00      	cmp	r3, #0
 8005882:	d106      	bne.n	8005892 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2200      	movs	r2, #0
 8005888:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f7fb fb8b 	bl	8000fa8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2224      	movs	r2, #36	; 0x24
 8005896:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f022 0201 	bic.w	r2, r2, #1
 80058a8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d002      	beq.n	80058b8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f000 fe94 	bl	80065e0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f000 f825 	bl	8005908 <UART_SetConfig>
 80058be:	4603      	mov	r3, r0
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d101      	bne.n	80058c8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	e01b      	b.n	8005900 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	685a      	ldr	r2, [r3, #4]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80058d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	689a      	ldr	r2, [r3, #8]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80058e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f042 0201 	orr.w	r2, r2, #1
 80058f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f000 ff13 	bl	8006724 <UART_CheckIdleState>
 80058fe:	4603      	mov	r3, r0
}
 8005900:	4618      	mov	r0, r3
 8005902:	3708      	adds	r7, #8
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}

08005908 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005908:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800590c:	b092      	sub	sp, #72	; 0x48
 800590e:	af00      	add	r7, sp, #0
 8005910:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005912:	2300      	movs	r3, #0
 8005914:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	689a      	ldr	r2, [r3, #8]
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	691b      	ldr	r3, [r3, #16]
 8005920:	431a      	orrs	r2, r3
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	695b      	ldr	r3, [r3, #20]
 8005926:	431a      	orrs	r2, r3
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	69db      	ldr	r3, [r3, #28]
 800592c:	4313      	orrs	r3, r2
 800592e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	4bbe      	ldr	r3, [pc, #760]	; (8005c30 <UART_SetConfig+0x328>)
 8005938:	4013      	ands	r3, r2
 800593a:	697a      	ldr	r2, [r7, #20]
 800593c:	6812      	ldr	r2, [r2, #0]
 800593e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005940:	430b      	orrs	r3, r1
 8005942:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	68da      	ldr	r2, [r3, #12]
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	430a      	orrs	r2, r1
 8005958:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	699b      	ldr	r3, [r3, #24]
 800595e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4ab3      	ldr	r2, [pc, #716]	; (8005c34 <UART_SetConfig+0x32c>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d004      	beq.n	8005974 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	6a1b      	ldr	r3, [r3, #32]
 800596e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005970:	4313      	orrs	r3, r2
 8005972:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	689a      	ldr	r2, [r3, #8]
 800597a:	4baf      	ldr	r3, [pc, #700]	; (8005c38 <UART_SetConfig+0x330>)
 800597c:	4013      	ands	r3, r2
 800597e:	697a      	ldr	r2, [r7, #20]
 8005980:	6812      	ldr	r2, [r2, #0]
 8005982:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005984:	430b      	orrs	r3, r1
 8005986:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800598e:	f023 010f 	bic.w	r1, r3, #15
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	430a      	orrs	r2, r1
 800599c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4aa6      	ldr	r2, [pc, #664]	; (8005c3c <UART_SetConfig+0x334>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d177      	bne.n	8005a98 <UART_SetConfig+0x190>
 80059a8:	4ba5      	ldr	r3, [pc, #660]	; (8005c40 <UART_SetConfig+0x338>)
 80059aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80059b0:	2b28      	cmp	r3, #40	; 0x28
 80059b2:	d86d      	bhi.n	8005a90 <UART_SetConfig+0x188>
 80059b4:	a201      	add	r2, pc, #4	; (adr r2, 80059bc <UART_SetConfig+0xb4>)
 80059b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ba:	bf00      	nop
 80059bc:	08005a61 	.word	0x08005a61
 80059c0:	08005a91 	.word	0x08005a91
 80059c4:	08005a91 	.word	0x08005a91
 80059c8:	08005a91 	.word	0x08005a91
 80059cc:	08005a91 	.word	0x08005a91
 80059d0:	08005a91 	.word	0x08005a91
 80059d4:	08005a91 	.word	0x08005a91
 80059d8:	08005a91 	.word	0x08005a91
 80059dc:	08005a69 	.word	0x08005a69
 80059e0:	08005a91 	.word	0x08005a91
 80059e4:	08005a91 	.word	0x08005a91
 80059e8:	08005a91 	.word	0x08005a91
 80059ec:	08005a91 	.word	0x08005a91
 80059f0:	08005a91 	.word	0x08005a91
 80059f4:	08005a91 	.word	0x08005a91
 80059f8:	08005a91 	.word	0x08005a91
 80059fc:	08005a71 	.word	0x08005a71
 8005a00:	08005a91 	.word	0x08005a91
 8005a04:	08005a91 	.word	0x08005a91
 8005a08:	08005a91 	.word	0x08005a91
 8005a0c:	08005a91 	.word	0x08005a91
 8005a10:	08005a91 	.word	0x08005a91
 8005a14:	08005a91 	.word	0x08005a91
 8005a18:	08005a91 	.word	0x08005a91
 8005a1c:	08005a79 	.word	0x08005a79
 8005a20:	08005a91 	.word	0x08005a91
 8005a24:	08005a91 	.word	0x08005a91
 8005a28:	08005a91 	.word	0x08005a91
 8005a2c:	08005a91 	.word	0x08005a91
 8005a30:	08005a91 	.word	0x08005a91
 8005a34:	08005a91 	.word	0x08005a91
 8005a38:	08005a91 	.word	0x08005a91
 8005a3c:	08005a81 	.word	0x08005a81
 8005a40:	08005a91 	.word	0x08005a91
 8005a44:	08005a91 	.word	0x08005a91
 8005a48:	08005a91 	.word	0x08005a91
 8005a4c:	08005a91 	.word	0x08005a91
 8005a50:	08005a91 	.word	0x08005a91
 8005a54:	08005a91 	.word	0x08005a91
 8005a58:	08005a91 	.word	0x08005a91
 8005a5c:	08005a89 	.word	0x08005a89
 8005a60:	2301      	movs	r3, #1
 8005a62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a66:	e326      	b.n	80060b6 <UART_SetConfig+0x7ae>
 8005a68:	2304      	movs	r3, #4
 8005a6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a6e:	e322      	b.n	80060b6 <UART_SetConfig+0x7ae>
 8005a70:	2308      	movs	r3, #8
 8005a72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a76:	e31e      	b.n	80060b6 <UART_SetConfig+0x7ae>
 8005a78:	2310      	movs	r3, #16
 8005a7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a7e:	e31a      	b.n	80060b6 <UART_SetConfig+0x7ae>
 8005a80:	2320      	movs	r3, #32
 8005a82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a86:	e316      	b.n	80060b6 <UART_SetConfig+0x7ae>
 8005a88:	2340      	movs	r3, #64	; 0x40
 8005a8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a8e:	e312      	b.n	80060b6 <UART_SetConfig+0x7ae>
 8005a90:	2380      	movs	r3, #128	; 0x80
 8005a92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a96:	e30e      	b.n	80060b6 <UART_SetConfig+0x7ae>
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a69      	ldr	r2, [pc, #420]	; (8005c44 <UART_SetConfig+0x33c>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d130      	bne.n	8005b04 <UART_SetConfig+0x1fc>
 8005aa2:	4b67      	ldr	r3, [pc, #412]	; (8005c40 <UART_SetConfig+0x338>)
 8005aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aa6:	f003 0307 	and.w	r3, r3, #7
 8005aaa:	2b05      	cmp	r3, #5
 8005aac:	d826      	bhi.n	8005afc <UART_SetConfig+0x1f4>
 8005aae:	a201      	add	r2, pc, #4	; (adr r2, 8005ab4 <UART_SetConfig+0x1ac>)
 8005ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ab4:	08005acd 	.word	0x08005acd
 8005ab8:	08005ad5 	.word	0x08005ad5
 8005abc:	08005add 	.word	0x08005add
 8005ac0:	08005ae5 	.word	0x08005ae5
 8005ac4:	08005aed 	.word	0x08005aed
 8005ac8:	08005af5 	.word	0x08005af5
 8005acc:	2300      	movs	r3, #0
 8005ace:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ad2:	e2f0      	b.n	80060b6 <UART_SetConfig+0x7ae>
 8005ad4:	2304      	movs	r3, #4
 8005ad6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ada:	e2ec      	b.n	80060b6 <UART_SetConfig+0x7ae>
 8005adc:	2308      	movs	r3, #8
 8005ade:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ae2:	e2e8      	b.n	80060b6 <UART_SetConfig+0x7ae>
 8005ae4:	2310      	movs	r3, #16
 8005ae6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005aea:	e2e4      	b.n	80060b6 <UART_SetConfig+0x7ae>
 8005aec:	2320      	movs	r3, #32
 8005aee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005af2:	e2e0      	b.n	80060b6 <UART_SetConfig+0x7ae>
 8005af4:	2340      	movs	r3, #64	; 0x40
 8005af6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005afa:	e2dc      	b.n	80060b6 <UART_SetConfig+0x7ae>
 8005afc:	2380      	movs	r3, #128	; 0x80
 8005afe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b02:	e2d8      	b.n	80060b6 <UART_SetConfig+0x7ae>
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a4f      	ldr	r2, [pc, #316]	; (8005c48 <UART_SetConfig+0x340>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d130      	bne.n	8005b70 <UART_SetConfig+0x268>
 8005b0e:	4b4c      	ldr	r3, [pc, #304]	; (8005c40 <UART_SetConfig+0x338>)
 8005b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b12:	f003 0307 	and.w	r3, r3, #7
 8005b16:	2b05      	cmp	r3, #5
 8005b18:	d826      	bhi.n	8005b68 <UART_SetConfig+0x260>
 8005b1a:	a201      	add	r2, pc, #4	; (adr r2, 8005b20 <UART_SetConfig+0x218>)
 8005b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b20:	08005b39 	.word	0x08005b39
 8005b24:	08005b41 	.word	0x08005b41
 8005b28:	08005b49 	.word	0x08005b49
 8005b2c:	08005b51 	.word	0x08005b51
 8005b30:	08005b59 	.word	0x08005b59
 8005b34:	08005b61 	.word	0x08005b61
 8005b38:	2300      	movs	r3, #0
 8005b3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b3e:	e2ba      	b.n	80060b6 <UART_SetConfig+0x7ae>
 8005b40:	2304      	movs	r3, #4
 8005b42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b46:	e2b6      	b.n	80060b6 <UART_SetConfig+0x7ae>
 8005b48:	2308      	movs	r3, #8
 8005b4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b4e:	e2b2      	b.n	80060b6 <UART_SetConfig+0x7ae>
 8005b50:	2310      	movs	r3, #16
 8005b52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b56:	e2ae      	b.n	80060b6 <UART_SetConfig+0x7ae>
 8005b58:	2320      	movs	r3, #32
 8005b5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b5e:	e2aa      	b.n	80060b6 <UART_SetConfig+0x7ae>
 8005b60:	2340      	movs	r3, #64	; 0x40
 8005b62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b66:	e2a6      	b.n	80060b6 <UART_SetConfig+0x7ae>
 8005b68:	2380      	movs	r3, #128	; 0x80
 8005b6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b6e:	e2a2      	b.n	80060b6 <UART_SetConfig+0x7ae>
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a35      	ldr	r2, [pc, #212]	; (8005c4c <UART_SetConfig+0x344>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d130      	bne.n	8005bdc <UART_SetConfig+0x2d4>
 8005b7a:	4b31      	ldr	r3, [pc, #196]	; (8005c40 <UART_SetConfig+0x338>)
 8005b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b7e:	f003 0307 	and.w	r3, r3, #7
 8005b82:	2b05      	cmp	r3, #5
 8005b84:	d826      	bhi.n	8005bd4 <UART_SetConfig+0x2cc>
 8005b86:	a201      	add	r2, pc, #4	; (adr r2, 8005b8c <UART_SetConfig+0x284>)
 8005b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b8c:	08005ba5 	.word	0x08005ba5
 8005b90:	08005bad 	.word	0x08005bad
 8005b94:	08005bb5 	.word	0x08005bb5
 8005b98:	08005bbd 	.word	0x08005bbd
 8005b9c:	08005bc5 	.word	0x08005bc5
 8005ba0:	08005bcd 	.word	0x08005bcd
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005baa:	e284      	b.n	80060b6 <UART_SetConfig+0x7ae>
 8005bac:	2304      	movs	r3, #4
 8005bae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bb2:	e280      	b.n	80060b6 <UART_SetConfig+0x7ae>
 8005bb4:	2308      	movs	r3, #8
 8005bb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bba:	e27c      	b.n	80060b6 <UART_SetConfig+0x7ae>
 8005bbc:	2310      	movs	r3, #16
 8005bbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bc2:	e278      	b.n	80060b6 <UART_SetConfig+0x7ae>
 8005bc4:	2320      	movs	r3, #32
 8005bc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bca:	e274      	b.n	80060b6 <UART_SetConfig+0x7ae>
 8005bcc:	2340      	movs	r3, #64	; 0x40
 8005bce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bd2:	e270      	b.n	80060b6 <UART_SetConfig+0x7ae>
 8005bd4:	2380      	movs	r3, #128	; 0x80
 8005bd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bda:	e26c      	b.n	80060b6 <UART_SetConfig+0x7ae>
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a1b      	ldr	r2, [pc, #108]	; (8005c50 <UART_SetConfig+0x348>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d142      	bne.n	8005c6c <UART_SetConfig+0x364>
 8005be6:	4b16      	ldr	r3, [pc, #88]	; (8005c40 <UART_SetConfig+0x338>)
 8005be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bea:	f003 0307 	and.w	r3, r3, #7
 8005bee:	2b05      	cmp	r3, #5
 8005bf0:	d838      	bhi.n	8005c64 <UART_SetConfig+0x35c>
 8005bf2:	a201      	add	r2, pc, #4	; (adr r2, 8005bf8 <UART_SetConfig+0x2f0>)
 8005bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bf8:	08005c11 	.word	0x08005c11
 8005bfc:	08005c19 	.word	0x08005c19
 8005c00:	08005c21 	.word	0x08005c21
 8005c04:	08005c29 	.word	0x08005c29
 8005c08:	08005c55 	.word	0x08005c55
 8005c0c:	08005c5d 	.word	0x08005c5d
 8005c10:	2300      	movs	r3, #0
 8005c12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c16:	e24e      	b.n	80060b6 <UART_SetConfig+0x7ae>
 8005c18:	2304      	movs	r3, #4
 8005c1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c1e:	e24a      	b.n	80060b6 <UART_SetConfig+0x7ae>
 8005c20:	2308      	movs	r3, #8
 8005c22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c26:	e246      	b.n	80060b6 <UART_SetConfig+0x7ae>
 8005c28:	2310      	movs	r3, #16
 8005c2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c2e:	e242      	b.n	80060b6 <UART_SetConfig+0x7ae>
 8005c30:	cfff69f3 	.word	0xcfff69f3
 8005c34:	58000c00 	.word	0x58000c00
 8005c38:	11fff4ff 	.word	0x11fff4ff
 8005c3c:	40011000 	.word	0x40011000
 8005c40:	58024400 	.word	0x58024400
 8005c44:	40004400 	.word	0x40004400
 8005c48:	40004800 	.word	0x40004800
 8005c4c:	40004c00 	.word	0x40004c00
 8005c50:	40005000 	.word	0x40005000
 8005c54:	2320      	movs	r3, #32
 8005c56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c5a:	e22c      	b.n	80060b6 <UART_SetConfig+0x7ae>
 8005c5c:	2340      	movs	r3, #64	; 0x40
 8005c5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c62:	e228      	b.n	80060b6 <UART_SetConfig+0x7ae>
 8005c64:	2380      	movs	r3, #128	; 0x80
 8005c66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c6a:	e224      	b.n	80060b6 <UART_SetConfig+0x7ae>
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4ab1      	ldr	r2, [pc, #708]	; (8005f38 <UART_SetConfig+0x630>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d176      	bne.n	8005d64 <UART_SetConfig+0x45c>
 8005c76:	4bb1      	ldr	r3, [pc, #708]	; (8005f3c <UART_SetConfig+0x634>)
 8005c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c7e:	2b28      	cmp	r3, #40	; 0x28
 8005c80:	d86c      	bhi.n	8005d5c <UART_SetConfig+0x454>
 8005c82:	a201      	add	r2, pc, #4	; (adr r2, 8005c88 <UART_SetConfig+0x380>)
 8005c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c88:	08005d2d 	.word	0x08005d2d
 8005c8c:	08005d5d 	.word	0x08005d5d
 8005c90:	08005d5d 	.word	0x08005d5d
 8005c94:	08005d5d 	.word	0x08005d5d
 8005c98:	08005d5d 	.word	0x08005d5d
 8005c9c:	08005d5d 	.word	0x08005d5d
 8005ca0:	08005d5d 	.word	0x08005d5d
 8005ca4:	08005d5d 	.word	0x08005d5d
 8005ca8:	08005d35 	.word	0x08005d35
 8005cac:	08005d5d 	.word	0x08005d5d
 8005cb0:	08005d5d 	.word	0x08005d5d
 8005cb4:	08005d5d 	.word	0x08005d5d
 8005cb8:	08005d5d 	.word	0x08005d5d
 8005cbc:	08005d5d 	.word	0x08005d5d
 8005cc0:	08005d5d 	.word	0x08005d5d
 8005cc4:	08005d5d 	.word	0x08005d5d
 8005cc8:	08005d3d 	.word	0x08005d3d
 8005ccc:	08005d5d 	.word	0x08005d5d
 8005cd0:	08005d5d 	.word	0x08005d5d
 8005cd4:	08005d5d 	.word	0x08005d5d
 8005cd8:	08005d5d 	.word	0x08005d5d
 8005cdc:	08005d5d 	.word	0x08005d5d
 8005ce0:	08005d5d 	.word	0x08005d5d
 8005ce4:	08005d5d 	.word	0x08005d5d
 8005ce8:	08005d45 	.word	0x08005d45
 8005cec:	08005d5d 	.word	0x08005d5d
 8005cf0:	08005d5d 	.word	0x08005d5d
 8005cf4:	08005d5d 	.word	0x08005d5d
 8005cf8:	08005d5d 	.word	0x08005d5d
 8005cfc:	08005d5d 	.word	0x08005d5d
 8005d00:	08005d5d 	.word	0x08005d5d
 8005d04:	08005d5d 	.word	0x08005d5d
 8005d08:	08005d4d 	.word	0x08005d4d
 8005d0c:	08005d5d 	.word	0x08005d5d
 8005d10:	08005d5d 	.word	0x08005d5d
 8005d14:	08005d5d 	.word	0x08005d5d
 8005d18:	08005d5d 	.word	0x08005d5d
 8005d1c:	08005d5d 	.word	0x08005d5d
 8005d20:	08005d5d 	.word	0x08005d5d
 8005d24:	08005d5d 	.word	0x08005d5d
 8005d28:	08005d55 	.word	0x08005d55
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d32:	e1c0      	b.n	80060b6 <UART_SetConfig+0x7ae>
 8005d34:	2304      	movs	r3, #4
 8005d36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d3a:	e1bc      	b.n	80060b6 <UART_SetConfig+0x7ae>
 8005d3c:	2308      	movs	r3, #8
 8005d3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d42:	e1b8      	b.n	80060b6 <UART_SetConfig+0x7ae>
 8005d44:	2310      	movs	r3, #16
 8005d46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d4a:	e1b4      	b.n	80060b6 <UART_SetConfig+0x7ae>
 8005d4c:	2320      	movs	r3, #32
 8005d4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d52:	e1b0      	b.n	80060b6 <UART_SetConfig+0x7ae>
 8005d54:	2340      	movs	r3, #64	; 0x40
 8005d56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d5a:	e1ac      	b.n	80060b6 <UART_SetConfig+0x7ae>
 8005d5c:	2380      	movs	r3, #128	; 0x80
 8005d5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d62:	e1a8      	b.n	80060b6 <UART_SetConfig+0x7ae>
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a75      	ldr	r2, [pc, #468]	; (8005f40 <UART_SetConfig+0x638>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d130      	bne.n	8005dd0 <UART_SetConfig+0x4c8>
 8005d6e:	4b73      	ldr	r3, [pc, #460]	; (8005f3c <UART_SetConfig+0x634>)
 8005d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d72:	f003 0307 	and.w	r3, r3, #7
 8005d76:	2b05      	cmp	r3, #5
 8005d78:	d826      	bhi.n	8005dc8 <UART_SetConfig+0x4c0>
 8005d7a:	a201      	add	r2, pc, #4	; (adr r2, 8005d80 <UART_SetConfig+0x478>)
 8005d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d80:	08005d99 	.word	0x08005d99
 8005d84:	08005da1 	.word	0x08005da1
 8005d88:	08005da9 	.word	0x08005da9
 8005d8c:	08005db1 	.word	0x08005db1
 8005d90:	08005db9 	.word	0x08005db9
 8005d94:	08005dc1 	.word	0x08005dc1
 8005d98:	2300      	movs	r3, #0
 8005d9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d9e:	e18a      	b.n	80060b6 <UART_SetConfig+0x7ae>
 8005da0:	2304      	movs	r3, #4
 8005da2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005da6:	e186      	b.n	80060b6 <UART_SetConfig+0x7ae>
 8005da8:	2308      	movs	r3, #8
 8005daa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dae:	e182      	b.n	80060b6 <UART_SetConfig+0x7ae>
 8005db0:	2310      	movs	r3, #16
 8005db2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005db6:	e17e      	b.n	80060b6 <UART_SetConfig+0x7ae>
 8005db8:	2320      	movs	r3, #32
 8005dba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dbe:	e17a      	b.n	80060b6 <UART_SetConfig+0x7ae>
 8005dc0:	2340      	movs	r3, #64	; 0x40
 8005dc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dc6:	e176      	b.n	80060b6 <UART_SetConfig+0x7ae>
 8005dc8:	2380      	movs	r3, #128	; 0x80
 8005dca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dce:	e172      	b.n	80060b6 <UART_SetConfig+0x7ae>
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a5b      	ldr	r2, [pc, #364]	; (8005f44 <UART_SetConfig+0x63c>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d130      	bne.n	8005e3c <UART_SetConfig+0x534>
 8005dda:	4b58      	ldr	r3, [pc, #352]	; (8005f3c <UART_SetConfig+0x634>)
 8005ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dde:	f003 0307 	and.w	r3, r3, #7
 8005de2:	2b05      	cmp	r3, #5
 8005de4:	d826      	bhi.n	8005e34 <UART_SetConfig+0x52c>
 8005de6:	a201      	add	r2, pc, #4	; (adr r2, 8005dec <UART_SetConfig+0x4e4>)
 8005de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dec:	08005e05 	.word	0x08005e05
 8005df0:	08005e0d 	.word	0x08005e0d
 8005df4:	08005e15 	.word	0x08005e15
 8005df8:	08005e1d 	.word	0x08005e1d
 8005dfc:	08005e25 	.word	0x08005e25
 8005e00:	08005e2d 	.word	0x08005e2d
 8005e04:	2300      	movs	r3, #0
 8005e06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e0a:	e154      	b.n	80060b6 <UART_SetConfig+0x7ae>
 8005e0c:	2304      	movs	r3, #4
 8005e0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e12:	e150      	b.n	80060b6 <UART_SetConfig+0x7ae>
 8005e14:	2308      	movs	r3, #8
 8005e16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e1a:	e14c      	b.n	80060b6 <UART_SetConfig+0x7ae>
 8005e1c:	2310      	movs	r3, #16
 8005e1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e22:	e148      	b.n	80060b6 <UART_SetConfig+0x7ae>
 8005e24:	2320      	movs	r3, #32
 8005e26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e2a:	e144      	b.n	80060b6 <UART_SetConfig+0x7ae>
 8005e2c:	2340      	movs	r3, #64	; 0x40
 8005e2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e32:	e140      	b.n	80060b6 <UART_SetConfig+0x7ae>
 8005e34:	2380      	movs	r3, #128	; 0x80
 8005e36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e3a:	e13c      	b.n	80060b6 <UART_SetConfig+0x7ae>
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a41      	ldr	r2, [pc, #260]	; (8005f48 <UART_SetConfig+0x640>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	f040 8082 	bne.w	8005f4c <UART_SetConfig+0x644>
 8005e48:	4b3c      	ldr	r3, [pc, #240]	; (8005f3c <UART_SetConfig+0x634>)
 8005e4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e4c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e50:	2b28      	cmp	r3, #40	; 0x28
 8005e52:	d86d      	bhi.n	8005f30 <UART_SetConfig+0x628>
 8005e54:	a201      	add	r2, pc, #4	; (adr r2, 8005e5c <UART_SetConfig+0x554>)
 8005e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e5a:	bf00      	nop
 8005e5c:	08005f01 	.word	0x08005f01
 8005e60:	08005f31 	.word	0x08005f31
 8005e64:	08005f31 	.word	0x08005f31
 8005e68:	08005f31 	.word	0x08005f31
 8005e6c:	08005f31 	.word	0x08005f31
 8005e70:	08005f31 	.word	0x08005f31
 8005e74:	08005f31 	.word	0x08005f31
 8005e78:	08005f31 	.word	0x08005f31
 8005e7c:	08005f09 	.word	0x08005f09
 8005e80:	08005f31 	.word	0x08005f31
 8005e84:	08005f31 	.word	0x08005f31
 8005e88:	08005f31 	.word	0x08005f31
 8005e8c:	08005f31 	.word	0x08005f31
 8005e90:	08005f31 	.word	0x08005f31
 8005e94:	08005f31 	.word	0x08005f31
 8005e98:	08005f31 	.word	0x08005f31
 8005e9c:	08005f11 	.word	0x08005f11
 8005ea0:	08005f31 	.word	0x08005f31
 8005ea4:	08005f31 	.word	0x08005f31
 8005ea8:	08005f31 	.word	0x08005f31
 8005eac:	08005f31 	.word	0x08005f31
 8005eb0:	08005f31 	.word	0x08005f31
 8005eb4:	08005f31 	.word	0x08005f31
 8005eb8:	08005f31 	.word	0x08005f31
 8005ebc:	08005f19 	.word	0x08005f19
 8005ec0:	08005f31 	.word	0x08005f31
 8005ec4:	08005f31 	.word	0x08005f31
 8005ec8:	08005f31 	.word	0x08005f31
 8005ecc:	08005f31 	.word	0x08005f31
 8005ed0:	08005f31 	.word	0x08005f31
 8005ed4:	08005f31 	.word	0x08005f31
 8005ed8:	08005f31 	.word	0x08005f31
 8005edc:	08005f21 	.word	0x08005f21
 8005ee0:	08005f31 	.word	0x08005f31
 8005ee4:	08005f31 	.word	0x08005f31
 8005ee8:	08005f31 	.word	0x08005f31
 8005eec:	08005f31 	.word	0x08005f31
 8005ef0:	08005f31 	.word	0x08005f31
 8005ef4:	08005f31 	.word	0x08005f31
 8005ef8:	08005f31 	.word	0x08005f31
 8005efc:	08005f29 	.word	0x08005f29
 8005f00:	2301      	movs	r3, #1
 8005f02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f06:	e0d6      	b.n	80060b6 <UART_SetConfig+0x7ae>
 8005f08:	2304      	movs	r3, #4
 8005f0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f0e:	e0d2      	b.n	80060b6 <UART_SetConfig+0x7ae>
 8005f10:	2308      	movs	r3, #8
 8005f12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f16:	e0ce      	b.n	80060b6 <UART_SetConfig+0x7ae>
 8005f18:	2310      	movs	r3, #16
 8005f1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f1e:	e0ca      	b.n	80060b6 <UART_SetConfig+0x7ae>
 8005f20:	2320      	movs	r3, #32
 8005f22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f26:	e0c6      	b.n	80060b6 <UART_SetConfig+0x7ae>
 8005f28:	2340      	movs	r3, #64	; 0x40
 8005f2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f2e:	e0c2      	b.n	80060b6 <UART_SetConfig+0x7ae>
 8005f30:	2380      	movs	r3, #128	; 0x80
 8005f32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f36:	e0be      	b.n	80060b6 <UART_SetConfig+0x7ae>
 8005f38:	40011400 	.word	0x40011400
 8005f3c:	58024400 	.word	0x58024400
 8005f40:	40007800 	.word	0x40007800
 8005f44:	40007c00 	.word	0x40007c00
 8005f48:	40011800 	.word	0x40011800
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4aad      	ldr	r2, [pc, #692]	; (8006208 <UART_SetConfig+0x900>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d176      	bne.n	8006044 <UART_SetConfig+0x73c>
 8005f56:	4bad      	ldr	r3, [pc, #692]	; (800620c <UART_SetConfig+0x904>)
 8005f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f5e:	2b28      	cmp	r3, #40	; 0x28
 8005f60:	d86c      	bhi.n	800603c <UART_SetConfig+0x734>
 8005f62:	a201      	add	r2, pc, #4	; (adr r2, 8005f68 <UART_SetConfig+0x660>)
 8005f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f68:	0800600d 	.word	0x0800600d
 8005f6c:	0800603d 	.word	0x0800603d
 8005f70:	0800603d 	.word	0x0800603d
 8005f74:	0800603d 	.word	0x0800603d
 8005f78:	0800603d 	.word	0x0800603d
 8005f7c:	0800603d 	.word	0x0800603d
 8005f80:	0800603d 	.word	0x0800603d
 8005f84:	0800603d 	.word	0x0800603d
 8005f88:	08006015 	.word	0x08006015
 8005f8c:	0800603d 	.word	0x0800603d
 8005f90:	0800603d 	.word	0x0800603d
 8005f94:	0800603d 	.word	0x0800603d
 8005f98:	0800603d 	.word	0x0800603d
 8005f9c:	0800603d 	.word	0x0800603d
 8005fa0:	0800603d 	.word	0x0800603d
 8005fa4:	0800603d 	.word	0x0800603d
 8005fa8:	0800601d 	.word	0x0800601d
 8005fac:	0800603d 	.word	0x0800603d
 8005fb0:	0800603d 	.word	0x0800603d
 8005fb4:	0800603d 	.word	0x0800603d
 8005fb8:	0800603d 	.word	0x0800603d
 8005fbc:	0800603d 	.word	0x0800603d
 8005fc0:	0800603d 	.word	0x0800603d
 8005fc4:	0800603d 	.word	0x0800603d
 8005fc8:	08006025 	.word	0x08006025
 8005fcc:	0800603d 	.word	0x0800603d
 8005fd0:	0800603d 	.word	0x0800603d
 8005fd4:	0800603d 	.word	0x0800603d
 8005fd8:	0800603d 	.word	0x0800603d
 8005fdc:	0800603d 	.word	0x0800603d
 8005fe0:	0800603d 	.word	0x0800603d
 8005fe4:	0800603d 	.word	0x0800603d
 8005fe8:	0800602d 	.word	0x0800602d
 8005fec:	0800603d 	.word	0x0800603d
 8005ff0:	0800603d 	.word	0x0800603d
 8005ff4:	0800603d 	.word	0x0800603d
 8005ff8:	0800603d 	.word	0x0800603d
 8005ffc:	0800603d 	.word	0x0800603d
 8006000:	0800603d 	.word	0x0800603d
 8006004:	0800603d 	.word	0x0800603d
 8006008:	08006035 	.word	0x08006035
 800600c:	2301      	movs	r3, #1
 800600e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006012:	e050      	b.n	80060b6 <UART_SetConfig+0x7ae>
 8006014:	2304      	movs	r3, #4
 8006016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800601a:	e04c      	b.n	80060b6 <UART_SetConfig+0x7ae>
 800601c:	2308      	movs	r3, #8
 800601e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006022:	e048      	b.n	80060b6 <UART_SetConfig+0x7ae>
 8006024:	2310      	movs	r3, #16
 8006026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800602a:	e044      	b.n	80060b6 <UART_SetConfig+0x7ae>
 800602c:	2320      	movs	r3, #32
 800602e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006032:	e040      	b.n	80060b6 <UART_SetConfig+0x7ae>
 8006034:	2340      	movs	r3, #64	; 0x40
 8006036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800603a:	e03c      	b.n	80060b6 <UART_SetConfig+0x7ae>
 800603c:	2380      	movs	r3, #128	; 0x80
 800603e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006042:	e038      	b.n	80060b6 <UART_SetConfig+0x7ae>
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a71      	ldr	r2, [pc, #452]	; (8006210 <UART_SetConfig+0x908>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d130      	bne.n	80060b0 <UART_SetConfig+0x7a8>
 800604e:	4b6f      	ldr	r3, [pc, #444]	; (800620c <UART_SetConfig+0x904>)
 8006050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006052:	f003 0307 	and.w	r3, r3, #7
 8006056:	2b05      	cmp	r3, #5
 8006058:	d826      	bhi.n	80060a8 <UART_SetConfig+0x7a0>
 800605a:	a201      	add	r2, pc, #4	; (adr r2, 8006060 <UART_SetConfig+0x758>)
 800605c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006060:	08006079 	.word	0x08006079
 8006064:	08006081 	.word	0x08006081
 8006068:	08006089 	.word	0x08006089
 800606c:	08006091 	.word	0x08006091
 8006070:	08006099 	.word	0x08006099
 8006074:	080060a1 	.word	0x080060a1
 8006078:	2302      	movs	r3, #2
 800607a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800607e:	e01a      	b.n	80060b6 <UART_SetConfig+0x7ae>
 8006080:	2304      	movs	r3, #4
 8006082:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006086:	e016      	b.n	80060b6 <UART_SetConfig+0x7ae>
 8006088:	2308      	movs	r3, #8
 800608a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800608e:	e012      	b.n	80060b6 <UART_SetConfig+0x7ae>
 8006090:	2310      	movs	r3, #16
 8006092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006096:	e00e      	b.n	80060b6 <UART_SetConfig+0x7ae>
 8006098:	2320      	movs	r3, #32
 800609a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800609e:	e00a      	b.n	80060b6 <UART_SetConfig+0x7ae>
 80060a0:	2340      	movs	r3, #64	; 0x40
 80060a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060a6:	e006      	b.n	80060b6 <UART_SetConfig+0x7ae>
 80060a8:	2380      	movs	r3, #128	; 0x80
 80060aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060ae:	e002      	b.n	80060b6 <UART_SetConfig+0x7ae>
 80060b0:	2380      	movs	r3, #128	; 0x80
 80060b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a55      	ldr	r2, [pc, #340]	; (8006210 <UART_SetConfig+0x908>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	f040 80f8 	bne.w	80062b2 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80060c2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80060c6:	2b20      	cmp	r3, #32
 80060c8:	dc46      	bgt.n	8006158 <UART_SetConfig+0x850>
 80060ca:	2b02      	cmp	r3, #2
 80060cc:	db75      	blt.n	80061ba <UART_SetConfig+0x8b2>
 80060ce:	3b02      	subs	r3, #2
 80060d0:	2b1e      	cmp	r3, #30
 80060d2:	d872      	bhi.n	80061ba <UART_SetConfig+0x8b2>
 80060d4:	a201      	add	r2, pc, #4	; (adr r2, 80060dc <UART_SetConfig+0x7d4>)
 80060d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060da:	bf00      	nop
 80060dc:	0800615f 	.word	0x0800615f
 80060e0:	080061bb 	.word	0x080061bb
 80060e4:	08006167 	.word	0x08006167
 80060e8:	080061bb 	.word	0x080061bb
 80060ec:	080061bb 	.word	0x080061bb
 80060f0:	080061bb 	.word	0x080061bb
 80060f4:	08006177 	.word	0x08006177
 80060f8:	080061bb 	.word	0x080061bb
 80060fc:	080061bb 	.word	0x080061bb
 8006100:	080061bb 	.word	0x080061bb
 8006104:	080061bb 	.word	0x080061bb
 8006108:	080061bb 	.word	0x080061bb
 800610c:	080061bb 	.word	0x080061bb
 8006110:	080061bb 	.word	0x080061bb
 8006114:	08006187 	.word	0x08006187
 8006118:	080061bb 	.word	0x080061bb
 800611c:	080061bb 	.word	0x080061bb
 8006120:	080061bb 	.word	0x080061bb
 8006124:	080061bb 	.word	0x080061bb
 8006128:	080061bb 	.word	0x080061bb
 800612c:	080061bb 	.word	0x080061bb
 8006130:	080061bb 	.word	0x080061bb
 8006134:	080061bb 	.word	0x080061bb
 8006138:	080061bb 	.word	0x080061bb
 800613c:	080061bb 	.word	0x080061bb
 8006140:	080061bb 	.word	0x080061bb
 8006144:	080061bb 	.word	0x080061bb
 8006148:	080061bb 	.word	0x080061bb
 800614c:	080061bb 	.word	0x080061bb
 8006150:	080061bb 	.word	0x080061bb
 8006154:	080061ad 	.word	0x080061ad
 8006158:	2b40      	cmp	r3, #64	; 0x40
 800615a:	d02a      	beq.n	80061b2 <UART_SetConfig+0x8aa>
 800615c:	e02d      	b.n	80061ba <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800615e:	f7fe ff61 	bl	8005024 <HAL_RCCEx_GetD3PCLK1Freq>
 8006162:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006164:	e02f      	b.n	80061c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006166:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800616a:	4618      	mov	r0, r3
 800616c:	f7fe ff70 	bl	8005050 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006172:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006174:	e027      	b.n	80061c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006176:	f107 0318 	add.w	r3, r7, #24
 800617a:	4618      	mov	r0, r3
 800617c:	f7ff f8bc 	bl	80052f8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006180:	69fb      	ldr	r3, [r7, #28]
 8006182:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006184:	e01f      	b.n	80061c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006186:	4b21      	ldr	r3, [pc, #132]	; (800620c <UART_SetConfig+0x904>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f003 0320 	and.w	r3, r3, #32
 800618e:	2b00      	cmp	r3, #0
 8006190:	d009      	beq.n	80061a6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006192:	4b1e      	ldr	r3, [pc, #120]	; (800620c <UART_SetConfig+0x904>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	08db      	lsrs	r3, r3, #3
 8006198:	f003 0303 	and.w	r3, r3, #3
 800619c:	4a1d      	ldr	r2, [pc, #116]	; (8006214 <UART_SetConfig+0x90c>)
 800619e:	fa22 f303 	lsr.w	r3, r2, r3
 80061a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80061a4:	e00f      	b.n	80061c6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80061a6:	4b1b      	ldr	r3, [pc, #108]	; (8006214 <UART_SetConfig+0x90c>)
 80061a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80061aa:	e00c      	b.n	80061c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80061ac:	4b1a      	ldr	r3, [pc, #104]	; (8006218 <UART_SetConfig+0x910>)
 80061ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80061b0:	e009      	b.n	80061c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80061b8:	e005      	b.n	80061c6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80061ba:	2300      	movs	r3, #0
 80061bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80061c4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80061c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	f000 81ee 	beq.w	80065aa <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d2:	4a12      	ldr	r2, [pc, #72]	; (800621c <UART_SetConfig+0x914>)
 80061d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061d8:	461a      	mov	r2, r3
 80061da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80061e0:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	685a      	ldr	r2, [r3, #4]
 80061e6:	4613      	mov	r3, r2
 80061e8:	005b      	lsls	r3, r3, #1
 80061ea:	4413      	add	r3, r2
 80061ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061ee:	429a      	cmp	r2, r3
 80061f0:	d305      	bcc.n	80061fe <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80061f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d910      	bls.n	8006220 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006204:	e1d1      	b.n	80065aa <UART_SetConfig+0xca2>
 8006206:	bf00      	nop
 8006208:	40011c00 	.word	0x40011c00
 800620c:	58024400 	.word	0x58024400
 8006210:	58000c00 	.word	0x58000c00
 8006214:	03d09000 	.word	0x03d09000
 8006218:	003d0900 	.word	0x003d0900
 800621c:	08006ca8 	.word	0x08006ca8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006220:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006222:	2200      	movs	r2, #0
 8006224:	60bb      	str	r3, [r7, #8]
 8006226:	60fa      	str	r2, [r7, #12]
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800622c:	4ac0      	ldr	r2, [pc, #768]	; (8006530 <UART_SetConfig+0xc28>)
 800622e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006232:	b29b      	uxth	r3, r3
 8006234:	2200      	movs	r2, #0
 8006236:	603b      	str	r3, [r7, #0]
 8006238:	607a      	str	r2, [r7, #4]
 800623a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800623e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006242:	f7fa f865 	bl	8000310 <__aeabi_uldivmod>
 8006246:	4602      	mov	r2, r0
 8006248:	460b      	mov	r3, r1
 800624a:	4610      	mov	r0, r2
 800624c:	4619      	mov	r1, r3
 800624e:	f04f 0200 	mov.w	r2, #0
 8006252:	f04f 0300 	mov.w	r3, #0
 8006256:	020b      	lsls	r3, r1, #8
 8006258:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800625c:	0202      	lsls	r2, r0, #8
 800625e:	6979      	ldr	r1, [r7, #20]
 8006260:	6849      	ldr	r1, [r1, #4]
 8006262:	0849      	lsrs	r1, r1, #1
 8006264:	2000      	movs	r0, #0
 8006266:	460c      	mov	r4, r1
 8006268:	4605      	mov	r5, r0
 800626a:	eb12 0804 	adds.w	r8, r2, r4
 800626e:	eb43 0905 	adc.w	r9, r3, r5
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	2200      	movs	r2, #0
 8006278:	469a      	mov	sl, r3
 800627a:	4693      	mov	fp, r2
 800627c:	4652      	mov	r2, sl
 800627e:	465b      	mov	r3, fp
 8006280:	4640      	mov	r0, r8
 8006282:	4649      	mov	r1, r9
 8006284:	f7fa f844 	bl	8000310 <__aeabi_uldivmod>
 8006288:	4602      	mov	r2, r0
 800628a:	460b      	mov	r3, r1
 800628c:	4613      	mov	r3, r2
 800628e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006292:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006296:	d308      	bcc.n	80062aa <UART_SetConfig+0x9a2>
 8006298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800629a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800629e:	d204      	bcs.n	80062aa <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80062a6:	60da      	str	r2, [r3, #12]
 80062a8:	e17f      	b.n	80065aa <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80062b0:	e17b      	b.n	80065aa <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	69db      	ldr	r3, [r3, #28]
 80062b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062ba:	f040 80bd 	bne.w	8006438 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80062be:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80062c2:	2b20      	cmp	r3, #32
 80062c4:	dc48      	bgt.n	8006358 <UART_SetConfig+0xa50>
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	db7b      	blt.n	80063c2 <UART_SetConfig+0xaba>
 80062ca:	2b20      	cmp	r3, #32
 80062cc:	d879      	bhi.n	80063c2 <UART_SetConfig+0xaba>
 80062ce:	a201      	add	r2, pc, #4	; (adr r2, 80062d4 <UART_SetConfig+0x9cc>)
 80062d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062d4:	0800635f 	.word	0x0800635f
 80062d8:	08006367 	.word	0x08006367
 80062dc:	080063c3 	.word	0x080063c3
 80062e0:	080063c3 	.word	0x080063c3
 80062e4:	0800636f 	.word	0x0800636f
 80062e8:	080063c3 	.word	0x080063c3
 80062ec:	080063c3 	.word	0x080063c3
 80062f0:	080063c3 	.word	0x080063c3
 80062f4:	0800637f 	.word	0x0800637f
 80062f8:	080063c3 	.word	0x080063c3
 80062fc:	080063c3 	.word	0x080063c3
 8006300:	080063c3 	.word	0x080063c3
 8006304:	080063c3 	.word	0x080063c3
 8006308:	080063c3 	.word	0x080063c3
 800630c:	080063c3 	.word	0x080063c3
 8006310:	080063c3 	.word	0x080063c3
 8006314:	0800638f 	.word	0x0800638f
 8006318:	080063c3 	.word	0x080063c3
 800631c:	080063c3 	.word	0x080063c3
 8006320:	080063c3 	.word	0x080063c3
 8006324:	080063c3 	.word	0x080063c3
 8006328:	080063c3 	.word	0x080063c3
 800632c:	080063c3 	.word	0x080063c3
 8006330:	080063c3 	.word	0x080063c3
 8006334:	080063c3 	.word	0x080063c3
 8006338:	080063c3 	.word	0x080063c3
 800633c:	080063c3 	.word	0x080063c3
 8006340:	080063c3 	.word	0x080063c3
 8006344:	080063c3 	.word	0x080063c3
 8006348:	080063c3 	.word	0x080063c3
 800634c:	080063c3 	.word	0x080063c3
 8006350:	080063c3 	.word	0x080063c3
 8006354:	080063b5 	.word	0x080063b5
 8006358:	2b40      	cmp	r3, #64	; 0x40
 800635a:	d02e      	beq.n	80063ba <UART_SetConfig+0xab2>
 800635c:	e031      	b.n	80063c2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800635e:	f7fd fc95 	bl	8003c8c <HAL_RCC_GetPCLK1Freq>
 8006362:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006364:	e033      	b.n	80063ce <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006366:	f7fd fca7 	bl	8003cb8 <HAL_RCC_GetPCLK2Freq>
 800636a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800636c:	e02f      	b.n	80063ce <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800636e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006372:	4618      	mov	r0, r3
 8006374:	f7fe fe6c 	bl	8005050 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800637a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800637c:	e027      	b.n	80063ce <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800637e:	f107 0318 	add.w	r3, r7, #24
 8006382:	4618      	mov	r0, r3
 8006384:	f7fe ffb8 	bl	80052f8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006388:	69fb      	ldr	r3, [r7, #28]
 800638a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800638c:	e01f      	b.n	80063ce <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800638e:	4b69      	ldr	r3, [pc, #420]	; (8006534 <UART_SetConfig+0xc2c>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f003 0320 	and.w	r3, r3, #32
 8006396:	2b00      	cmp	r3, #0
 8006398:	d009      	beq.n	80063ae <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800639a:	4b66      	ldr	r3, [pc, #408]	; (8006534 <UART_SetConfig+0xc2c>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	08db      	lsrs	r3, r3, #3
 80063a0:	f003 0303 	and.w	r3, r3, #3
 80063a4:	4a64      	ldr	r2, [pc, #400]	; (8006538 <UART_SetConfig+0xc30>)
 80063a6:	fa22 f303 	lsr.w	r3, r2, r3
 80063aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80063ac:	e00f      	b.n	80063ce <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80063ae:	4b62      	ldr	r3, [pc, #392]	; (8006538 <UART_SetConfig+0xc30>)
 80063b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80063b2:	e00c      	b.n	80063ce <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80063b4:	4b61      	ldr	r3, [pc, #388]	; (800653c <UART_SetConfig+0xc34>)
 80063b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80063b8:	e009      	b.n	80063ce <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80063c0:	e005      	b.n	80063ce <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80063c2:	2300      	movs	r3, #0
 80063c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80063cc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80063ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	f000 80ea 	beq.w	80065aa <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063da:	4a55      	ldr	r2, [pc, #340]	; (8006530 <UART_SetConfig+0xc28>)
 80063dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063e0:	461a      	mov	r2, r3
 80063e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80063e8:	005a      	lsls	r2, r3, #1
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	085b      	lsrs	r3, r3, #1
 80063f0:	441a      	add	r2, r3
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80063fa:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063fe:	2b0f      	cmp	r3, #15
 8006400:	d916      	bls.n	8006430 <UART_SetConfig+0xb28>
 8006402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006408:	d212      	bcs.n	8006430 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800640a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800640c:	b29b      	uxth	r3, r3
 800640e:	f023 030f 	bic.w	r3, r3, #15
 8006412:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006416:	085b      	lsrs	r3, r3, #1
 8006418:	b29b      	uxth	r3, r3
 800641a:	f003 0307 	and.w	r3, r3, #7
 800641e:	b29a      	uxth	r2, r3
 8006420:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006422:	4313      	orrs	r3, r2
 8006424:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800642c:	60da      	str	r2, [r3, #12]
 800642e:	e0bc      	b.n	80065aa <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006436:	e0b8      	b.n	80065aa <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006438:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800643c:	2b20      	cmp	r3, #32
 800643e:	dc4b      	bgt.n	80064d8 <UART_SetConfig+0xbd0>
 8006440:	2b00      	cmp	r3, #0
 8006442:	f2c0 8087 	blt.w	8006554 <UART_SetConfig+0xc4c>
 8006446:	2b20      	cmp	r3, #32
 8006448:	f200 8084 	bhi.w	8006554 <UART_SetConfig+0xc4c>
 800644c:	a201      	add	r2, pc, #4	; (adr r2, 8006454 <UART_SetConfig+0xb4c>)
 800644e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006452:	bf00      	nop
 8006454:	080064df 	.word	0x080064df
 8006458:	080064e7 	.word	0x080064e7
 800645c:	08006555 	.word	0x08006555
 8006460:	08006555 	.word	0x08006555
 8006464:	080064ef 	.word	0x080064ef
 8006468:	08006555 	.word	0x08006555
 800646c:	08006555 	.word	0x08006555
 8006470:	08006555 	.word	0x08006555
 8006474:	080064ff 	.word	0x080064ff
 8006478:	08006555 	.word	0x08006555
 800647c:	08006555 	.word	0x08006555
 8006480:	08006555 	.word	0x08006555
 8006484:	08006555 	.word	0x08006555
 8006488:	08006555 	.word	0x08006555
 800648c:	08006555 	.word	0x08006555
 8006490:	08006555 	.word	0x08006555
 8006494:	0800650f 	.word	0x0800650f
 8006498:	08006555 	.word	0x08006555
 800649c:	08006555 	.word	0x08006555
 80064a0:	08006555 	.word	0x08006555
 80064a4:	08006555 	.word	0x08006555
 80064a8:	08006555 	.word	0x08006555
 80064ac:	08006555 	.word	0x08006555
 80064b0:	08006555 	.word	0x08006555
 80064b4:	08006555 	.word	0x08006555
 80064b8:	08006555 	.word	0x08006555
 80064bc:	08006555 	.word	0x08006555
 80064c0:	08006555 	.word	0x08006555
 80064c4:	08006555 	.word	0x08006555
 80064c8:	08006555 	.word	0x08006555
 80064cc:	08006555 	.word	0x08006555
 80064d0:	08006555 	.word	0x08006555
 80064d4:	08006547 	.word	0x08006547
 80064d8:	2b40      	cmp	r3, #64	; 0x40
 80064da:	d037      	beq.n	800654c <UART_SetConfig+0xc44>
 80064dc:	e03a      	b.n	8006554 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064de:	f7fd fbd5 	bl	8003c8c <HAL_RCC_GetPCLK1Freq>
 80064e2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80064e4:	e03c      	b.n	8006560 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064e6:	f7fd fbe7 	bl	8003cb8 <HAL_RCC_GetPCLK2Freq>
 80064ea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80064ec:	e038      	b.n	8006560 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80064ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064f2:	4618      	mov	r0, r3
 80064f4:	f7fe fdac 	bl	8005050 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80064f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80064fc:	e030      	b.n	8006560 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80064fe:	f107 0318 	add.w	r3, r7, #24
 8006502:	4618      	mov	r0, r3
 8006504:	f7fe fef8 	bl	80052f8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006508:	69fb      	ldr	r3, [r7, #28]
 800650a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800650c:	e028      	b.n	8006560 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800650e:	4b09      	ldr	r3, [pc, #36]	; (8006534 <UART_SetConfig+0xc2c>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f003 0320 	and.w	r3, r3, #32
 8006516:	2b00      	cmp	r3, #0
 8006518:	d012      	beq.n	8006540 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800651a:	4b06      	ldr	r3, [pc, #24]	; (8006534 <UART_SetConfig+0xc2c>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	08db      	lsrs	r3, r3, #3
 8006520:	f003 0303 	and.w	r3, r3, #3
 8006524:	4a04      	ldr	r2, [pc, #16]	; (8006538 <UART_SetConfig+0xc30>)
 8006526:	fa22 f303 	lsr.w	r3, r2, r3
 800652a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800652c:	e018      	b.n	8006560 <UART_SetConfig+0xc58>
 800652e:	bf00      	nop
 8006530:	08006ca8 	.word	0x08006ca8
 8006534:	58024400 	.word	0x58024400
 8006538:	03d09000 	.word	0x03d09000
 800653c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8006540:	4b24      	ldr	r3, [pc, #144]	; (80065d4 <UART_SetConfig+0xccc>)
 8006542:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006544:	e00c      	b.n	8006560 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006546:	4b24      	ldr	r3, [pc, #144]	; (80065d8 <UART_SetConfig+0xcd0>)
 8006548:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800654a:	e009      	b.n	8006560 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800654c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006550:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006552:	e005      	b.n	8006560 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8006554:	2300      	movs	r3, #0
 8006556:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006558:	2301      	movs	r3, #1
 800655a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800655e:	bf00      	nop
    }

    if (pclk != 0U)
 8006560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006562:	2b00      	cmp	r3, #0
 8006564:	d021      	beq.n	80065aa <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800656a:	4a1c      	ldr	r2, [pc, #112]	; (80065dc <UART_SetConfig+0xcd4>)
 800656c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006570:	461a      	mov	r2, r3
 8006572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006574:	fbb3 f2f2 	udiv	r2, r3, r2
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	085b      	lsrs	r3, r3, #1
 800657e:	441a      	add	r2, r3
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	fbb2 f3f3 	udiv	r3, r2, r3
 8006588:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800658a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800658c:	2b0f      	cmp	r3, #15
 800658e:	d909      	bls.n	80065a4 <UART_SetConfig+0xc9c>
 8006590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006592:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006596:	d205      	bcs.n	80065a4 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800659a:	b29a      	uxth	r2, r3
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	60da      	str	r2, [r3, #12]
 80065a2:	e002      	b.n	80065aa <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80065a4:	2301      	movs	r3, #1
 80065a6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	2201      	movs	r2, #1
 80065ae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	2201      	movs	r2, #1
 80065b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	2200      	movs	r2, #0
 80065be:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	2200      	movs	r2, #0
 80065c4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80065c6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3748      	adds	r7, #72	; 0x48
 80065ce:	46bd      	mov	sp, r7
 80065d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065d4:	03d09000 	.word	0x03d09000
 80065d8:	003d0900 	.word	0x003d0900
 80065dc:	08006ca8 	.word	0x08006ca8

080065e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b083      	sub	sp, #12
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ec:	f003 0308 	and.w	r3, r3, #8
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d00a      	beq.n	800660a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	430a      	orrs	r2, r1
 8006608:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800660e:	f003 0301 	and.w	r3, r3, #1
 8006612:	2b00      	cmp	r3, #0
 8006614:	d00a      	beq.n	800662c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	430a      	orrs	r2, r1
 800662a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006630:	f003 0302 	and.w	r3, r3, #2
 8006634:	2b00      	cmp	r3, #0
 8006636:	d00a      	beq.n	800664e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	430a      	orrs	r2, r1
 800664c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006652:	f003 0304 	and.w	r3, r3, #4
 8006656:	2b00      	cmp	r3, #0
 8006658:	d00a      	beq.n	8006670 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	430a      	orrs	r2, r1
 800666e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006674:	f003 0310 	and.w	r3, r3, #16
 8006678:	2b00      	cmp	r3, #0
 800667a:	d00a      	beq.n	8006692 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	430a      	orrs	r2, r1
 8006690:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006696:	f003 0320 	and.w	r3, r3, #32
 800669a:	2b00      	cmp	r3, #0
 800669c:	d00a      	beq.n	80066b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	430a      	orrs	r2, r1
 80066b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d01a      	beq.n	80066f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	430a      	orrs	r2, r1
 80066d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066de:	d10a      	bne.n	80066f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	430a      	orrs	r2, r1
 80066f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d00a      	beq.n	8006718 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	430a      	orrs	r2, r1
 8006716:	605a      	str	r2, [r3, #4]
  }
}
 8006718:	bf00      	nop
 800671a:	370c      	adds	r7, #12
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr

08006724 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b098      	sub	sp, #96	; 0x60
 8006728:	af02      	add	r7, sp, #8
 800672a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2200      	movs	r2, #0
 8006730:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006734:	f7fa fdf4 	bl	8001320 <HAL_GetTick>
 8006738:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f003 0308 	and.w	r3, r3, #8
 8006744:	2b08      	cmp	r3, #8
 8006746:	d12f      	bne.n	80067a8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006748:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800674c:	9300      	str	r3, [sp, #0]
 800674e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006750:	2200      	movs	r2, #0
 8006752:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f000 f88e 	bl	8006878 <UART_WaitOnFlagUntilTimeout>
 800675c:	4603      	mov	r3, r0
 800675e:	2b00      	cmp	r3, #0
 8006760:	d022      	beq.n	80067a8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800676a:	e853 3f00 	ldrex	r3, [r3]
 800676e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006772:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006776:	653b      	str	r3, [r7, #80]	; 0x50
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	461a      	mov	r2, r3
 800677e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006780:	647b      	str	r3, [r7, #68]	; 0x44
 8006782:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006784:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006786:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006788:	e841 2300 	strex	r3, r2, [r1]
 800678c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800678e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006790:	2b00      	cmp	r3, #0
 8006792:	d1e6      	bne.n	8006762 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2220      	movs	r2, #32
 8006798:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2200      	movs	r2, #0
 80067a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067a4:	2303      	movs	r3, #3
 80067a6:	e063      	b.n	8006870 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f003 0304 	and.w	r3, r3, #4
 80067b2:	2b04      	cmp	r3, #4
 80067b4:	d149      	bne.n	800684a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067b6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80067ba:	9300      	str	r3, [sp, #0]
 80067bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067be:	2200      	movs	r2, #0
 80067c0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f000 f857 	bl	8006878 <UART_WaitOnFlagUntilTimeout>
 80067ca:	4603      	mov	r3, r0
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d03c      	beq.n	800684a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d8:	e853 3f00 	ldrex	r3, [r3]
 80067dc:	623b      	str	r3, [r7, #32]
   return(result);
 80067de:	6a3b      	ldr	r3, [r7, #32]
 80067e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80067e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	461a      	mov	r2, r3
 80067ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067ee:	633b      	str	r3, [r7, #48]	; 0x30
 80067f0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80067f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067f6:	e841 2300 	strex	r3, r2, [r1]
 80067fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80067fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d1e6      	bne.n	80067d0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	3308      	adds	r3, #8
 8006808:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	e853 3f00 	ldrex	r3, [r3]
 8006810:	60fb      	str	r3, [r7, #12]
   return(result);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	f023 0301 	bic.w	r3, r3, #1
 8006818:	64bb      	str	r3, [r7, #72]	; 0x48
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	3308      	adds	r3, #8
 8006820:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006822:	61fa      	str	r2, [r7, #28]
 8006824:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006826:	69b9      	ldr	r1, [r7, #24]
 8006828:	69fa      	ldr	r2, [r7, #28]
 800682a:	e841 2300 	strex	r3, r2, [r1]
 800682e:	617b      	str	r3, [r7, #20]
   return(result);
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d1e5      	bne.n	8006802 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2220      	movs	r2, #32
 800683a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2200      	movs	r2, #0
 8006842:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006846:	2303      	movs	r3, #3
 8006848:	e012      	b.n	8006870 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2220      	movs	r2, #32
 800684e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2220      	movs	r2, #32
 8006856:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2200      	movs	r2, #0
 800685e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2200      	movs	r2, #0
 8006864:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2200      	movs	r2, #0
 800686a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800686e:	2300      	movs	r3, #0
}
 8006870:	4618      	mov	r0, r3
 8006872:	3758      	adds	r7, #88	; 0x58
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}

08006878 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b084      	sub	sp, #16
 800687c:	af00      	add	r7, sp, #0
 800687e:	60f8      	str	r0, [r7, #12]
 8006880:	60b9      	str	r1, [r7, #8]
 8006882:	603b      	str	r3, [r7, #0]
 8006884:	4613      	mov	r3, r2
 8006886:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006888:	e04f      	b.n	800692a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800688a:	69bb      	ldr	r3, [r7, #24]
 800688c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006890:	d04b      	beq.n	800692a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006892:	f7fa fd45 	bl	8001320 <HAL_GetTick>
 8006896:	4602      	mov	r2, r0
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	1ad3      	subs	r3, r2, r3
 800689c:	69ba      	ldr	r2, [r7, #24]
 800689e:	429a      	cmp	r2, r3
 80068a0:	d302      	bcc.n	80068a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80068a2:	69bb      	ldr	r3, [r7, #24]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d101      	bne.n	80068ac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80068a8:	2303      	movs	r3, #3
 80068aa:	e04e      	b.n	800694a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f003 0304 	and.w	r3, r3, #4
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d037      	beq.n	800692a <UART_WaitOnFlagUntilTimeout+0xb2>
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	2b80      	cmp	r3, #128	; 0x80
 80068be:	d034      	beq.n	800692a <UART_WaitOnFlagUntilTimeout+0xb2>
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	2b40      	cmp	r3, #64	; 0x40
 80068c4:	d031      	beq.n	800692a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	69db      	ldr	r3, [r3, #28]
 80068cc:	f003 0308 	and.w	r3, r3, #8
 80068d0:	2b08      	cmp	r3, #8
 80068d2:	d110      	bne.n	80068f6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	2208      	movs	r2, #8
 80068da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80068dc:	68f8      	ldr	r0, [r7, #12]
 80068de:	f000 f839 	bl	8006954 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2208      	movs	r2, #8
 80068e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2200      	movs	r2, #0
 80068ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	e029      	b.n	800694a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	69db      	ldr	r3, [r3, #28]
 80068fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006900:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006904:	d111      	bne.n	800692a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800690e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006910:	68f8      	ldr	r0, [r7, #12]
 8006912:	f000 f81f 	bl	8006954 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	2220      	movs	r2, #32
 800691a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2200      	movs	r2, #0
 8006922:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006926:	2303      	movs	r3, #3
 8006928:	e00f      	b.n	800694a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	69da      	ldr	r2, [r3, #28]
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	4013      	ands	r3, r2
 8006934:	68ba      	ldr	r2, [r7, #8]
 8006936:	429a      	cmp	r2, r3
 8006938:	bf0c      	ite	eq
 800693a:	2301      	moveq	r3, #1
 800693c:	2300      	movne	r3, #0
 800693e:	b2db      	uxtb	r3, r3
 8006940:	461a      	mov	r2, r3
 8006942:	79fb      	ldrb	r3, [r7, #7]
 8006944:	429a      	cmp	r2, r3
 8006946:	d0a0      	beq.n	800688a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006948:	2300      	movs	r3, #0
}
 800694a:	4618      	mov	r0, r3
 800694c:	3710      	adds	r7, #16
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}
	...

08006954 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006954:	b480      	push	{r7}
 8006956:	b095      	sub	sp, #84	; 0x54
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006964:	e853 3f00 	ldrex	r3, [r3]
 8006968:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800696a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800696c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006970:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	461a      	mov	r2, r3
 8006978:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800697a:	643b      	str	r3, [r7, #64]	; 0x40
 800697c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800697e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006980:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006982:	e841 2300 	strex	r3, r2, [r1]
 8006986:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800698a:	2b00      	cmp	r3, #0
 800698c:	d1e6      	bne.n	800695c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	3308      	adds	r3, #8
 8006994:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006996:	6a3b      	ldr	r3, [r7, #32]
 8006998:	e853 3f00 	ldrex	r3, [r3]
 800699c:	61fb      	str	r3, [r7, #28]
   return(result);
 800699e:	69fa      	ldr	r2, [r7, #28]
 80069a0:	4b1e      	ldr	r3, [pc, #120]	; (8006a1c <UART_EndRxTransfer+0xc8>)
 80069a2:	4013      	ands	r3, r2
 80069a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	3308      	adds	r3, #8
 80069ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80069ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80069b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80069b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069b6:	e841 2300 	strex	r3, r2, [r1]
 80069ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80069bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d1e5      	bne.n	800698e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	d118      	bne.n	80069fc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	e853 3f00 	ldrex	r3, [r3]
 80069d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	f023 0310 	bic.w	r3, r3, #16
 80069de:	647b      	str	r3, [r7, #68]	; 0x44
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	461a      	mov	r2, r3
 80069e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069e8:	61bb      	str	r3, [r7, #24]
 80069ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ec:	6979      	ldr	r1, [r7, #20]
 80069ee:	69ba      	ldr	r2, [r7, #24]
 80069f0:	e841 2300 	strex	r3, r2, [r1]
 80069f4:	613b      	str	r3, [r7, #16]
   return(result);
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d1e6      	bne.n	80069ca <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2220      	movs	r2, #32
 8006a00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2200      	movs	r2, #0
 8006a08:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006a10:	bf00      	nop
 8006a12:	3754      	adds	r7, #84	; 0x54
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr
 8006a1c:	effffffe 	.word	0xeffffffe

08006a20 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b085      	sub	sp, #20
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d101      	bne.n	8006a36 <HAL_UARTEx_DisableFifoMode+0x16>
 8006a32:	2302      	movs	r3, #2
 8006a34:	e027      	b.n	8006a86 <HAL_UARTEx_DisableFifoMode+0x66>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2201      	movs	r2, #1
 8006a3a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2224      	movs	r2, #36	; 0x24
 8006a42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	681a      	ldr	r2, [r3, #0]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f022 0201 	bic.w	r2, r2, #1
 8006a5c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006a64:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	68fa      	ldr	r2, [r7, #12]
 8006a72:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2220      	movs	r2, #32
 8006a78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006a84:	2300      	movs	r3, #0
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3714      	adds	r7, #20
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a90:	4770      	bx	lr

08006a92 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006a92:	b580      	push	{r7, lr}
 8006a94:	b084      	sub	sp, #16
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	6078      	str	r0, [r7, #4]
 8006a9a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d101      	bne.n	8006aaa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006aa6:	2302      	movs	r3, #2
 8006aa8:	e02d      	b.n	8006b06 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2201      	movs	r2, #1
 8006aae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2224      	movs	r2, #36	; 0x24
 8006ab6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	681a      	ldr	r2, [r3, #0]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f022 0201 	bic.w	r2, r2, #1
 8006ad0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	683a      	ldr	r2, [r7, #0]
 8006ae2:	430a      	orrs	r2, r1
 8006ae4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 f850 	bl	8006b8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	68fa      	ldr	r2, [r7, #12]
 8006af2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2220      	movs	r2, #32
 8006af8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2200      	movs	r2, #0
 8006b00:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006b04:	2300      	movs	r3, #0
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3710      	adds	r7, #16
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}

08006b0e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006b0e:	b580      	push	{r7, lr}
 8006b10:	b084      	sub	sp, #16
 8006b12:	af00      	add	r7, sp, #0
 8006b14:	6078      	str	r0, [r7, #4]
 8006b16:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	d101      	bne.n	8006b26 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006b22:	2302      	movs	r3, #2
 8006b24:	e02d      	b.n	8006b82 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2201      	movs	r2, #1
 8006b2a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2224      	movs	r2, #36	; 0x24
 8006b32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	681a      	ldr	r2, [r3, #0]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f022 0201 	bic.w	r2, r2, #1
 8006b4c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	683a      	ldr	r2, [r7, #0]
 8006b5e:	430a      	orrs	r2, r1
 8006b60:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f000 f812 	bl	8006b8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	68fa      	ldr	r2, [r7, #12]
 8006b6e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2220      	movs	r2, #32
 8006b74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006b80:	2300      	movs	r3, #0
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3710      	adds	r7, #16
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}
	...

08006b8c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b085      	sub	sp, #20
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d108      	bne.n	8006bae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006bac:	e031      	b.n	8006c12 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006bae:	2310      	movs	r3, #16
 8006bb0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006bb2:	2310      	movs	r3, #16
 8006bb4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	689b      	ldr	r3, [r3, #8]
 8006bbc:	0e5b      	lsrs	r3, r3, #25
 8006bbe:	b2db      	uxtb	r3, r3
 8006bc0:	f003 0307 	and.w	r3, r3, #7
 8006bc4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	0f5b      	lsrs	r3, r3, #29
 8006bce:	b2db      	uxtb	r3, r3
 8006bd0:	f003 0307 	and.w	r3, r3, #7
 8006bd4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006bd6:	7bbb      	ldrb	r3, [r7, #14]
 8006bd8:	7b3a      	ldrb	r2, [r7, #12]
 8006bda:	4911      	ldr	r1, [pc, #68]	; (8006c20 <UARTEx_SetNbDataToProcess+0x94>)
 8006bdc:	5c8a      	ldrb	r2, [r1, r2]
 8006bde:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006be2:	7b3a      	ldrb	r2, [r7, #12]
 8006be4:	490f      	ldr	r1, [pc, #60]	; (8006c24 <UARTEx_SetNbDataToProcess+0x98>)
 8006be6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006be8:	fb93 f3f2 	sdiv	r3, r3, r2
 8006bec:	b29a      	uxth	r2, r3
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006bf4:	7bfb      	ldrb	r3, [r7, #15]
 8006bf6:	7b7a      	ldrb	r2, [r7, #13]
 8006bf8:	4909      	ldr	r1, [pc, #36]	; (8006c20 <UARTEx_SetNbDataToProcess+0x94>)
 8006bfa:	5c8a      	ldrb	r2, [r1, r2]
 8006bfc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006c00:	7b7a      	ldrb	r2, [r7, #13]
 8006c02:	4908      	ldr	r1, [pc, #32]	; (8006c24 <UARTEx_SetNbDataToProcess+0x98>)
 8006c04:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006c06:	fb93 f3f2 	sdiv	r3, r3, r2
 8006c0a:	b29a      	uxth	r2, r3
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006c12:	bf00      	nop
 8006c14:	3714      	adds	r7, #20
 8006c16:	46bd      	mov	sp, r7
 8006c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1c:	4770      	bx	lr
 8006c1e:	bf00      	nop
 8006c20:	08006cc0 	.word	0x08006cc0
 8006c24:	08006cc8 	.word	0x08006cc8

08006c28 <memset>:
 8006c28:	4402      	add	r2, r0
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d100      	bne.n	8006c32 <memset+0xa>
 8006c30:	4770      	bx	lr
 8006c32:	f803 1b01 	strb.w	r1, [r3], #1
 8006c36:	e7f9      	b.n	8006c2c <memset+0x4>

08006c38 <__libc_init_array>:
 8006c38:	b570      	push	{r4, r5, r6, lr}
 8006c3a:	4d0d      	ldr	r5, [pc, #52]	; (8006c70 <__libc_init_array+0x38>)
 8006c3c:	4c0d      	ldr	r4, [pc, #52]	; (8006c74 <__libc_init_array+0x3c>)
 8006c3e:	1b64      	subs	r4, r4, r5
 8006c40:	10a4      	asrs	r4, r4, #2
 8006c42:	2600      	movs	r6, #0
 8006c44:	42a6      	cmp	r6, r4
 8006c46:	d109      	bne.n	8006c5c <__libc_init_array+0x24>
 8006c48:	4d0b      	ldr	r5, [pc, #44]	; (8006c78 <__libc_init_array+0x40>)
 8006c4a:	4c0c      	ldr	r4, [pc, #48]	; (8006c7c <__libc_init_array+0x44>)
 8006c4c:	f000 f818 	bl	8006c80 <_init>
 8006c50:	1b64      	subs	r4, r4, r5
 8006c52:	10a4      	asrs	r4, r4, #2
 8006c54:	2600      	movs	r6, #0
 8006c56:	42a6      	cmp	r6, r4
 8006c58:	d105      	bne.n	8006c66 <__libc_init_array+0x2e>
 8006c5a:	bd70      	pop	{r4, r5, r6, pc}
 8006c5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c60:	4798      	blx	r3
 8006c62:	3601      	adds	r6, #1
 8006c64:	e7ee      	b.n	8006c44 <__libc_init_array+0xc>
 8006c66:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c6a:	4798      	blx	r3
 8006c6c:	3601      	adds	r6, #1
 8006c6e:	e7f2      	b.n	8006c56 <__libc_init_array+0x1e>
 8006c70:	08006cd8 	.word	0x08006cd8
 8006c74:	08006cd8 	.word	0x08006cd8
 8006c78:	08006cd8 	.word	0x08006cd8
 8006c7c:	08006cdc 	.word	0x08006cdc

08006c80 <_init>:
 8006c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c82:	bf00      	nop
 8006c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c86:	bc08      	pop	{r3}
 8006c88:	469e      	mov	lr, r3
 8006c8a:	4770      	bx	lr

08006c8c <_fini>:
 8006c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c8e:	bf00      	nop
 8006c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c92:	bc08      	pop	{r3}
 8006c94:	469e      	mov	lr, r3
 8006c96:	4770      	bx	lr
